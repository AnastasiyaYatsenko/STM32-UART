
uart-uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003390  08003390  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003390  08003390  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003390  08003390  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003394  08003394  00013394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000060  080033f4  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  080033f4  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   000074b2  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016e8  00000000  00000000  0002757a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b0  00000000  00000000  00028c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000518  00000000  00000000  00029318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015e6b  00000000  00000000  00029830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000088a8  00000000  00000000  0003f69b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e0fb  00000000  00000000  00047f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f08  00000000  00000000  000c6040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000c7f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	080031d0 	.word	0x080031d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	080031d0 	.word	0x080031d0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CalcCRC>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t CalcCRC(uint64_t ddd)
{
 800015c:	b4f0      	push	{r4, r5, r6, r7}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t crc = 0;
 8000166:	2100      	movs	r1, #0
 8000168:	73f9      	strb	r1, [r7, #15]
    uint8_t byte;
    for (uint8_t i = 0; i < 3; ++i) {
 800016a:	2100      	movs	r1, #0
 800016c:	7379      	strb	r1, [r7, #13]
 800016e:	e036      	b.n	80001de <CalcCRC+0x82>
        byte = (ddd >> (i * 8)) & 255;
 8000170:	7b79      	ldrb	r1, [r7, #13]
 8000172:	00cc      	lsls	r4, r1, #3
 8000174:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000178:	f1c4 0620 	rsb	r6, r4, #32
 800017c:	f1a4 0520 	sub.w	r5, r4, #32
 8000180:	fa20 f204 	lsr.w	r2, r0, r4
 8000184:	fa01 f606 	lsl.w	r6, r1, r6
 8000188:	4332      	orrs	r2, r6
 800018a:	fa21 f505 	lsr.w	r5, r1, r5
 800018e:	432a      	orrs	r2, r5
 8000190:	fa21 f304 	lsr.w	r3, r1, r4
 8000194:	4611      	mov	r1, r2
 8000196:	73b9      	strb	r1, [r7, #14]
        for (uint8_t j = 0; j < 8; ++j) {
 8000198:	2100      	movs	r1, #0
 800019a:	7339      	strb	r1, [r7, #12]
 800019c:	e019      	b.n	80001d2 <CalcCRC+0x76>
            if ((crc >> 7) ^ (byte & 0x01)) {
 800019e:	7bf9      	ldrb	r1, [r7, #15]
 80001a0:	09c9      	lsrs	r1, r1, #7
 80001a2:	b2c9      	uxtb	r1, r1
 80001a4:	4608      	mov	r0, r1
 80001a6:	7bb9      	ldrb	r1, [r7, #14]
 80001a8:	f001 0101 	and.w	r1, r1, #1
 80001ac:	4288      	cmp	r0, r1
 80001ae:	d007      	beq.n	80001c0 <CalcCRC+0x64>
                crc = (crc << 1) ^ 0x07;
 80001b0:	7bf9      	ldrb	r1, [r7, #15]
 80001b2:	0049      	lsls	r1, r1, #1
 80001b4:	b249      	sxtb	r1, r1
 80001b6:	f081 0107 	eor.w	r1, r1, #7
 80001ba:	b249      	sxtb	r1, r1
 80001bc:	73f9      	strb	r1, [r7, #15]
 80001be:	e002      	b.n	80001c6 <CalcCRC+0x6a>
            } else {
                crc = crc << 1;
 80001c0:	7bf9      	ldrb	r1, [r7, #15]
 80001c2:	0049      	lsls	r1, r1, #1
 80001c4:	73f9      	strb	r1, [r7, #15]
            }
            byte = byte >> 1;
 80001c6:	7bb9      	ldrb	r1, [r7, #14]
 80001c8:	0849      	lsrs	r1, r1, #1
 80001ca:	73b9      	strb	r1, [r7, #14]
        for (uint8_t j = 0; j < 8; ++j) {
 80001cc:	7b39      	ldrb	r1, [r7, #12]
 80001ce:	3101      	adds	r1, #1
 80001d0:	7339      	strb	r1, [r7, #12]
 80001d2:	7b39      	ldrb	r1, [r7, #12]
 80001d4:	2907      	cmp	r1, #7
 80001d6:	d9e2      	bls.n	800019e <CalcCRC+0x42>
    for (uint8_t i = 0; i < 3; ++i) {
 80001d8:	7b79      	ldrb	r1, [r7, #13]
 80001da:	3101      	adds	r1, #1
 80001dc:	7379      	strb	r1, [r7, #13]
 80001de:	7b79      	ldrb	r1, [r7, #13]
 80001e0:	2902      	cmp	r1, #2
 80001e2:	d9c5      	bls.n	8000170 <CalcCRC+0x14>
        }
    }
    return crc;
 80001e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bcf0      	pop	{r4, r5, r6, r7}
 80001ee:	4770      	bx	lr

080001f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80001f4:	f5ad 7d7b 	sub.w	sp, sp, #1004	; 0x3ec
 80001f8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fa:	f000 fbf1 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fe:	f000 f9e3 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000202:	f000 fa77 	bl	80006f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000206:	f000 fa21 	bl	800064c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800020a:	f000 fa49 	bl	80006a0 <MX_USART2_UART_Init>
//	  HAL_UART_Transmit(&huart1, str, strlen(str), 30);
	  HAL_Delay(0);
  }
*/

  req.bytes            = 0;
 800020e:	4bc8      	ldr	r3, [pc, #800]	; (8000530 <main+0x340>)
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
  req.sync             = 5;
 8000214:	4ac6      	ldr	r2, [pc, #792]	; (8000530 <main+0x340>)
 8000216:	7813      	ldrb	r3, [r2, #0]
 8000218:	2105      	movs	r1, #5
 800021a:	f361 0303 	bfi	r3, r1, #0, #4
 800021e:	7013      	strb	r3, [r2, #0]
  req.reserved         = 0;
 8000220:	4ac3      	ldr	r2, [pc, #780]	; (8000530 <main+0x340>)
 8000222:	7813      	ldrb	r3, [r2, #0]
 8000224:	f36f 1307 	bfc	r3, #4, #4
 8000228:	7013      	strb	r3, [r2, #0]
  req.serial_address   = 0;
 800022a:	4bc1      	ldr	r3, [pc, #772]	; (8000530 <main+0x340>)
 800022c:	2200      	movs	r2, #0
 800022e:	705a      	strb	r2, [r3, #1]
  req.register_address = 0x6c;
 8000230:	4abf      	ldr	r2, [pc, #764]	; (8000530 <main+0x340>)
 8000232:	7893      	ldrb	r3, [r2, #2]
 8000234:	216c      	movs	r1, #108	; 0x6c
 8000236:	f361 0306 	bfi	r3, r1, #0, #7
 800023a:	7093      	strb	r3, [r2, #2]
  req.rw               = 0;
 800023c:	4abc      	ldr	r2, [pc, #752]	; (8000530 <main+0x340>)
 800023e:	7893      	ldrb	r3, [r2, #2]
 8000240:	f36f 13c7 	bfc	r3, #7, #1
 8000244:	7093      	strb	r3, [r2, #2]
  req.crc              = CalcCRC(req.bytes);
 8000246:	4bba      	ldr	r3, [pc, #744]	; (8000530 <main+0x340>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	2200      	movs	r2, #0
 800024c:	4698      	mov	r8, r3
 800024e:	4691      	mov	r9, r2
 8000250:	4640      	mov	r0, r8
 8000252:	4649      	mov	r1, r9
 8000254:	f7ff ff82 	bl	800015c <CalcCRC>
 8000258:	4603      	mov	r3, r0
 800025a:	461a      	mov	r2, r3
 800025c:	4bb4      	ldr	r3, [pc, #720]	; (8000530 <main+0x340>)
 800025e:	70da      	strb	r2, [r3, #3]

  uint32_t regs[] = { 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
 8000260:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000264:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000268:	4ab2      	ldr	r2, [pc, #712]	; (8000534 <main+0x344>)
 800026a:	4618      	mov	r0, r3
 800026c:	4611      	mov	r1, r2
 800026e:	2360      	movs	r3, #96	; 0x60
 8000270:	461a      	mov	r2, r3
 8000272:	f002 fb4f 	bl	8002914 <memcpy>
		              0x10,0x11,0x12,0x13,0x14,0x22,0x40,0x41,
					  0x42,0x68,0x6a,0x6c,0x6f,0x70,0x71,0x72};
  uint32_t sr[24][5],dr[5];

  sprintf(str, "\x1b[2H\x1b[2J\0");
 8000276:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800027a:	49af      	ldr	r1, [pc, #700]	; (8000538 <main+0x348>)
 800027c:	4618      	mov	r0, r3
 800027e:	f002 faf5 	bl	800286c <siprintf>
  HAL_UART_Transmit(&huart1, str, strlen(str), 30);
 8000282:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8000286:	4618      	mov	r0, r3
 8000288:	f7ff ff60 	bl	800014c <strlen>
 800028c:	4603      	mov	r3, r0
 800028e:	b29a      	uxth	r2, r3
 8000290:	f507 7129 	add.w	r1, r7, #676	; 0x2a4
 8000294:	231e      	movs	r3, #30
 8000296:	48a9      	ldr	r0, [pc, #676]	; (800053c <main+0x34c>)
 8000298:	f001 fc1c 	bl	8001ad4 <HAL_UART_Transmit>

  for (int i=0; i<sizeof(regs)/4; i++) {
 800029c:	2300      	movs	r3, #0
 800029e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80002a2:	e09a      	b.n	80003da <main+0x1ea>
  	  req.register_address = regs[i];
 80002a4:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80002a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80002ac:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80002b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002b8:	b2d9      	uxtb	r1, r3
 80002ba:	4a9d      	ldr	r2, [pc, #628]	; (8000530 <main+0x340>)
 80002bc:	7893      	ldrb	r3, [r2, #2]
 80002be:	f361 0306 	bfi	r3, r1, #0, #7
 80002c2:	7093      	strb	r3, [r2, #2]
  	  req.crc              = CalcCRC(req.bytes);
 80002c4:	4b9a      	ldr	r3, [pc, #616]	; (8000530 <main+0x340>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2200      	movs	r2, #0
 80002ca:	461c      	mov	r4, r3
 80002cc:	4615      	mov	r5, r2
 80002ce:	4620      	mov	r0, r4
 80002d0:	4629      	mov	r1, r5
 80002d2:	f7ff ff43 	bl	800015c <CalcCRC>
 80002d6:	4603      	mov	r3, r0
 80002d8:	461a      	mov	r2, r3
 80002da:	4b95      	ldr	r3, [pc, #596]	; (8000530 <main+0x340>)
 80002dc:	70da      	strb	r2, [r3, #3]

  //	  status[i] = HAL_UART_Receive(&huart2, (uint8_t *)(& ans[i].bytes), 8, 2);
  	  sr[i][0] = huart2.Instance->SR;
 80002de:	4b98      	ldr	r3, [pc, #608]	; (8000540 <main+0x350>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	6819      	ldr	r1, [r3, #0]
 80002e4:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80002e8:	f5a3 706d 	sub.w	r0, r3, #948	; 0x3b4
 80002ec:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80002f0:	4613      	mov	r3, r2
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	4413      	add	r3, r2
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	4403      	add	r3, r0
 80002fa:	6019      	str	r1, [r3, #0]

  	  HAL_HalfDuplex_EnableTransmitter(&huart2);
 80002fc:	4890      	ldr	r0, [pc, #576]	; (8000540 <main+0x350>)
 80002fe:	f001 ffb7 	bl	8002270 <HAL_HalfDuplex_EnableTransmitter>
  	  HAL_UART_Transmit(&huart2, (uint8_t *)(& req), 4, 1);
 8000302:	2301      	movs	r3, #1
 8000304:	2204      	movs	r2, #4
 8000306:	498a      	ldr	r1, [pc, #552]	; (8000530 <main+0x340>)
 8000308:	488d      	ldr	r0, [pc, #564]	; (8000540 <main+0x350>)
 800030a:	f001 fbe3 	bl	8001ad4 <HAL_UART_Transmit>
  	  sr[i][1] = huart2.Instance->SR;
 800030e:	4b8c      	ldr	r3, [pc, #560]	; (8000540 <main+0x350>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	6819      	ldr	r1, [r3, #0]
 8000314:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000318:	f5a3 706d 	sub.w	r0, r3, #948	; 0x3b4
 800031c:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8000320:	4613      	mov	r3, r2
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	4413      	add	r3, r2
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	4403      	add	r3, r0
 800032a:	3304      	adds	r3, #4
 800032c:	6019      	str	r1, [r3, #0]

  //	  status1[i] = HAL_UART_AbortReceive(&huart2); // Прерываем прием данных
  	  sr[i][2] = huart2.Instance->SR;
 800032e:	4b84      	ldr	r3, [pc, #528]	; (8000540 <main+0x350>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	6819      	ldr	r1, [r3, #0]
 8000334:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000338:	f5a3 706d 	sub.w	r0, r3, #948	; 0x3b4
 800033c:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8000340:	4613      	mov	r3, r2
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	4413      	add	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	4403      	add	r3, r0
 800034a:	3308      	adds	r3, #8
 800034c:	6019      	str	r1, [r3, #0]

  	  cc[i]=0;
 800034e:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000352:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 8000356:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800035a:	4413      	add	r3, r2
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]
  	  HAL_HalfDuplex_EnableReceiver(&huart2);
 8000360:	4877      	ldr	r0, [pc, #476]	; (8000540 <main+0x350>)
 8000362:	f001 ffb8 	bl	80022d6 <HAL_HalfDuplex_EnableReceiver>
  //	  status1[i] = HAL_UART_Receive(&huart2, cc+i, 1, 1); // == HAL_OK;
  	  sr[i][3] = huart2.Instance->SR;
 8000366:	4b76      	ldr	r3, [pc, #472]	; (8000540 <main+0x350>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	6819      	ldr	r1, [r3, #0]
 800036c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000370:	f5a3 706d 	sub.w	r0, r3, #948	; 0x3b4
 8000374:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8000378:	4613      	mov	r3, r2
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	4413      	add	r3, r2
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	4403      	add	r3, r0
 8000382:	330c      	adds	r3, #12
 8000384:	6019      	str	r1, [r3, #0]

  	  status[i] = HAL_UART_Receive(&huart2, (uint8_t *)(& ans[i].bytes), 8, 12);
 8000386:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800038a:	00db      	lsls	r3, r3, #3
 800038c:	4a6d      	ldr	r2, [pc, #436]	; (8000544 <main+0x354>)
 800038e:	1899      	adds	r1, r3, r2
 8000390:	230c      	movs	r3, #12
 8000392:	2208      	movs	r2, #8
 8000394:	486a      	ldr	r0, [pc, #424]	; (8000540 <main+0x350>)
 8000396:	f001 fc20 	bl	8001bda <HAL_UART_Receive>
 800039a:	4603      	mov	r3, r0
 800039c:	4619      	mov	r1, r3
 800039e:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80003a2:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 80003a6:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80003aa:	4413      	add	r3, r2
 80003ac:	460a      	mov	r2, r1
 80003ae:	701a      	strb	r2, [r3, #0]
  	  sr[i][4] = huart2.Instance->SR;
 80003b0:	4b63      	ldr	r3, [pc, #396]	; (8000540 <main+0x350>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	6819      	ldr	r1, [r3, #0]
 80003b6:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80003ba:	f5a3 706d 	sub.w	r0, r3, #948	; 0x3b4
 80003be:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80003c2:	4613      	mov	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	4413      	add	r3, r2
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	4403      	add	r3, r0
 80003cc:	3310      	adds	r3, #16
 80003ce:	6019      	str	r1, [r3, #0]
  for (int i=0; i<sizeof(regs)/4; i++) {
 80003d0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80003d4:	3301      	adds	r3, #1
 80003d6:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80003da:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80003de:	2b17      	cmp	r3, #23
 80003e0:	f67f af60 	bls.w	80002a4 <main+0xb4>
    }

  for (int i=0; i<sizeof(regs)/4; i++) {
 80003e4:	2300      	movs	r3, #0
 80003e6:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80003ea:	e0d9      	b.n	80005a0 <main+0x3b0>
      sprintf(str, "Статусы: %02x %02x %02x %02x %02x  CC:[%d] %02x  \0",sr[i][0],sr[i][1],sr[i][2],sr[i][3],sr[i][4],status1[i],cc[i]);
 80003ec:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80003f0:	f5a3 716d 	sub.w	r1, r3, #948	; 0x3b4
 80003f4:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80003f8:	4613      	mov	r3, r2
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	440b      	add	r3, r1
 8000402:	681d      	ldr	r5, [r3, #0]
 8000404:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000408:	f5a3 716d 	sub.w	r1, r3, #948	; 0x3b4
 800040c:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8000410:	4613      	mov	r3, r2
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	4413      	add	r3, r2
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	440b      	add	r3, r1
 800041a:	3304      	adds	r3, #4
 800041c:	681e      	ldr	r6, [r3, #0]
 800041e:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000422:	f5a3 716d 	sub.w	r1, r3, #948	; 0x3b4
 8000426:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800042a:	4613      	mov	r3, r2
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	4413      	add	r3, r2
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	440b      	add	r3, r1
 8000434:	3308      	adds	r3, #8
 8000436:	6819      	ldr	r1, [r3, #0]
 8000438:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800043c:	f5a3 706d 	sub.w	r0, r3, #948	; 0x3b4
 8000440:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8000444:	4613      	mov	r3, r2
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	4413      	add	r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4403      	add	r3, r0
 800044e:	330c      	adds	r3, #12
 8000450:	6818      	ldr	r0, [r3, #0]
 8000452:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000456:	f5a3 746d 	sub.w	r4, r3, #948	; 0x3b4
 800045a:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800045e:	4613      	mov	r3, r2
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	4413      	add	r3, r2
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	4423      	add	r3, r4
 8000468:	3310      	adds	r3, #16
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8000470:	f5a2 74ba 	sub.w	r4, r2, #372	; 0x174
 8000474:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8000478:	4422      	add	r2, r4
 800047a:	7812      	ldrb	r2, [r2, #0]
 800047c:	607a      	str	r2, [r7, #4]
 800047e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8000482:	f5a2 74a2 	sub.w	r4, r2, #324	; 0x144
 8000486:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800048a:	4422      	add	r2, r4
 800048c:	7812      	ldrb	r2, [r2, #0]
 800048e:	f507 7429 	add.w	r4, r7, #676	; 0x2a4
 8000492:	9204      	str	r2, [sp, #16]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	9203      	str	r2, [sp, #12]
 8000498:	9302      	str	r3, [sp, #8]
 800049a:	9001      	str	r0, [sp, #4]
 800049c:	9100      	str	r1, [sp, #0]
 800049e:	4633      	mov	r3, r6
 80004a0:	462a      	mov	r2, r5
 80004a2:	4929      	ldr	r1, [pc, #164]	; (8000548 <main+0x358>)
 80004a4:	4620      	mov	r0, r4
 80004a6:	f002 f9e1 	bl	800286c <siprintf>
      HAL_UART_Transmit(&huart1, str, strlen(str), 30);
 80004aa:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff fe4c 	bl	800014c <strlen>
 80004b4:	4603      	mov	r3, r0
 80004b6:	b29a      	uxth	r2, r3
 80004b8:	f507 7129 	add.w	r1, r7, #676	; 0x2a4
 80004bc:	231e      	movs	r3, #30
 80004be:	481f      	ldr	r0, [pc, #124]	; (800053c <main+0x34c>)
 80004c0:	f001 fb08 	bl	8001ad4 <HAL_UART_Transmit>
      if (status[i]==0) {
 80004c4:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80004c8:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 80004cc:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80004d0:	4413      	add	r3, r2
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d114      	bne.n	8000502 <main+0x312>
	      sprintf(str, "Чтение регистра %02x: %08x\r\n\0",regs[i],ans[i].data);
 80004d8:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80004dc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80004e0:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80004e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004e8:	4916      	ldr	r1, [pc, #88]	; (8000544 <main+0x354>)
 80004ea:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80004ee:	00db      	lsls	r3, r3, #3
 80004f0:	440b      	add	r3, r1
 80004f2:	f8d3 3003 	ldr.w	r3, [r3, #3]
 80004f6:	f507 7029 	add.w	r0, r7, #676	; 0x2a4
 80004fa:	4914      	ldr	r1, [pc, #80]	; (800054c <main+0x35c>)
 80004fc:	f002 f9b6 	bl	800286c <siprintf>
 8000500:	e03c      	b.n	800057c <main+0x38c>
      } else if (status[i]==3) {
 8000502:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000506:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800050a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800050e:	4413      	add	r3, r2
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b03      	cmp	r3, #3
 8000514:	d11e      	bne.n	8000554 <main+0x364>
	      sprintf(str, "Ошибка чтения регистра %02x: timeout\r\n\0",req.register_address);
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <main+0x340>)
 8000518:	789b      	ldrb	r3, [r3, #2]
 800051a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800051e:	b2db      	uxtb	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8000526:	490a      	ldr	r1, [pc, #40]	; (8000550 <main+0x360>)
 8000528:	4618      	mov	r0, r3
 800052a:	f002 f99f 	bl	800286c <siprintf>
 800052e:	e025      	b.n	800057c <main+0x38c>
 8000530:	2000010c 	.word	0x2000010c
 8000534:	080032d0 	.word	0x080032d0
 8000538:	080031e8 	.word	0x080031e8
 800053c:	2000007c 	.word	0x2000007c
 8000540:	200000c4 	.word	0x200000c4
 8000544:	20000110 	.word	0x20000110
 8000548:	080031f4 	.word	0x080031f4
 800054c:	08003230 	.word	0x08003230
 8000550:	0800325c 	.word	0x0800325c
      } else {
	      sprintf(str, "Ошибка чтения регистра %02x: %d\r\n\0",req.register_address,status[i]);
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <main+0x3c8>)
 8000556:	789b      	ldrb	r3, [r3, #2]
 8000558:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800055c:	b2db      	uxtb	r3, r3
 800055e:	4619      	mov	r1, r3
 8000560:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000564:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8000568:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800056c:	4413      	add	r3, r2
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	f507 7029 	add.w	r0, r7, #676	; 0x2a4
 8000574:	460a      	mov	r2, r1
 8000576:	4911      	ldr	r1, [pc, #68]	; (80005bc <main+0x3cc>)
 8000578:	f002 f978 	bl	800286c <siprintf>
      }
	  HAL_UART_Transmit(&huart1, str, strlen(str), 30);
 800057c:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff fde3 	bl	800014c <strlen>
 8000586:	4603      	mov	r3, r0
 8000588:	b29a      	uxth	r2, r3
 800058a:	f507 7129 	add.w	r1, r7, #676	; 0x2a4
 800058e:	231e      	movs	r3, #30
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <main+0x3d0>)
 8000592:	f001 fa9f 	bl	8001ad4 <HAL_UART_Transmit>
  for (int i=0; i<sizeof(regs)/4; i++) {
 8000596:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800059a:	3301      	adds	r3, #1
 800059c:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80005a0:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80005a4:	2b17      	cmp	r3, #23
 80005a6:	f67f af21 	bls.w	80003ec <main+0x1fc>
	  //	  HAL_Delay(1000);
  }

  HAL_Delay(100000);
 80005aa:	4806      	ldr	r0, [pc, #24]	; (80005c4 <main+0x3d4>)
 80005ac:	f000 fa7a 	bl	8000aa4 <HAL_Delay>
    // прием о�?тавших�?�? 2х байтов команды
//    if(
//    status = HAL_UART_Receive(&huart2, (uint8_t *)(& ans.bytes), 8, 1);
//    != HAL_OK ) continue;

    HAL_Delay(100);
 80005b0:	2064      	movs	r0, #100	; 0x64
 80005b2:	f000 fa77 	bl	8000aa4 <HAL_Delay>
 80005b6:	e7fb      	b.n	80005b0 <main+0x3c0>
 80005b8:	2000010c 	.word	0x2000010c
 80005bc:	08003298 	.word	0x08003298
 80005c0:	2000007c 	.word	0x2000007c
 80005c4:	000186a0 	.word	0x000186a0

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b090      	sub	sp, #64	; 0x40
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0318 	add.w	r3, r7, #24
 80005d2:	2228      	movs	r2, #40	; 0x28
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f968 	bl	80028ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ea:	2302      	movs	r3, #2
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ee:	2301      	movs	r3, #1
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f2:	2310      	movs	r3, #16
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80005fa:	2300      	movs	r3, #0
 80005fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80005fe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0318 	add.w	r3, r7, #24
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fdab 	bl	8001164 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000614:	f000 f884 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2102      	movs	r1, #2
 8000632:	4618      	mov	r0, r3
 8000634:	f001 f818 	bl	8001668 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800063e:	f000 f86f 	bl	8000720 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3740      	adds	r7, #64	; 0x40
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_USART1_UART_Init+0x50>)
 8000654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 8000684:	f001 f97e 	bl	8001984 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800068e:	f000 f847 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000007c 	.word	0x2000007c
 800069c:	40013800 	.word	0x40013800

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_USART2_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ac:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d8:	f001 f9a4 	bl	8001a24 <HAL_HalfDuplex_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f81d 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000c4 	.word	0x200000c4
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_GPIO_Init+0x28>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a07      	ldr	r2, [pc, #28]	; (800071c <MX_GPIO_Init+0x28>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <MX_GPIO_Init+0x28>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	40021000 	.word	0x40021000

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_MspInit+0x5c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <HAL_MspInit+0x5c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_MspInit+0x5c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_MspInit+0x5c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <HAL_MspInit+0x5c>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_MspInit+0x5c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_MspInit+0x60>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_MspInit+0x60>)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000
 800078c:	40010000 	.word	0x40010000

08000790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0318 	add.w	r3, r7, #24
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a3a      	ldr	r2, [pc, #232]	; (8000894 <HAL_UART_MspInit+0x104>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d13a      	bne.n	8000826 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007b0:	4b39      	ldr	r3, [pc, #228]	; (8000898 <HAL_UART_MspInit+0x108>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a38      	ldr	r2, [pc, #224]	; (8000898 <HAL_UART_MspInit+0x108>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b36      	ldr	r3, [pc, #216]	; (8000898 <HAL_UART_MspInit+0x108>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b33      	ldr	r3, [pc, #204]	; (8000898 <HAL_UART_MspInit+0x108>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a32      	ldr	r2, [pc, #200]	; (8000898 <HAL_UART_MspInit+0x108>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b30      	ldr	r3, [pc, #192]	; (8000898 <HAL_UART_MspInit+0x108>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	4619      	mov	r1, r3
 80007f4:	4829      	ldr	r0, [pc, #164]	; (800089c <HAL_UART_MspInit+0x10c>)
 80007f6:	f000 fb39 	bl	8000e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 0318 	add.w	r3, r7, #24
 800080c:	4619      	mov	r1, r3
 800080e:	4823      	ldr	r0, [pc, #140]	; (800089c <HAL_UART_MspInit+0x10c>)
 8000810:	f000 fb2c 	bl	8000e6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2025      	movs	r0, #37	; 0x25
 800081a:	f000 fa3e 	bl	8000c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800081e:	2025      	movs	r0, #37	; 0x25
 8000820:	f000 fa57 	bl	8000cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000824:	e032      	b.n	800088c <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a1d      	ldr	r2, [pc, #116]	; (80008a0 <HAL_UART_MspInit+0x110>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d12d      	bne.n	800088c <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <HAL_UART_MspInit+0x108>)
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	4a18      	ldr	r2, [pc, #96]	; (8000898 <HAL_UART_MspInit+0x108>)
 8000836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083a:	61d3      	str	r3, [r2, #28]
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <HAL_UART_MspInit+0x108>)
 800083e:	69db      	ldr	r3, [r3, #28]
 8000840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <HAL_UART_MspInit+0x108>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a12      	ldr	r2, [pc, #72]	; (8000898 <HAL_UART_MspInit+0x108>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_UART_MspInit+0x108>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000860:	2304      	movs	r3, #4
 8000862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000864:	2312      	movs	r3, #18
 8000866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000868:	2301      	movs	r3, #1
 800086a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 0318 	add.w	r3, r7, #24
 8000874:	4619      	mov	r1, r3
 8000876:	4809      	ldr	r0, [pc, #36]	; (800089c <HAL_UART_MspInit+0x10c>)
 8000878:	f000 faf8 	bl	8000e6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	2026      	movs	r0, #38	; 0x26
 8000882:	f000 fa0a 	bl	8000c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000886:	2026      	movs	r0, #38	; 0x26
 8000888:	f000 fa23 	bl	8000cd2 <HAL_NVIC_EnableIRQ>
}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	; 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40013800 	.word	0x40013800
 8000898:	40021000 	.word	0x40021000
 800089c:	40010800 	.word	0x40010800
 80008a0:	40004400 	.word	0x40004400

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ea:	f000 f8bf 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <USART1_IRQHandler+0x10>)
 80008fa:	f001 fa01 	bl	8001d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000007c 	.word	0x2000007c

08000908 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <USART2_IRQHandler+0x10>)
 800090e:	f001 f9f7 	bl	8001d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000c4 	.word	0x200000c4

0800091c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <_sbrk+0x5c>)
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <_sbrk+0x60>)
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d102      	bne.n	800093e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <_sbrk+0x64>)
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <_sbrk+0x68>)
 800093c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	429a      	cmp	r2, r3
 800094a:	d207      	bcs.n	800095c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800094c:	f001 ffb6 	bl	80028bc <__errno>
 8000950:	4603      	mov	r3, r0
 8000952:	220c      	movs	r2, #12
 8000954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	e009      	b.n	8000970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <_sbrk+0x64>)
 800096c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20002800 	.word	0x20002800
 800097c:	00000400 	.word	0x00000400
 8000980:	200001d0 	.word	0x200001d0
 8000984:	20000320 	.word	0x20000320

08000988 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000994:	f7ff fff8 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800099a:	490c      	ldr	r1, [pc, #48]	; (80009cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800099c:	4a0c      	ldr	r2, [pc, #48]	; (80009d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009b0:	4c09      	ldr	r4, [pc, #36]	; (80009d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009be:	f001 ff83 	bl	80028c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c2:	f7ff fc15 	bl	80001f0 <main>
  bx lr
 80009c6:	4770      	bx	lr
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009d0:	08003398 	.word	0x08003398
  ldr r2, =_sbss
 80009d4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009d8:	20000320 	.word	0x20000320

080009dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC1_2_IRQHandler>
	...

080009e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_Init+0x28>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_Init+0x28>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f947 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f6:	200f      	movs	r0, #15
 80009f8:	f000 f808 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fc:	f7ff fe96 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40022000 	.word	0x40022000

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x54>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_InitTick+0x58>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f95f 	bl	8000cee <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f927 	bl	8000c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_InitTick+0x5c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000004 	.word	0x20000004

08000a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_IncTick+0x1c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_IncTick+0x20>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a03      	ldr	r2, [pc, #12]	; (8000a8c <HAL_IncTick+0x20>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	200001d4 	.word	0x200001d4

08000a90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return uwTick;
 8000a94:	4b02      	ldr	r3, [pc, #8]	; (8000aa0 <HAL_GetTick+0x10>)
 8000a96:	681b      	ldr	r3, [r3, #0]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	200001d4 	.word	0x200001d4

08000aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aac:	f7ff fff0 	bl	8000a90 <HAL_GetTick>
 8000ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000abc:	d005      	beq.n	8000aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <HAL_Delay+0x44>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aca:	bf00      	nop
 8000acc:	f7ff ffe0 	bl	8000a90 <HAL_GetTick>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d8f7      	bhi.n	8000acc <HAL_Delay+0x28>
  {
  }
}
 8000adc:	bf00      	nop
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <__NVIC_GetPriorityGrouping+0x18>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	f003 0307 	and.w	r3, r3, #7
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db0b      	blt.n	8000b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f003 021f 	and.w	r2, r3, #31
 8000b68:	4906      	ldr	r1, [pc, #24]	; (8000b84 <__NVIC_EnableIRQ+0x34>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	095b      	lsrs	r3, r3, #5
 8000b70:	2001      	movs	r0, #1
 8000b72:	fa00 f202 	lsl.w	r2, r0, r2
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	; 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c50:	d301      	bcc.n	8000c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00f      	b.n	8000c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <SysTick_Config+0x40>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5e:	210f      	movs	r1, #15
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f7ff ff90 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <SysTick_Config+0x40>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <SysTick_Config+0x40>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff2d 	bl	8000aec <__NVIC_SetPriorityGrouping>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cac:	f7ff ff42 	bl	8000b34 <__NVIC_GetPriorityGrouping>
 8000cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f7ff ff90 	bl	8000bdc <NVIC_EncodePriority>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff5f 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff35 	bl	8000b50 <__NVIC_EnableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffa2 	bl	8000c40 <SysTick_Config>
 8000cfc:	4603      	mov	r3, r0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d008      	beq.n	8000d30 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2204      	movs	r2, #4
 8000d22:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e020      	b.n	8000d72 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 020e 	bic.w	r2, r2, #14
 8000d3e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f022 0201 	bic.w	r2, r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d005      	beq.n	8000da0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2204      	movs	r2, #4
 8000d98:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
 8000d9e:	e051      	b.n	8000e44 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 020e 	bic.w	r2, r2, #14
 8000dae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0201 	bic.w	r2, r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a22      	ldr	r2, [pc, #136]	; (8000e50 <HAL_DMA_Abort_IT+0xd4>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d029      	beq.n	8000e1e <HAL_DMA_Abort_IT+0xa2>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a21      	ldr	r2, [pc, #132]	; (8000e54 <HAL_DMA_Abort_IT+0xd8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d022      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x9e>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1f      	ldr	r2, [pc, #124]	; (8000e58 <HAL_DMA_Abort_IT+0xdc>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d01a      	beq.n	8000e14 <HAL_DMA_Abort_IT+0x98>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <HAL_DMA_Abort_IT+0xe0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d012      	beq.n	8000e0e <HAL_DMA_Abort_IT+0x92>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <HAL_DMA_Abort_IT+0xe4>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d00a      	beq.n	8000e08 <HAL_DMA_Abort_IT+0x8c>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a1b      	ldr	r2, [pc, #108]	; (8000e64 <HAL_DMA_Abort_IT+0xe8>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d102      	bne.n	8000e02 <HAL_DMA_Abort_IT+0x86>
 8000dfc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e00:	e00e      	b.n	8000e20 <HAL_DMA_Abort_IT+0xa4>
 8000e02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e06:	e00b      	b.n	8000e20 <HAL_DMA_Abort_IT+0xa4>
 8000e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e0c:	e008      	b.n	8000e20 <HAL_DMA_Abort_IT+0xa4>
 8000e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e12:	e005      	b.n	8000e20 <HAL_DMA_Abort_IT+0xa4>
 8000e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e18:	e002      	b.n	8000e20 <HAL_DMA_Abort_IT+0xa4>
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	e000      	b.n	8000e20 <HAL_DMA_Abort_IT+0xa4>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	4a11      	ldr	r2, [pc, #68]	; (8000e68 <HAL_DMA_Abort_IT+0xec>)
 8000e22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	4798      	blx	r3
    } 
  }
  return status;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40020008 	.word	0x40020008
 8000e54:	4002001c 	.word	0x4002001c
 8000e58:	40020030 	.word	0x40020030
 8000e5c:	40020044 	.word	0x40020044
 8000e60:	40020058 	.word	0x40020058
 8000e64:	4002006c 	.word	0x4002006c
 8000e68:	40020000 	.word	0x40020000

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b08b      	sub	sp, #44	; 0x2c
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7e:	e161      	b.n	8001144 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e80:	2201      	movs	r2, #1
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 8150 	bne.w	800113e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	4a97      	ldr	r2, [pc, #604]	; (8001100 <HAL_GPIO_Init+0x294>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d05e      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
 8000ea8:	4a95      	ldr	r2, [pc, #596]	; (8001100 <HAL_GPIO_Init+0x294>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d875      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000eae:	4a95      	ldr	r2, [pc, #596]	; (8001104 <HAL_GPIO_Init+0x298>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d058      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
 8000eb4:	4a93      	ldr	r2, [pc, #588]	; (8001104 <HAL_GPIO_Init+0x298>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d86f      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000eba:	4a93      	ldr	r2, [pc, #588]	; (8001108 <HAL_GPIO_Init+0x29c>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d052      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
 8000ec0:	4a91      	ldr	r2, [pc, #580]	; (8001108 <HAL_GPIO_Init+0x29c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d869      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000ec6:	4a91      	ldr	r2, [pc, #580]	; (800110c <HAL_GPIO_Init+0x2a0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d04c      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
 8000ecc:	4a8f      	ldr	r2, [pc, #572]	; (800110c <HAL_GPIO_Init+0x2a0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d863      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000ed2:	4a8f      	ldr	r2, [pc, #572]	; (8001110 <HAL_GPIO_Init+0x2a4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d046      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
 8000ed8:	4a8d      	ldr	r2, [pc, #564]	; (8001110 <HAL_GPIO_Init+0x2a4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d85d      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000ede:	2b12      	cmp	r3, #18
 8000ee0:	d82a      	bhi.n	8000f38 <HAL_GPIO_Init+0xcc>
 8000ee2:	2b12      	cmp	r3, #18
 8000ee4:	d859      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000ee6:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <HAL_GPIO_Init+0x80>)
 8000ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eec:	08000f67 	.word	0x08000f67
 8000ef0:	08000f41 	.word	0x08000f41
 8000ef4:	08000f53 	.word	0x08000f53
 8000ef8:	08000f95 	.word	0x08000f95
 8000efc:	08000f9b 	.word	0x08000f9b
 8000f00:	08000f9b 	.word	0x08000f9b
 8000f04:	08000f9b 	.word	0x08000f9b
 8000f08:	08000f9b 	.word	0x08000f9b
 8000f0c:	08000f9b 	.word	0x08000f9b
 8000f10:	08000f9b 	.word	0x08000f9b
 8000f14:	08000f9b 	.word	0x08000f9b
 8000f18:	08000f9b 	.word	0x08000f9b
 8000f1c:	08000f9b 	.word	0x08000f9b
 8000f20:	08000f9b 	.word	0x08000f9b
 8000f24:	08000f9b 	.word	0x08000f9b
 8000f28:	08000f9b 	.word	0x08000f9b
 8000f2c:	08000f9b 	.word	0x08000f9b
 8000f30:	08000f49 	.word	0x08000f49
 8000f34:	08000f5d 	.word	0x08000f5d
 8000f38:	4a76      	ldr	r2, [pc, #472]	; (8001114 <HAL_GPIO_Init+0x2a8>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d013      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f3e:	e02c      	b.n	8000f9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	623b      	str	r3, [r7, #32]
          break;
 8000f46:	e029      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	623b      	str	r3, [r7, #32]
          break;
 8000f50:	e024      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	3308      	adds	r3, #8
 8000f58:	623b      	str	r3, [r7, #32]
          break;
 8000f5a:	e01f      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	330c      	adds	r3, #12
 8000f62:	623b      	str	r3, [r7, #32]
          break;
 8000f64:	e01a      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d102      	bne.n	8000f74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	623b      	str	r3, [r7, #32]
          break;
 8000f72:	e013      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d105      	bne.n	8000f88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	611a      	str	r2, [r3, #16]
          break;
 8000f86:	e009      	b.n	8000f9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f88:	2308      	movs	r3, #8
 8000f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	615a      	str	r2, [r3, #20]
          break;
 8000f92:	e003      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
          break;
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          break;
 8000f9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	2bff      	cmp	r3, #255	; 0xff
 8000fa0:	d801      	bhi.n	8000fa6 <HAL_GPIO_Init+0x13a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	e001      	b.n	8000faa <HAL_GPIO_Init+0x13e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	2bff      	cmp	r3, #255	; 0xff
 8000fb0:	d802      	bhi.n	8000fb8 <HAL_GPIO_Init+0x14c>
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	e002      	b.n	8000fbe <HAL_GPIO_Init+0x152>
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	3b08      	subs	r3, #8
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	6a39      	ldr	r1, [r7, #32]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 80a9 	beq.w	800113e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fec:	4b4a      	ldr	r3, [pc, #296]	; (8001118 <HAL_GPIO_Init+0x2ac>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a49      	ldr	r2, [pc, #292]	; (8001118 <HAL_GPIO_Init+0x2ac>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b47      	ldr	r3, [pc, #284]	; (8001118 <HAL_GPIO_Init+0x2ac>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001004:	4a45      	ldr	r2, [pc, #276]	; (800111c <HAL_GPIO_Init+0x2b0>)
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001010:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	220f      	movs	r2, #15
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4013      	ands	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a3d      	ldr	r2, [pc, #244]	; (8001120 <HAL_GPIO_Init+0x2b4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d00d      	beq.n	800104c <HAL_GPIO_Init+0x1e0>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a3c      	ldr	r2, [pc, #240]	; (8001124 <HAL_GPIO_Init+0x2b8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d007      	beq.n	8001048 <HAL_GPIO_Init+0x1dc>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a3b      	ldr	r2, [pc, #236]	; (8001128 <HAL_GPIO_Init+0x2bc>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d101      	bne.n	8001044 <HAL_GPIO_Init+0x1d8>
 8001040:	2302      	movs	r3, #2
 8001042:	e004      	b.n	800104e <HAL_GPIO_Init+0x1e2>
 8001044:	2303      	movs	r3, #3
 8001046:	e002      	b.n	800104e <HAL_GPIO_Init+0x1e2>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <HAL_GPIO_Init+0x1e2>
 800104c:	2300      	movs	r3, #0
 800104e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001050:	f002 0203 	and.w	r2, r2, #3
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	4093      	lsls	r3, r2
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800105e:	492f      	ldr	r1, [pc, #188]	; (800111c <HAL_GPIO_Init+0x2b0>)
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d006      	beq.n	8001086 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001078:	4b2c      	ldr	r3, [pc, #176]	; (800112c <HAL_GPIO_Init+0x2c0>)
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	492b      	ldr	r1, [pc, #172]	; (800112c <HAL_GPIO_Init+0x2c0>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	608b      	str	r3, [r1, #8]
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001086:	4b29      	ldr	r3, [pc, #164]	; (800112c <HAL_GPIO_Init+0x2c0>)
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	43db      	mvns	r3, r3
 800108e:	4927      	ldr	r1, [pc, #156]	; (800112c <HAL_GPIO_Init+0x2c0>)
 8001090:	4013      	ands	r3, r2
 8001092:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d006      	beq.n	80010ae <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <HAL_GPIO_Init+0x2c0>)
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	4921      	ldr	r1, [pc, #132]	; (800112c <HAL_GPIO_Init+0x2c0>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	60cb      	str	r3, [r1, #12]
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010ae:	4b1f      	ldr	r3, [pc, #124]	; (800112c <HAL_GPIO_Init+0x2c0>)
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	491d      	ldr	r1, [pc, #116]	; (800112c <HAL_GPIO_Init+0x2c0>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d006      	beq.n	80010d6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_GPIO_Init+0x2c0>)
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	4917      	ldr	r1, [pc, #92]	; (800112c <HAL_GPIO_Init+0x2c0>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	604b      	str	r3, [r1, #4]
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_GPIO_Init+0x2c0>)
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	43db      	mvns	r3, r3
 80010de:	4913      	ldr	r1, [pc, #76]	; (800112c <HAL_GPIO_Init+0x2c0>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d01f      	beq.n	8001130 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_GPIO_Init+0x2c0>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	490d      	ldr	r1, [pc, #52]	; (800112c <HAL_GPIO_Init+0x2c0>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	600b      	str	r3, [r1, #0]
 80010fc:	e01f      	b.n	800113e <HAL_GPIO_Init+0x2d2>
 80010fe:	bf00      	nop
 8001100:	10320000 	.word	0x10320000
 8001104:	10310000 	.word	0x10310000
 8001108:	10220000 	.word	0x10220000
 800110c:	10210000 	.word	0x10210000
 8001110:	10120000 	.word	0x10120000
 8001114:	10110000 	.word	0x10110000
 8001118:	40021000 	.word	0x40021000
 800111c:	40010000 	.word	0x40010000
 8001120:	40010800 	.word	0x40010800
 8001124:	40010c00 	.word	0x40010c00
 8001128:	40011000 	.word	0x40011000
 800112c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_GPIO_Init+0x2f4>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	43db      	mvns	r3, r3
 8001138:	4909      	ldr	r1, [pc, #36]	; (8001160 <HAL_GPIO_Init+0x2f4>)
 800113a:	4013      	ands	r3, r2
 800113c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	3301      	adds	r3, #1
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	fa22 f303 	lsr.w	r3, r2, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	f47f ae96 	bne.w	8000e80 <HAL_GPIO_Init+0x14>
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	372c      	adds	r7, #44	; 0x2c
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	40010400 	.word	0x40010400

08001164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e272      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8087 	beq.w	8001292 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001184:	4b92      	ldr	r3, [pc, #584]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 030c 	and.w	r3, r3, #12
 800118c:	2b04      	cmp	r3, #4
 800118e:	d00c      	beq.n	80011aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001190:	4b8f      	ldr	r3, [pc, #572]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	2b08      	cmp	r3, #8
 800119a:	d112      	bne.n	80011c2 <HAL_RCC_OscConfig+0x5e>
 800119c:	4b8c      	ldr	r3, [pc, #560]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a8:	d10b      	bne.n	80011c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011aa:	4b89      	ldr	r3, [pc, #548]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d06c      	beq.n	8001290 <HAL_RCC_OscConfig+0x12c>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d168      	bne.n	8001290 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e24c      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x76>
 80011cc:	4b80      	ldr	r3, [pc, #512]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a7f      	ldr	r2, [pc, #508]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	e02e      	b.n	8001238 <HAL_RCC_OscConfig+0xd4>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x98>
 80011e2:	4b7b      	ldr	r3, [pc, #492]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a7a      	ldr	r2, [pc, #488]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a77      	ldr	r2, [pc, #476]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e01d      	b.n	8001238 <HAL_RCC_OscConfig+0xd4>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0xbc>
 8001206:	4b72      	ldr	r3, [pc, #456]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a71      	ldr	r2, [pc, #452]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800120c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a6e      	ldr	r2, [pc, #440]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e00b      	b.n	8001238 <HAL_RCC_OscConfig+0xd4>
 8001220:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a6a      	ldr	r2, [pc, #424]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a67      	ldr	r2, [pc, #412]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001236:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d013      	beq.n	8001268 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff fc26 	bl	8000a90 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fc22 	bl	8000a90 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e200      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125a:	4b5d      	ldr	r3, [pc, #372]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f0      	beq.n	8001248 <HAL_RCC_OscConfig+0xe4>
 8001266:	e014      	b.n	8001292 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fc12 	bl	8000a90 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fc0e 	bl	8000a90 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e1ec      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x10c>
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d063      	beq.n	8001366 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00b      	beq.n	80012c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012aa:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d11c      	bne.n	80012f0 <HAL_RCC_OscConfig+0x18c>
 80012b6:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d116      	bne.n	80012f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c2:	4b43      	ldr	r3, [pc, #268]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <HAL_RCC_OscConfig+0x176>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d001      	beq.n	80012da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e1c0      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012da:	4b3d      	ldr	r3, [pc, #244]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4939      	ldr	r1, [pc, #228]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ee:	e03a      	b.n	8001366 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d020      	beq.n	800133a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f8:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fe:	f7ff fbc7 	bl	8000a90 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff fbc3 	bl	8000a90 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e1a1      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001318:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4927      	ldr	r1, [pc, #156]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
 8001338:	e015      	b.n	8001366 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fba6 	bl	8000a90 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001348:	f7ff fba2 	bl	8000a90 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e180      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d03a      	beq.n	80013e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d019      	beq.n	80013ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_RCC_OscConfig+0x274>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001380:	f7ff fb86 	bl	8000a90 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001388:	f7ff fb82 	bl	8000a90 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e160      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f000 face 	bl	8001948 <RCC_Delay>
 80013ac:	e01c      	b.n	80013e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_RCC_OscConfig+0x274>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b4:	f7ff fb6c 	bl	8000a90 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ba:	e00f      	b.n	80013dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013bc:	f7ff fb68 	bl	8000a90 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d908      	bls.n	80013dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e146      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
 80013d4:	42420000 	.word	0x42420000
 80013d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	4b92      	ldr	r3, [pc, #584]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e9      	bne.n	80013bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80a6 	beq.w	8001542 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013fa:	4b8b      	ldr	r3, [pc, #556]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10d      	bne.n	8001422 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	4b88      	ldr	r3, [pc, #544]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a87      	ldr	r2, [pc, #540]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b85      	ldr	r3, [pc, #532]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141e:	2301      	movs	r3, #1
 8001420:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b82      	ldr	r3, [pc, #520]	; (800162c <HAL_RCC_OscConfig+0x4c8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d118      	bne.n	8001460 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142e:	4b7f      	ldr	r3, [pc, #508]	; (800162c <HAL_RCC_OscConfig+0x4c8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a7e      	ldr	r2, [pc, #504]	; (800162c <HAL_RCC_OscConfig+0x4c8>)
 8001434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143a:	f7ff fb29 	bl	8000a90 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001442:	f7ff fb25 	bl	8000a90 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b64      	cmp	r3, #100	; 0x64
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e103      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	4b75      	ldr	r3, [pc, #468]	; (800162c <HAL_RCC_OscConfig+0x4c8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x312>
 8001468:	4b6f      	ldr	r3, [pc, #444]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4a6e      	ldr	r2, [pc, #440]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6213      	str	r3, [r2, #32]
 8001474:	e02d      	b.n	80014d2 <HAL_RCC_OscConfig+0x36e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x334>
 800147e:	4b6a      	ldr	r3, [pc, #424]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4a69      	ldr	r2, [pc, #420]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6213      	str	r3, [r2, #32]
 800148a:	4b67      	ldr	r3, [pc, #412]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a66      	ldr	r2, [pc, #408]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	f023 0304 	bic.w	r3, r3, #4
 8001494:	6213      	str	r3, [r2, #32]
 8001496:	e01c      	b.n	80014d2 <HAL_RCC_OscConfig+0x36e>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b05      	cmp	r3, #5
 800149e:	d10c      	bne.n	80014ba <HAL_RCC_OscConfig+0x356>
 80014a0:	4b61      	ldr	r3, [pc, #388]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4a60      	ldr	r2, [pc, #384]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	6213      	str	r3, [r2, #32]
 80014ac:	4b5e      	ldr	r3, [pc, #376]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	e00b      	b.n	80014d2 <HAL_RCC_OscConfig+0x36e>
 80014ba:	4b5b      	ldr	r3, [pc, #364]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	4a5a      	ldr	r2, [pc, #360]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	6213      	str	r3, [r2, #32]
 80014c6:	4b58      	ldr	r3, [pc, #352]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	4a57      	ldr	r2, [pc, #348]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	f023 0304 	bic.w	r3, r3, #4
 80014d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d015      	beq.n	8001506 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff fad9 	bl	8000a90 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e0:	e00a      	b.n	80014f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e2:	f7ff fad5 	bl	8000a90 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e0b1      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f8:	4b4b      	ldr	r3, [pc, #300]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0ee      	beq.n	80014e2 <HAL_RCC_OscConfig+0x37e>
 8001504:	e014      	b.n	8001530 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff fac3 	bl	8000a90 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150c:	e00a      	b.n	8001524 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150e:	f7ff fabf 	bl	8000a90 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f241 3288 	movw	r2, #5000	; 0x1388
 800151c:	4293      	cmp	r3, r2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e09b      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001524:	4b40      	ldr	r3, [pc, #256]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1ee      	bne.n	800150e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001530:	7dfb      	ldrb	r3, [r7, #23]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d105      	bne.n	8001542 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001536:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a3b      	ldr	r2, [pc, #236]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 800153c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001540:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8087 	beq.w	800165a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800154c:	4b36      	ldr	r3, [pc, #216]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b08      	cmp	r3, #8
 8001556:	d061      	beq.n	800161c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d146      	bne.n	80015ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001560:	4b33      	ldr	r3, [pc, #204]	; (8001630 <HAL_RCC_OscConfig+0x4cc>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff fa93 	bl	8000a90 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156e:	f7ff fa8f 	bl	8000a90 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e06d      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001580:	4b29      	ldr	r3, [pc, #164]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f0      	bne.n	800156e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001594:	d108      	bne.n	80015a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001596:	4b24      	ldr	r3, [pc, #144]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	4921      	ldr	r1, [pc, #132]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a8:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a19      	ldr	r1, [r3, #32]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	430b      	orrs	r3, r1
 80015ba:	491b      	ldr	r1, [pc, #108]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_RCC_OscConfig+0x4cc>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fa63 	bl	8000a90 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff fa5f 	bl	8000a90 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e03d      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x46a>
 80015ec:	e035      	b.n	800165a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_RCC_OscConfig+0x4cc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fa4c 	bl	8000a90 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff fa48 	bl	8000a90 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e026      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x498>
 800161a:	e01e      	b.n	800165a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d107      	bne.n	8001634 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e019      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
 8001628:	40021000 	.word	0x40021000
 800162c:	40007000 	.word	0x40007000
 8001630:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCC_OscConfig+0x500>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	429a      	cmp	r2, r3
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000

08001668 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0d0      	b.n	800181e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800167c:	4b6a      	ldr	r3, [pc, #424]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d910      	bls.n	80016ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b67      	ldr	r3, [pc, #412]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 0207 	bic.w	r2, r3, #7
 8001692:	4965      	ldr	r1, [pc, #404]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169a:	4b63      	ldr	r3, [pc, #396]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0b8      	b.n	800181e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d020      	beq.n	80016fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c4:	4b59      	ldr	r3, [pc, #356]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4a58      	ldr	r2, [pc, #352]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80016ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016dc:	4b53      	ldr	r3, [pc, #332]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a52      	ldr	r2, [pc, #328]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e8:	4b50      	ldr	r3, [pc, #320]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	494d      	ldr	r1, [pc, #308]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d040      	beq.n	8001788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d107      	bne.n	800171e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d115      	bne.n	8001746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e07f      	b.n	800181e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001726:	4b41      	ldr	r3, [pc, #260]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e073      	b.n	800181e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001736:	4b3d      	ldr	r3, [pc, #244]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e06b      	b.n	800181e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001746:	4b39      	ldr	r3, [pc, #228]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f023 0203 	bic.w	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4936      	ldr	r1, [pc, #216]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001758:	f7ff f99a 	bl	8000a90 <HAL_GetTick>
 800175c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175e:	e00a      	b.n	8001776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001760:	f7ff f996 	bl	8000a90 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	; 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e053      	b.n	800181e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 020c 	and.w	r2, r3, #12
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	429a      	cmp	r2, r3
 8001786:	d1eb      	bne.n	8001760 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d210      	bcs.n	80017b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 0207 	bic.w	r2, r3, #7
 800179e:	4922      	ldr	r1, [pc, #136]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e032      	b.n	800181e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4916      	ldr	r1, [pc, #88]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d009      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	490e      	ldr	r1, [pc, #56]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017f6:	f000 f821 	bl	800183c <HAL_RCC_GetSysClockFreq>
 80017fa:	4602      	mov	r2, r0
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	490a      	ldr	r1, [pc, #40]	; (8001830 <HAL_RCC_ClockConfig+0x1c8>)
 8001808:	5ccb      	ldrb	r3, [r1, r3]
 800180a:	fa22 f303 	lsr.w	r3, r2, r3
 800180e:	4a09      	ldr	r2, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1cc>)
 8001810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_RCC_ClockConfig+0x1d0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff f8f8 	bl	8000a0c <HAL_InitTick>

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40022000 	.word	0x40022000
 800182c:	40021000 	.word	0x40021000
 8001830:	08003330 	.word	0x08003330
 8001834:	20000000 	.word	0x20000000
 8001838:	20000004 	.word	0x20000004

0800183c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b04      	cmp	r3, #4
 8001864:	d002      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x30>
 8001866:	2b08      	cmp	r3, #8
 8001868:	d003      	beq.n	8001872 <HAL_RCC_GetSysClockFreq+0x36>
 800186a:	e027      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800186e:	613b      	str	r3, [r7, #16]
      break;
 8001870:	e027      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	0c9b      	lsrs	r3, r3, #18
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800187c:	5cd3      	ldrb	r3, [r2, r3]
 800187e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d010      	beq.n	80018ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	0c5b      	lsrs	r3, r3, #17
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	4a11      	ldr	r2, [pc, #68]	; (80018dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001896:	5cd3      	ldrb	r3, [r2, r3]
 8001898:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800189e:	fb03 f202 	mul.w	r2, r3, r2
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	e004      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a0c      	ldr	r2, [pc, #48]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	613b      	str	r3, [r7, #16]
      break;
 80018ba:	e002      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80018be:	613b      	str	r3, [r7, #16]
      break;
 80018c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018c2:	693b      	ldr	r3, [r7, #16]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	371c      	adds	r7, #28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	007a1200 	.word	0x007a1200
 80018d8:	08003348 	.word	0x08003348
 80018dc:	08003358 	.word	0x08003358
 80018e0:	003d0900 	.word	0x003d0900

080018e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e8:	4b02      	ldr	r3, [pc, #8]	; (80018f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	20000000 	.word	0x20000000

080018f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018fc:	f7ff fff2 	bl	80018e4 <HAL_RCC_GetHCLKFreq>
 8001900:	4602      	mov	r2, r0
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	0a1b      	lsrs	r3, r3, #8
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	4903      	ldr	r1, [pc, #12]	; (800191c <HAL_RCC_GetPCLK1Freq+0x24>)
 800190e:	5ccb      	ldrb	r3, [r1, r3]
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001914:	4618      	mov	r0, r3
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000
 800191c:	08003340 	.word	0x08003340

08001920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001924:	f7ff ffde 	bl	80018e4 <HAL_RCC_GetHCLKFreq>
 8001928:	4602      	mov	r2, r0
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	0adb      	lsrs	r3, r3, #11
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	4903      	ldr	r1, [pc, #12]	; (8001944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001936:	5ccb      	ldrb	r3, [r1, r3]
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800193c:	4618      	mov	r0, r3
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000
 8001944:	08003340 	.word	0x08003340

08001948 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <RCC_Delay+0x34>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <RCC_Delay+0x38>)
 8001956:	fba2 2303 	umull	r2, r3, r2, r3
 800195a:	0a5b      	lsrs	r3, r3, #9
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	fb02 f303 	mul.w	r3, r2, r3
 8001962:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001964:	bf00      	nop
  }
  while (Delay --);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1e5a      	subs	r2, r3, #1
 800196a:	60fa      	str	r2, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f9      	bne.n	8001964 <RCC_Delay+0x1c>
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	20000000 	.word	0x20000000
 8001980:	10624dd3 	.word	0x10624dd3

08001984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e042      	b.n	8001a1c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d106      	bne.n	80019b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7fe fef0 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2224      	movs	r2, #36	; 0x24
 80019b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 fec1 	bl	8002750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695a      	ldr	r2, [r3, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2220      	movs	r2, #32
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e04a      	b.n	8001acc <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d106      	bne.n	8001a50 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7fe fea0 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2224      	movs	r2, #36	; 0x24
 8001a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 fe71 	bl	8002750 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001a8c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0208 	orr.w	r2, r2, #8
 8001a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	d16d      	bne.n	8001bd0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <HAL_UART_Transmit+0x2c>
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e066      	b.n	8001bd2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2221      	movs	r2, #33	; 0x21
 8001b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b12:	f7fe ffbd 	bl	8000a90 <HAL_GetTick>
 8001b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	88fa      	ldrh	r2, [r7, #6]
 8001b1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	88fa      	ldrh	r2, [r7, #6]
 8001b22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b2c:	d108      	bne.n	8001b40 <HAL_UART_Transmit+0x6c>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d104      	bne.n	8001b40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	e003      	b.n	8001b48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b48:	e02a      	b.n	8001ba0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2200      	movs	r2, #0
 8001b52:	2180      	movs	r1, #128	; 0x80
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 fbf1 	bl	800233c <UART_WaitOnFlagUntilTimeout>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e036      	b.n	8001bd2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10b      	bne.n	8001b82 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	e007      	b.n	8001b92 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	781a      	ldrb	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1cf      	bne.n	8001b4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2140      	movs	r1, #64	; 0x40
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fbc1 	bl	800233c <UART_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e006      	b.n	8001bd2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e000      	b.n	8001bd2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001bd0:	2302      	movs	r3, #2
  }
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b08a      	sub	sp, #40	; 0x28
 8001bde:	af02      	add	r7, sp, #8
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4613      	mov	r3, r2
 8001be8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	d17c      	bne.n	8001cf4 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_UART_Receive+0x2c>
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e075      	b.n	8001cf6 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2222      	movs	r2, #34	; 0x22
 8001c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c1e:	f7fe ff37 	bl	8000a90 <HAL_GetTick>
 8001c22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	88fa      	ldrh	r2, [r7, #6]
 8001c28:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	88fa      	ldrh	r2, [r7, #6]
 8001c2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c38:	d108      	bne.n	8001c4c <HAL_UART_Receive+0x72>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d104      	bne.n	8001c4c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	e003      	b.n	8001c54 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001c54:	e043      	b.n	8001cde <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2120      	movs	r1, #32
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 fb6b 	bl	800233c <UART_WaitOnFlagUntilTimeout>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e042      	b.n	8001cf6 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10c      	bne.n	8001c90 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	e01f      	b.n	8001cd0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c98:	d007      	beq.n	8001caa <HAL_UART_Receive+0xd0>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10a      	bne.n	8001cb8 <HAL_UART_Receive+0xde>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	e008      	b.n	8001cca <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1b6      	bne.n	8001c56 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e000      	b.n	8001cf6 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001cf4:	2302      	movs	r3, #2
  }
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3720      	adds	r7, #32
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0ba      	sub	sp, #232	; 0xe8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001d3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10f      	bne.n	8001d66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <HAL_UART_IRQHandler+0x66>
 8001d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d56:	f003 0320 	and.w	r3, r3, #32
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fc37 	bl	80025d2 <UART_Receive_IT>
      return;
 8001d64:	e25b      	b.n	800221e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80de 	beq.w	8001f2c <HAL_UART_IRQHandler+0x22c>
 8001d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d106      	bne.n	8001d8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80d1 	beq.w	8001f2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_UART_IRQHandler+0xae>
 8001d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_UART_IRQHandler+0xd2>
 8001dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f043 0202 	orr.w	r2, r3, #2
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_UART_IRQHandler+0xf6>
 8001dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f043 0204 	orr.w	r2, r3, #4
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d011      	beq.n	8001e26 <HAL_UART_IRQHandler+0x126>
 8001e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e06:	f003 0320 	and.w	r3, r3, #32
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d105      	bne.n	8001e1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f043 0208 	orr.w	r2, r3, #8
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 81f2 	beq.w	8002214 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <HAL_UART_IRQHandler+0x14e>
 8001e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fbc2 	bl	80025d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d103      	bne.n	8001e7a <HAL_UART_IRQHandler+0x17a>
 8001e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d04f      	beq.n	8001f1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 facc 	bl	8002418 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d041      	beq.n	8001f12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3314      	adds	r3, #20
 8001e94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e9c:	e853 3f00 	ldrex	r3, [r3]
 8001ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3314      	adds	r3, #20
 8001eb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001eba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ec2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001ec6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001eca:	e841 2300 	strex	r3, r2, [r1]
 8001ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1d9      	bne.n	8001e8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d013      	beq.n	8001f0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee6:	4a7e      	ldr	r2, [pc, #504]	; (80020e0 <HAL_UART_IRQHandler+0x3e0>)
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe ff44 	bl	8000d7c <HAL_DMA_Abort_IT>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d016      	beq.n	8001f28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f04:	4610      	mov	r0, r2
 8001f06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f08:	e00e      	b.n	8001f28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f99c 	bl	8002248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f10:	e00a      	b.n	8001f28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f998 	bl	8002248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f18:	e006      	b.n	8001f28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f994 	bl	8002248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001f26:	e175      	b.n	8002214 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f28:	bf00      	nop
    return;
 8001f2a:	e173      	b.n	8002214 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	f040 814f 	bne.w	80021d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8148 	beq.w	80021d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 8141 	beq.w	80021d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 80b6 	beq.w	80020e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 8145 	beq.w	8002218 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001f96:	429a      	cmp	r2, r3
 8001f98:	f080 813e 	bcs.w	8002218 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fa2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	f000 8088 	beq.w	80020c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	330c      	adds	r3, #12
 8001fb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fbe:	e853 3f00 	ldrex	r3, [r3]
 8001fc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001fc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	330c      	adds	r3, #12
 8001fd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001fdc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001fe0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001fe8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fec:	e841 2300 	strex	r3, r2, [r1]
 8001ff0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1d9      	bne.n	8001fb0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3314      	adds	r3, #20
 8002002:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002006:	e853 3f00 	ldrex	r3, [r3]
 800200a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800200c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3314      	adds	r3, #20
 800201c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002020:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002024:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002026:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002028:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800202c:	e841 2300 	strex	r3, r2, [r1]
 8002030:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1e1      	bne.n	8001ffc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3314      	adds	r3, #20
 800203e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002040:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002042:	e853 3f00 	ldrex	r3, [r3]
 8002046:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800204a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800204e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3314      	adds	r3, #20
 8002058:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800205c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800205e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002060:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002062:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002064:	e841 2300 	strex	r3, r2, [r1]
 8002068:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800206a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e3      	bne.n	8002038 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	330c      	adds	r3, #12
 8002084:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002088:	e853 3f00 	ldrex	r3, [r3]
 800208c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800208e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002090:	f023 0310 	bic.w	r3, r3, #16
 8002094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	330c      	adds	r3, #12
 800209e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80020a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80020a4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020aa:	e841 2300 	strex	r3, r2, [r1]
 80020ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80020b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1e3      	bne.n	800207e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fe23 	bl	8000d06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4619      	mov	r1, r3
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8bf 	bl	800225a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020dc:	e09c      	b.n	8002218 <HAL_UART_IRQHandler+0x518>
 80020de:	bf00      	nop
 80020e0:	080024dd 	.word	0x080024dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 808e 	beq.w	800221c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002100:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 8089 	beq.w	800221c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	330c      	adds	r3, #12
 8002110:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002114:	e853 3f00 	ldrex	r3, [r3]
 8002118:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002120:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	330c      	adds	r3, #12
 800212a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800212e:	647a      	str	r2, [r7, #68]	; 0x44
 8002130:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002132:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002134:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002136:	e841 2300 	strex	r3, r2, [r1]
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800213c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1e3      	bne.n	800210a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3314      	adds	r3, #20
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	e853 3f00 	ldrex	r3, [r3]
 8002150:	623b      	str	r3, [r7, #32]
   return(result);
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	3314      	adds	r3, #20
 8002162:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002166:	633a      	str	r2, [r7, #48]	; 0x30
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800216c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800216e:	e841 2300 	strex	r3, r2, [r1]
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1e3      	bne.n	8002142 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	330c      	adds	r3, #12
 800218e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	e853 3f00 	ldrex	r3, [r3]
 8002196:	60fb      	str	r3, [r7, #12]
   return(result);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0310 	bic.w	r3, r3, #16
 800219e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	330c      	adds	r3, #12
 80021a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80021ac:	61fa      	str	r2, [r7, #28]
 80021ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b0:	69b9      	ldr	r1, [r7, #24]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	e841 2300 	strex	r3, r2, [r1]
 80021b8:	617b      	str	r3, [r7, #20]
   return(result);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e3      	bne.n	8002188 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f844 	bl	800225a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021d2:	e023      	b.n	800221c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d009      	beq.n	80021f4 <HAL_UART_IRQHandler+0x4f4>
 80021e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f989 	bl	8002504 <UART_Transmit_IT>
    return;
 80021f2:	e014      	b.n	800221e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00e      	beq.n	800221e <HAL_UART_IRQHandler+0x51e>
 8002200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f9c8 	bl	80025a2 <UART_EndTransmit_IT>
    return;
 8002212:	e004      	b.n	800221e <HAL_UART_IRQHandler+0x51e>
    return;
 8002214:	bf00      	nop
 8002216:	e002      	b.n	800221e <HAL_UART_IRQHandler+0x51e>
      return;
 8002218:	bf00      	nop
 800221a:	e000      	b.n	800221e <HAL_UART_IRQHandler+0x51e>
      return;
 800221c:	bf00      	nop
  }
}
 800221e:	37e8      	adds	r7, #232	; 0xe8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	460b      	mov	r3, r1
 8002264:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8002286:	2302      	movs	r3, #2
 8002288:	e020      	b.n	80022cc <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2224      	movs	r2, #36	; 0x24
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f023 030c 	bic.w	r3, r3, #12
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_HalfDuplex_EnableReceiver+0x1a>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e020      	b.n	8002332 <HAL_HalfDuplex_EnableReceiver+0x5c>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2224      	movs	r2, #36	; 0x24
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f023 030c 	bic.w	r3, r3, #12
 800230e:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b090      	sub	sp, #64	; 0x40
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	4613      	mov	r3, r2
 800234a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800234c:	e050      	b.n	80023f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d04c      	beq.n	80023f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002358:	2b00      	cmp	r3, #0
 800235a:	d007      	beq.n	800236c <UART_WaitOnFlagUntilTimeout+0x30>
 800235c:	f7fe fb98 	bl	8000a90 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002368:	429a      	cmp	r2, r3
 800236a:	d241      	bcs.n	80023f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	330c      	adds	r3, #12
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002376:	e853 3f00 	ldrex	r3, [r3]
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	330c      	adds	r3, #12
 800238a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800238c:	637a      	str	r2, [r7, #52]	; 0x34
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002394:	e841 2300 	strex	r3, r2, [r1]
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1e5      	bne.n	800236c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	3314      	adds	r3, #20
 80023a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	e853 3f00 	ldrex	r3, [r3]
 80023ae:	613b      	str	r3, [r7, #16]
   return(result);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3314      	adds	r3, #20
 80023be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023c0:	623a      	str	r2, [r7, #32]
 80023c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c4:	69f9      	ldr	r1, [r7, #28]
 80023c6:	6a3a      	ldr	r2, [r7, #32]
 80023c8:	e841 2300 	strex	r3, r2, [r1]
 80023cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1e5      	bne.n	80023a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e00f      	b.n	8002410 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	4013      	ands	r3, r2
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	429a      	cmp	r2, r3
 800240c:	d09f      	beq.n	800234e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3740      	adds	r7, #64	; 0x40
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002418:	b480      	push	{r7}
 800241a:	b095      	sub	sp, #84	; 0x54
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	330c      	adds	r3, #12
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242a:	e853 3f00 	ldrex	r3, [r3]
 800242e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002432:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	330c      	adds	r3, #12
 800243e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002440:	643a      	str	r2, [r7, #64]	; 0x40
 8002442:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002444:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002446:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002448:	e841 2300 	strex	r3, r2, [r1]
 800244c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1e5      	bne.n	8002420 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	3314      	adds	r3, #20
 800245a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	e853 3f00 	ldrex	r3, [r3]
 8002462:	61fb      	str	r3, [r7, #28]
   return(result);
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	64bb      	str	r3, [r7, #72]	; 0x48
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3314      	adds	r3, #20
 8002472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002474:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800247a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800247c:	e841 2300 	strex	r3, r2, [r1]
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e5      	bne.n	8002454 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	2b01      	cmp	r3, #1
 800248e:	d119      	bne.n	80024c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	330c      	adds	r3, #12
 8002496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	e853 3f00 	ldrex	r3, [r3]
 800249e:	60bb      	str	r3, [r7, #8]
   return(result);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f023 0310 	bic.w	r3, r3, #16
 80024a6:	647b      	str	r3, [r7, #68]	; 0x44
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	330c      	adds	r3, #12
 80024ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024b0:	61ba      	str	r2, [r7, #24]
 80024b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b4:	6979      	ldr	r1, [r7, #20]
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	e841 2300 	strex	r3, r2, [r1]
 80024bc:	613b      	str	r3, [r7, #16]
   return(result);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1e5      	bne.n	8002490 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80024d2:	bf00      	nop
 80024d4:	3754      	adds	r7, #84	; 0x54
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff fea6 	bl	8002248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b21      	cmp	r3, #33	; 0x21
 8002516:	d13e      	bne.n	8002596 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002520:	d114      	bne.n	800254c <UART_Transmit_IT+0x48>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d110      	bne.n	800254c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800253e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	1c9a      	adds	r2, r3, #2
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	621a      	str	r2, [r3, #32]
 800254a:	e008      	b.n	800255e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	1c59      	adds	r1, r3, #1
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6211      	str	r1, [r2, #32]
 8002556:	781a      	ldrb	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29b      	uxth	r3, r3
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	4619      	mov	r1, r3
 800256c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002580:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002590:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	e000      	b.n	8002598 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002596:	2302      	movs	r3, #2
  }
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fe2e 	bl	8002224 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b08c      	sub	sp, #48	; 0x30
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b22      	cmp	r3, #34	; 0x22
 80025e4:	f040 80ae 	bne.w	8002744 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f0:	d117      	bne.n	8002622 <UART_Receive_IT+0x50>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d113      	bne.n	8002622 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	b29b      	uxth	r3, r3
 800260c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002610:	b29a      	uxth	r2, r3
 8002612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002614:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	1c9a      	adds	r2, r3, #2
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	; 0x28
 8002620:	e026      	b.n	8002670 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002628:	2300      	movs	r3, #0
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002634:	d007      	beq.n	8002646 <UART_Receive_IT+0x74>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10a      	bne.n	8002654 <UART_Receive_IT+0x82>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	e008      	b.n	8002666 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002660:	b2da      	uxtb	r2, r3
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002674:	b29b      	uxth	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	b29b      	uxth	r3, r3
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	4619      	mov	r1, r3
 800267e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002680:	2b00      	cmp	r3, #0
 8002682:	d15d      	bne.n	8002740 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0220 	bic.w	r2, r2, #32
 8002692:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d135      	bne.n	8002736 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	330c      	adds	r3, #12
 80026d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	e853 3f00 	ldrex	r3, [r3]
 80026de:	613b      	str	r3, [r7, #16]
   return(result);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f023 0310 	bic.w	r3, r3, #16
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	330c      	adds	r3, #12
 80026ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f0:	623a      	str	r2, [r7, #32]
 80026f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f4:	69f9      	ldr	r1, [r7, #28]
 80026f6:	6a3a      	ldr	r2, [r7, #32]
 80026f8:	e841 2300 	strex	r3, r2, [r1]
 80026fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1e5      	bne.n	80026d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b10      	cmp	r3, #16
 8002710:	d10a      	bne.n	8002728 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800272c:	4619      	mov	r1, r3
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff fd93 	bl	800225a <HAL_UARTEx_RxEventCallback>
 8002734:	e002      	b.n	800273c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff fd7d 	bl	8002236 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	e002      	b.n	8002746 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	e000      	b.n	8002746 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002744:	2302      	movs	r3, #2
  }
}
 8002746:	4618      	mov	r0, r3
 8002748:	3730      	adds	r7, #48	; 0x30
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800278a:	f023 030c 	bic.w	r3, r3, #12
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	430b      	orrs	r3, r1
 8002796:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a2c      	ldr	r2, [pc, #176]	; (8002864 <UART_SetConfig+0x114>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d103      	bne.n	80027c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027b8:	f7ff f8b2 	bl	8001920 <HAL_RCC_GetPCLK2Freq>
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	e002      	b.n	80027c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027c0:	f7ff f89a 	bl	80018f8 <HAL_RCC_GetPCLK1Freq>
 80027c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	009a      	lsls	r2, r3, #2
 80027d0:	441a      	add	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027dc:	4a22      	ldr	r2, [pc, #136]	; (8002868 <UART_SetConfig+0x118>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	0119      	lsls	r1, r3, #4
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	009a      	lsls	r2, r3, #2
 80027f0:	441a      	add	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027fc:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <UART_SetConfig+0x118>)
 80027fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	2064      	movs	r0, #100	; 0x64
 8002806:	fb00 f303 	mul.w	r3, r0, r3
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	3332      	adds	r3, #50	; 0x32
 8002810:	4a15      	ldr	r2, [pc, #84]	; (8002868 <UART_SetConfig+0x118>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800281c:	4419      	add	r1, r3
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	009a      	lsls	r2, r3, #2
 8002828:	441a      	add	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	fbb2 f2f3 	udiv	r2, r2, r3
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <UART_SetConfig+0x118>)
 8002836:	fba3 0302 	umull	r0, r3, r3, r2
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	2064      	movs	r0, #100	; 0x64
 800283e:	fb00 f303 	mul.w	r3, r0, r3
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	3332      	adds	r3, #50	; 0x32
 8002848:	4a07      	ldr	r2, [pc, #28]	; (8002868 <UART_SetConfig+0x118>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	f003 020f 	and.w	r2, r3, #15
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	440a      	add	r2, r1
 800285a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40013800 	.word	0x40013800
 8002868:	51eb851f 	.word	0x51eb851f

0800286c <siprintf>:
 800286c:	b40e      	push	{r1, r2, r3}
 800286e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002872:	b500      	push	{lr}
 8002874:	b09c      	sub	sp, #112	; 0x70
 8002876:	ab1d      	add	r3, sp, #116	; 0x74
 8002878:	9002      	str	r0, [sp, #8]
 800287a:	9006      	str	r0, [sp, #24]
 800287c:	9107      	str	r1, [sp, #28]
 800287e:	9104      	str	r1, [sp, #16]
 8002880:	4808      	ldr	r0, [pc, #32]	; (80028a4 <siprintf+0x38>)
 8002882:	4909      	ldr	r1, [pc, #36]	; (80028a8 <siprintf+0x3c>)
 8002884:	f853 2b04 	ldr.w	r2, [r3], #4
 8002888:	9105      	str	r1, [sp, #20]
 800288a:	6800      	ldr	r0, [r0, #0]
 800288c:	a902      	add	r1, sp, #8
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	f000 f99c 	bl	8002bcc <_svfiprintf_r>
 8002894:	2200      	movs	r2, #0
 8002896:	9b02      	ldr	r3, [sp, #8]
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	b01c      	add	sp, #112	; 0x70
 800289c:	f85d eb04 	ldr.w	lr, [sp], #4
 80028a0:	b003      	add	sp, #12
 80028a2:	4770      	bx	lr
 80028a4:	20000058 	.word	0x20000058
 80028a8:	ffff0208 	.word	0xffff0208

080028ac <memset>:
 80028ac:	4603      	mov	r3, r0
 80028ae:	4402      	add	r2, r0
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d100      	bne.n	80028b6 <memset+0xa>
 80028b4:	4770      	bx	lr
 80028b6:	f803 1b01 	strb.w	r1, [r3], #1
 80028ba:	e7f9      	b.n	80028b0 <memset+0x4>

080028bc <__errno>:
 80028bc:	4b01      	ldr	r3, [pc, #4]	; (80028c4 <__errno+0x8>)
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000058 	.word	0x20000058

080028c8 <__libc_init_array>:
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	2600      	movs	r6, #0
 80028cc:	4d0c      	ldr	r5, [pc, #48]	; (8002900 <__libc_init_array+0x38>)
 80028ce:	4c0d      	ldr	r4, [pc, #52]	; (8002904 <__libc_init_array+0x3c>)
 80028d0:	1b64      	subs	r4, r4, r5
 80028d2:	10a4      	asrs	r4, r4, #2
 80028d4:	42a6      	cmp	r6, r4
 80028d6:	d109      	bne.n	80028ec <__libc_init_array+0x24>
 80028d8:	f000 fc7a 	bl	80031d0 <_init>
 80028dc:	2600      	movs	r6, #0
 80028de:	4d0a      	ldr	r5, [pc, #40]	; (8002908 <__libc_init_array+0x40>)
 80028e0:	4c0a      	ldr	r4, [pc, #40]	; (800290c <__libc_init_array+0x44>)
 80028e2:	1b64      	subs	r4, r4, r5
 80028e4:	10a4      	asrs	r4, r4, #2
 80028e6:	42a6      	cmp	r6, r4
 80028e8:	d105      	bne.n	80028f6 <__libc_init_array+0x2e>
 80028ea:	bd70      	pop	{r4, r5, r6, pc}
 80028ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80028f0:	4798      	blx	r3
 80028f2:	3601      	adds	r6, #1
 80028f4:	e7ee      	b.n	80028d4 <__libc_init_array+0xc>
 80028f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028fa:	4798      	blx	r3
 80028fc:	3601      	adds	r6, #1
 80028fe:	e7f2      	b.n	80028e6 <__libc_init_array+0x1e>
 8002900:	08003390 	.word	0x08003390
 8002904:	08003390 	.word	0x08003390
 8002908:	08003390 	.word	0x08003390
 800290c:	08003394 	.word	0x08003394

08002910 <__retarget_lock_acquire_recursive>:
 8002910:	4770      	bx	lr

08002912 <__retarget_lock_release_recursive>:
 8002912:	4770      	bx	lr

08002914 <memcpy>:
 8002914:	440a      	add	r2, r1
 8002916:	4291      	cmp	r1, r2
 8002918:	f100 33ff 	add.w	r3, r0, #4294967295
 800291c:	d100      	bne.n	8002920 <memcpy+0xc>
 800291e:	4770      	bx	lr
 8002920:	b510      	push	{r4, lr}
 8002922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002926:	4291      	cmp	r1, r2
 8002928:	f803 4f01 	strb.w	r4, [r3, #1]!
 800292c:	d1f9      	bne.n	8002922 <memcpy+0xe>
 800292e:	bd10      	pop	{r4, pc}

08002930 <_free_r>:
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	4605      	mov	r5, r0
 8002934:	2900      	cmp	r1, #0
 8002936:	d040      	beq.n	80029ba <_free_r+0x8a>
 8002938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800293c:	1f0c      	subs	r4, r1, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	bfb8      	it	lt
 8002942:	18e4      	addlt	r4, r4, r3
 8002944:	f000 f8dc 	bl	8002b00 <__malloc_lock>
 8002948:	4a1c      	ldr	r2, [pc, #112]	; (80029bc <_free_r+0x8c>)
 800294a:	6813      	ldr	r3, [r2, #0]
 800294c:	b933      	cbnz	r3, 800295c <_free_r+0x2c>
 800294e:	6063      	str	r3, [r4, #4]
 8002950:	6014      	str	r4, [r2, #0]
 8002952:	4628      	mov	r0, r5
 8002954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002958:	f000 b8d8 	b.w	8002b0c <__malloc_unlock>
 800295c:	42a3      	cmp	r3, r4
 800295e:	d908      	bls.n	8002972 <_free_r+0x42>
 8002960:	6820      	ldr	r0, [r4, #0]
 8002962:	1821      	adds	r1, r4, r0
 8002964:	428b      	cmp	r3, r1
 8002966:	bf01      	itttt	eq
 8002968:	6819      	ldreq	r1, [r3, #0]
 800296a:	685b      	ldreq	r3, [r3, #4]
 800296c:	1809      	addeq	r1, r1, r0
 800296e:	6021      	streq	r1, [r4, #0]
 8002970:	e7ed      	b.n	800294e <_free_r+0x1e>
 8002972:	461a      	mov	r2, r3
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	b10b      	cbz	r3, 800297c <_free_r+0x4c>
 8002978:	42a3      	cmp	r3, r4
 800297a:	d9fa      	bls.n	8002972 <_free_r+0x42>
 800297c:	6811      	ldr	r1, [r2, #0]
 800297e:	1850      	adds	r0, r2, r1
 8002980:	42a0      	cmp	r0, r4
 8002982:	d10b      	bne.n	800299c <_free_r+0x6c>
 8002984:	6820      	ldr	r0, [r4, #0]
 8002986:	4401      	add	r1, r0
 8002988:	1850      	adds	r0, r2, r1
 800298a:	4283      	cmp	r3, r0
 800298c:	6011      	str	r1, [r2, #0]
 800298e:	d1e0      	bne.n	8002952 <_free_r+0x22>
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4408      	add	r0, r1
 8002996:	6010      	str	r0, [r2, #0]
 8002998:	6053      	str	r3, [r2, #4]
 800299a:	e7da      	b.n	8002952 <_free_r+0x22>
 800299c:	d902      	bls.n	80029a4 <_free_r+0x74>
 800299e:	230c      	movs	r3, #12
 80029a0:	602b      	str	r3, [r5, #0]
 80029a2:	e7d6      	b.n	8002952 <_free_r+0x22>
 80029a4:	6820      	ldr	r0, [r4, #0]
 80029a6:	1821      	adds	r1, r4, r0
 80029a8:	428b      	cmp	r3, r1
 80029aa:	bf01      	itttt	eq
 80029ac:	6819      	ldreq	r1, [r3, #0]
 80029ae:	685b      	ldreq	r3, [r3, #4]
 80029b0:	1809      	addeq	r1, r1, r0
 80029b2:	6021      	streq	r1, [r4, #0]
 80029b4:	6063      	str	r3, [r4, #4]
 80029b6:	6054      	str	r4, [r2, #4]
 80029b8:	e7cb      	b.n	8002952 <_free_r+0x22>
 80029ba:	bd38      	pop	{r3, r4, r5, pc}
 80029bc:	20000318 	.word	0x20000318

080029c0 <sbrk_aligned>:
 80029c0:	b570      	push	{r4, r5, r6, lr}
 80029c2:	4e0e      	ldr	r6, [pc, #56]	; (80029fc <sbrk_aligned+0x3c>)
 80029c4:	460c      	mov	r4, r1
 80029c6:	6831      	ldr	r1, [r6, #0]
 80029c8:	4605      	mov	r5, r0
 80029ca:	b911      	cbnz	r1, 80029d2 <sbrk_aligned+0x12>
 80029cc:	f000 fbaa 	bl	8003124 <_sbrk_r>
 80029d0:	6030      	str	r0, [r6, #0]
 80029d2:	4621      	mov	r1, r4
 80029d4:	4628      	mov	r0, r5
 80029d6:	f000 fba5 	bl	8003124 <_sbrk_r>
 80029da:	1c43      	adds	r3, r0, #1
 80029dc:	d00a      	beq.n	80029f4 <sbrk_aligned+0x34>
 80029de:	1cc4      	adds	r4, r0, #3
 80029e0:	f024 0403 	bic.w	r4, r4, #3
 80029e4:	42a0      	cmp	r0, r4
 80029e6:	d007      	beq.n	80029f8 <sbrk_aligned+0x38>
 80029e8:	1a21      	subs	r1, r4, r0
 80029ea:	4628      	mov	r0, r5
 80029ec:	f000 fb9a 	bl	8003124 <_sbrk_r>
 80029f0:	3001      	adds	r0, #1
 80029f2:	d101      	bne.n	80029f8 <sbrk_aligned+0x38>
 80029f4:	f04f 34ff 	mov.w	r4, #4294967295
 80029f8:	4620      	mov	r0, r4
 80029fa:	bd70      	pop	{r4, r5, r6, pc}
 80029fc:	2000031c 	.word	0x2000031c

08002a00 <_malloc_r>:
 8002a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a04:	1ccd      	adds	r5, r1, #3
 8002a06:	f025 0503 	bic.w	r5, r5, #3
 8002a0a:	3508      	adds	r5, #8
 8002a0c:	2d0c      	cmp	r5, #12
 8002a0e:	bf38      	it	cc
 8002a10:	250c      	movcc	r5, #12
 8002a12:	2d00      	cmp	r5, #0
 8002a14:	4607      	mov	r7, r0
 8002a16:	db01      	blt.n	8002a1c <_malloc_r+0x1c>
 8002a18:	42a9      	cmp	r1, r5
 8002a1a:	d905      	bls.n	8002a28 <_malloc_r+0x28>
 8002a1c:	230c      	movs	r3, #12
 8002a1e:	2600      	movs	r6, #0
 8002a20:	603b      	str	r3, [r7, #0]
 8002a22:	4630      	mov	r0, r6
 8002a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002afc <_malloc_r+0xfc>
 8002a2c:	f000 f868 	bl	8002b00 <__malloc_lock>
 8002a30:	f8d8 3000 	ldr.w	r3, [r8]
 8002a34:	461c      	mov	r4, r3
 8002a36:	bb5c      	cbnz	r4, 8002a90 <_malloc_r+0x90>
 8002a38:	4629      	mov	r1, r5
 8002a3a:	4638      	mov	r0, r7
 8002a3c:	f7ff ffc0 	bl	80029c0 <sbrk_aligned>
 8002a40:	1c43      	adds	r3, r0, #1
 8002a42:	4604      	mov	r4, r0
 8002a44:	d155      	bne.n	8002af2 <_malloc_r+0xf2>
 8002a46:	f8d8 4000 	ldr.w	r4, [r8]
 8002a4a:	4626      	mov	r6, r4
 8002a4c:	2e00      	cmp	r6, #0
 8002a4e:	d145      	bne.n	8002adc <_malloc_r+0xdc>
 8002a50:	2c00      	cmp	r4, #0
 8002a52:	d048      	beq.n	8002ae6 <_malloc_r+0xe6>
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	4631      	mov	r1, r6
 8002a58:	4638      	mov	r0, r7
 8002a5a:	eb04 0903 	add.w	r9, r4, r3
 8002a5e:	f000 fb61 	bl	8003124 <_sbrk_r>
 8002a62:	4581      	cmp	r9, r0
 8002a64:	d13f      	bne.n	8002ae6 <_malloc_r+0xe6>
 8002a66:	6821      	ldr	r1, [r4, #0]
 8002a68:	4638      	mov	r0, r7
 8002a6a:	1a6d      	subs	r5, r5, r1
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	f7ff ffa7 	bl	80029c0 <sbrk_aligned>
 8002a72:	3001      	adds	r0, #1
 8002a74:	d037      	beq.n	8002ae6 <_malloc_r+0xe6>
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	442b      	add	r3, r5
 8002a7a:	6023      	str	r3, [r4, #0]
 8002a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d038      	beq.n	8002af6 <_malloc_r+0xf6>
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	42a2      	cmp	r2, r4
 8002a88:	d12b      	bne.n	8002ae2 <_malloc_r+0xe2>
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	e00f      	b.n	8002ab0 <_malloc_r+0xb0>
 8002a90:	6822      	ldr	r2, [r4, #0]
 8002a92:	1b52      	subs	r2, r2, r5
 8002a94:	d41f      	bmi.n	8002ad6 <_malloc_r+0xd6>
 8002a96:	2a0b      	cmp	r2, #11
 8002a98:	d917      	bls.n	8002aca <_malloc_r+0xca>
 8002a9a:	1961      	adds	r1, r4, r5
 8002a9c:	42a3      	cmp	r3, r4
 8002a9e:	6025      	str	r5, [r4, #0]
 8002aa0:	bf18      	it	ne
 8002aa2:	6059      	strne	r1, [r3, #4]
 8002aa4:	6863      	ldr	r3, [r4, #4]
 8002aa6:	bf08      	it	eq
 8002aa8:	f8c8 1000 	streq.w	r1, [r8]
 8002aac:	5162      	str	r2, [r4, r5]
 8002aae:	604b      	str	r3, [r1, #4]
 8002ab0:	4638      	mov	r0, r7
 8002ab2:	f104 060b 	add.w	r6, r4, #11
 8002ab6:	f000 f829 	bl	8002b0c <__malloc_unlock>
 8002aba:	f026 0607 	bic.w	r6, r6, #7
 8002abe:	1d23      	adds	r3, r4, #4
 8002ac0:	1af2      	subs	r2, r6, r3
 8002ac2:	d0ae      	beq.n	8002a22 <_malloc_r+0x22>
 8002ac4:	1b9b      	subs	r3, r3, r6
 8002ac6:	50a3      	str	r3, [r4, r2]
 8002ac8:	e7ab      	b.n	8002a22 <_malloc_r+0x22>
 8002aca:	42a3      	cmp	r3, r4
 8002acc:	6862      	ldr	r2, [r4, #4]
 8002ace:	d1dd      	bne.n	8002a8c <_malloc_r+0x8c>
 8002ad0:	f8c8 2000 	str.w	r2, [r8]
 8002ad4:	e7ec      	b.n	8002ab0 <_malloc_r+0xb0>
 8002ad6:	4623      	mov	r3, r4
 8002ad8:	6864      	ldr	r4, [r4, #4]
 8002ada:	e7ac      	b.n	8002a36 <_malloc_r+0x36>
 8002adc:	4634      	mov	r4, r6
 8002ade:	6876      	ldr	r6, [r6, #4]
 8002ae0:	e7b4      	b.n	8002a4c <_malloc_r+0x4c>
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	e7cc      	b.n	8002a80 <_malloc_r+0x80>
 8002ae6:	230c      	movs	r3, #12
 8002ae8:	4638      	mov	r0, r7
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	f000 f80e 	bl	8002b0c <__malloc_unlock>
 8002af0:	e797      	b.n	8002a22 <_malloc_r+0x22>
 8002af2:	6025      	str	r5, [r4, #0]
 8002af4:	e7dc      	b.n	8002ab0 <_malloc_r+0xb0>
 8002af6:	605b      	str	r3, [r3, #4]
 8002af8:	deff      	udf	#255	; 0xff
 8002afa:	bf00      	nop
 8002afc:	20000318 	.word	0x20000318

08002b00 <__malloc_lock>:
 8002b00:	4801      	ldr	r0, [pc, #4]	; (8002b08 <__malloc_lock+0x8>)
 8002b02:	f7ff bf05 	b.w	8002910 <__retarget_lock_acquire_recursive>
 8002b06:	bf00      	nop
 8002b08:	20000314 	.word	0x20000314

08002b0c <__malloc_unlock>:
 8002b0c:	4801      	ldr	r0, [pc, #4]	; (8002b14 <__malloc_unlock+0x8>)
 8002b0e:	f7ff bf00 	b.w	8002912 <__retarget_lock_release_recursive>
 8002b12:	bf00      	nop
 8002b14:	20000314 	.word	0x20000314

08002b18 <__ssputs_r>:
 8002b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b1c:	461f      	mov	r7, r3
 8002b1e:	688e      	ldr	r6, [r1, #8]
 8002b20:	4682      	mov	sl, r0
 8002b22:	42be      	cmp	r6, r7
 8002b24:	460c      	mov	r4, r1
 8002b26:	4690      	mov	r8, r2
 8002b28:	680b      	ldr	r3, [r1, #0]
 8002b2a:	d82c      	bhi.n	8002b86 <__ssputs_r+0x6e>
 8002b2c:	898a      	ldrh	r2, [r1, #12]
 8002b2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b32:	d026      	beq.n	8002b82 <__ssputs_r+0x6a>
 8002b34:	6965      	ldr	r5, [r4, #20]
 8002b36:	6909      	ldr	r1, [r1, #16]
 8002b38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b3c:	eba3 0901 	sub.w	r9, r3, r1
 8002b40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b44:	1c7b      	adds	r3, r7, #1
 8002b46:	444b      	add	r3, r9
 8002b48:	106d      	asrs	r5, r5, #1
 8002b4a:	429d      	cmp	r5, r3
 8002b4c:	bf38      	it	cc
 8002b4e:	461d      	movcc	r5, r3
 8002b50:	0553      	lsls	r3, r2, #21
 8002b52:	d527      	bpl.n	8002ba4 <__ssputs_r+0x8c>
 8002b54:	4629      	mov	r1, r5
 8002b56:	f7ff ff53 	bl	8002a00 <_malloc_r>
 8002b5a:	4606      	mov	r6, r0
 8002b5c:	b360      	cbz	r0, 8002bb8 <__ssputs_r+0xa0>
 8002b5e:	464a      	mov	r2, r9
 8002b60:	6921      	ldr	r1, [r4, #16]
 8002b62:	f7ff fed7 	bl	8002914 <memcpy>
 8002b66:	89a3      	ldrh	r3, [r4, #12]
 8002b68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b70:	81a3      	strh	r3, [r4, #12]
 8002b72:	6126      	str	r6, [r4, #16]
 8002b74:	444e      	add	r6, r9
 8002b76:	6026      	str	r6, [r4, #0]
 8002b78:	463e      	mov	r6, r7
 8002b7a:	6165      	str	r5, [r4, #20]
 8002b7c:	eba5 0509 	sub.w	r5, r5, r9
 8002b80:	60a5      	str	r5, [r4, #8]
 8002b82:	42be      	cmp	r6, r7
 8002b84:	d900      	bls.n	8002b88 <__ssputs_r+0x70>
 8002b86:	463e      	mov	r6, r7
 8002b88:	4632      	mov	r2, r6
 8002b8a:	4641      	mov	r1, r8
 8002b8c:	6820      	ldr	r0, [r4, #0]
 8002b8e:	f000 faaf 	bl	80030f0 <memmove>
 8002b92:	2000      	movs	r0, #0
 8002b94:	68a3      	ldr	r3, [r4, #8]
 8002b96:	1b9b      	subs	r3, r3, r6
 8002b98:	60a3      	str	r3, [r4, #8]
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	4433      	add	r3, r6
 8002b9e:	6023      	str	r3, [r4, #0]
 8002ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ba4:	462a      	mov	r2, r5
 8002ba6:	f000 fadb 	bl	8003160 <_realloc_r>
 8002baa:	4606      	mov	r6, r0
 8002bac:	2800      	cmp	r0, #0
 8002bae:	d1e0      	bne.n	8002b72 <__ssputs_r+0x5a>
 8002bb0:	4650      	mov	r0, sl
 8002bb2:	6921      	ldr	r1, [r4, #16]
 8002bb4:	f7ff febc 	bl	8002930 <_free_r>
 8002bb8:	230c      	movs	r3, #12
 8002bba:	f8ca 3000 	str.w	r3, [sl]
 8002bbe:	89a3      	ldrh	r3, [r4, #12]
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc8:	81a3      	strh	r3, [r4, #12]
 8002bca:	e7e9      	b.n	8002ba0 <__ssputs_r+0x88>

08002bcc <_svfiprintf_r>:
 8002bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd0:	4698      	mov	r8, r3
 8002bd2:	898b      	ldrh	r3, [r1, #12]
 8002bd4:	4607      	mov	r7, r0
 8002bd6:	061b      	lsls	r3, r3, #24
 8002bd8:	460d      	mov	r5, r1
 8002bda:	4614      	mov	r4, r2
 8002bdc:	b09d      	sub	sp, #116	; 0x74
 8002bde:	d50e      	bpl.n	8002bfe <_svfiprintf_r+0x32>
 8002be0:	690b      	ldr	r3, [r1, #16]
 8002be2:	b963      	cbnz	r3, 8002bfe <_svfiprintf_r+0x32>
 8002be4:	2140      	movs	r1, #64	; 0x40
 8002be6:	f7ff ff0b 	bl	8002a00 <_malloc_r>
 8002bea:	6028      	str	r0, [r5, #0]
 8002bec:	6128      	str	r0, [r5, #16]
 8002bee:	b920      	cbnz	r0, 8002bfa <_svfiprintf_r+0x2e>
 8002bf0:	230c      	movs	r3, #12
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf8:	e0d0      	b.n	8002d9c <_svfiprintf_r+0x1d0>
 8002bfa:	2340      	movs	r3, #64	; 0x40
 8002bfc:	616b      	str	r3, [r5, #20]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9309      	str	r3, [sp, #36]	; 0x24
 8002c02:	2320      	movs	r3, #32
 8002c04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c08:	2330      	movs	r3, #48	; 0x30
 8002c0a:	f04f 0901 	mov.w	r9, #1
 8002c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c12:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002db4 <_svfiprintf_r+0x1e8>
 8002c16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c1a:	4623      	mov	r3, r4
 8002c1c:	469a      	mov	sl, r3
 8002c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c22:	b10a      	cbz	r2, 8002c28 <_svfiprintf_r+0x5c>
 8002c24:	2a25      	cmp	r2, #37	; 0x25
 8002c26:	d1f9      	bne.n	8002c1c <_svfiprintf_r+0x50>
 8002c28:	ebba 0b04 	subs.w	fp, sl, r4
 8002c2c:	d00b      	beq.n	8002c46 <_svfiprintf_r+0x7a>
 8002c2e:	465b      	mov	r3, fp
 8002c30:	4622      	mov	r2, r4
 8002c32:	4629      	mov	r1, r5
 8002c34:	4638      	mov	r0, r7
 8002c36:	f7ff ff6f 	bl	8002b18 <__ssputs_r>
 8002c3a:	3001      	adds	r0, #1
 8002c3c:	f000 80a9 	beq.w	8002d92 <_svfiprintf_r+0x1c6>
 8002c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c42:	445a      	add	r2, fp
 8002c44:	9209      	str	r2, [sp, #36]	; 0x24
 8002c46:	f89a 3000 	ldrb.w	r3, [sl]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 80a1 	beq.w	8002d92 <_svfiprintf_r+0x1c6>
 8002c50:	2300      	movs	r3, #0
 8002c52:	f04f 32ff 	mov.w	r2, #4294967295
 8002c56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c5a:	f10a 0a01 	add.w	sl, sl, #1
 8002c5e:	9304      	str	r3, [sp, #16]
 8002c60:	9307      	str	r3, [sp, #28]
 8002c62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c66:	931a      	str	r3, [sp, #104]	; 0x68
 8002c68:	4654      	mov	r4, sl
 8002c6a:	2205      	movs	r2, #5
 8002c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c70:	4850      	ldr	r0, [pc, #320]	; (8002db4 <_svfiprintf_r+0x1e8>)
 8002c72:	f000 fa67 	bl	8003144 <memchr>
 8002c76:	9a04      	ldr	r2, [sp, #16]
 8002c78:	b9d8      	cbnz	r0, 8002cb2 <_svfiprintf_r+0xe6>
 8002c7a:	06d0      	lsls	r0, r2, #27
 8002c7c:	bf44      	itt	mi
 8002c7e:	2320      	movmi	r3, #32
 8002c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c84:	0711      	lsls	r1, r2, #28
 8002c86:	bf44      	itt	mi
 8002c88:	232b      	movmi	r3, #43	; 0x2b
 8002c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8002c92:	2b2a      	cmp	r3, #42	; 0x2a
 8002c94:	d015      	beq.n	8002cc2 <_svfiprintf_r+0xf6>
 8002c96:	4654      	mov	r4, sl
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f04f 0c0a 	mov.w	ip, #10
 8002c9e:	9a07      	ldr	r2, [sp, #28]
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ca6:	3b30      	subs	r3, #48	; 0x30
 8002ca8:	2b09      	cmp	r3, #9
 8002caa:	d94d      	bls.n	8002d48 <_svfiprintf_r+0x17c>
 8002cac:	b1b0      	cbz	r0, 8002cdc <_svfiprintf_r+0x110>
 8002cae:	9207      	str	r2, [sp, #28]
 8002cb0:	e014      	b.n	8002cdc <_svfiprintf_r+0x110>
 8002cb2:	eba0 0308 	sub.w	r3, r0, r8
 8002cb6:	fa09 f303 	lsl.w	r3, r9, r3
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	46a2      	mov	sl, r4
 8002cbe:	9304      	str	r3, [sp, #16]
 8002cc0:	e7d2      	b.n	8002c68 <_svfiprintf_r+0x9c>
 8002cc2:	9b03      	ldr	r3, [sp, #12]
 8002cc4:	1d19      	adds	r1, r3, #4
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	9103      	str	r1, [sp, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bfbb      	ittet	lt
 8002cce:	425b      	neglt	r3, r3
 8002cd0:	f042 0202 	orrlt.w	r2, r2, #2
 8002cd4:	9307      	strge	r3, [sp, #28]
 8002cd6:	9307      	strlt	r3, [sp, #28]
 8002cd8:	bfb8      	it	lt
 8002cda:	9204      	strlt	r2, [sp, #16]
 8002cdc:	7823      	ldrb	r3, [r4, #0]
 8002cde:	2b2e      	cmp	r3, #46	; 0x2e
 8002ce0:	d10c      	bne.n	8002cfc <_svfiprintf_r+0x130>
 8002ce2:	7863      	ldrb	r3, [r4, #1]
 8002ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ce6:	d134      	bne.n	8002d52 <_svfiprintf_r+0x186>
 8002ce8:	9b03      	ldr	r3, [sp, #12]
 8002cea:	3402      	adds	r4, #2
 8002cec:	1d1a      	adds	r2, r3, #4
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	9203      	str	r2, [sp, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bfb8      	it	lt
 8002cf6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002cfa:	9305      	str	r3, [sp, #20]
 8002cfc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002db8 <_svfiprintf_r+0x1ec>
 8002d00:	2203      	movs	r2, #3
 8002d02:	4650      	mov	r0, sl
 8002d04:	7821      	ldrb	r1, [r4, #0]
 8002d06:	f000 fa1d 	bl	8003144 <memchr>
 8002d0a:	b138      	cbz	r0, 8002d1c <_svfiprintf_r+0x150>
 8002d0c:	2240      	movs	r2, #64	; 0x40
 8002d0e:	9b04      	ldr	r3, [sp, #16]
 8002d10:	eba0 000a 	sub.w	r0, r0, sl
 8002d14:	4082      	lsls	r2, r0
 8002d16:	4313      	orrs	r3, r2
 8002d18:	3401      	adds	r4, #1
 8002d1a:	9304      	str	r3, [sp, #16]
 8002d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d20:	2206      	movs	r2, #6
 8002d22:	4826      	ldr	r0, [pc, #152]	; (8002dbc <_svfiprintf_r+0x1f0>)
 8002d24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d28:	f000 fa0c 	bl	8003144 <memchr>
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	d038      	beq.n	8002da2 <_svfiprintf_r+0x1d6>
 8002d30:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <_svfiprintf_r+0x1f4>)
 8002d32:	bb1b      	cbnz	r3, 8002d7c <_svfiprintf_r+0x1b0>
 8002d34:	9b03      	ldr	r3, [sp, #12]
 8002d36:	3307      	adds	r3, #7
 8002d38:	f023 0307 	bic.w	r3, r3, #7
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	9303      	str	r3, [sp, #12]
 8002d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d42:	4433      	add	r3, r6
 8002d44:	9309      	str	r3, [sp, #36]	; 0x24
 8002d46:	e768      	b.n	8002c1a <_svfiprintf_r+0x4e>
 8002d48:	460c      	mov	r4, r1
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d50:	e7a6      	b.n	8002ca0 <_svfiprintf_r+0xd4>
 8002d52:	2300      	movs	r3, #0
 8002d54:	f04f 0c0a 	mov.w	ip, #10
 8002d58:	4619      	mov	r1, r3
 8002d5a:	3401      	adds	r4, #1
 8002d5c:	9305      	str	r3, [sp, #20]
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d64:	3a30      	subs	r2, #48	; 0x30
 8002d66:	2a09      	cmp	r2, #9
 8002d68:	d903      	bls.n	8002d72 <_svfiprintf_r+0x1a6>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0c6      	beq.n	8002cfc <_svfiprintf_r+0x130>
 8002d6e:	9105      	str	r1, [sp, #20]
 8002d70:	e7c4      	b.n	8002cfc <_svfiprintf_r+0x130>
 8002d72:	4604      	mov	r4, r0
 8002d74:	2301      	movs	r3, #1
 8002d76:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d7a:	e7f0      	b.n	8002d5e <_svfiprintf_r+0x192>
 8002d7c:	ab03      	add	r3, sp, #12
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	462a      	mov	r2, r5
 8002d82:	4638      	mov	r0, r7
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <_svfiprintf_r+0x1f8>)
 8002d86:	a904      	add	r1, sp, #16
 8002d88:	f3af 8000 	nop.w
 8002d8c:	1c42      	adds	r2, r0, #1
 8002d8e:	4606      	mov	r6, r0
 8002d90:	d1d6      	bne.n	8002d40 <_svfiprintf_r+0x174>
 8002d92:	89ab      	ldrh	r3, [r5, #12]
 8002d94:	065b      	lsls	r3, r3, #25
 8002d96:	f53f af2d 	bmi.w	8002bf4 <_svfiprintf_r+0x28>
 8002d9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d9c:	b01d      	add	sp, #116	; 0x74
 8002d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002da2:	ab03      	add	r3, sp, #12
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	462a      	mov	r2, r5
 8002da8:	4638      	mov	r0, r7
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <_svfiprintf_r+0x1f8>)
 8002dac:	a904      	add	r1, sp, #16
 8002dae:	f000 f87d 	bl	8002eac <_printf_i>
 8002db2:	e7eb      	b.n	8002d8c <_svfiprintf_r+0x1c0>
 8002db4:	0800335a 	.word	0x0800335a
 8002db8:	08003360 	.word	0x08003360
 8002dbc:	08003364 	.word	0x08003364
 8002dc0:	00000000 	.word	0x00000000
 8002dc4:	08002b19 	.word	0x08002b19

08002dc8 <_printf_common>:
 8002dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dcc:	4616      	mov	r6, r2
 8002dce:	4699      	mov	r9, r3
 8002dd0:	688a      	ldr	r2, [r1, #8]
 8002dd2:	690b      	ldr	r3, [r1, #16]
 8002dd4:	4607      	mov	r7, r0
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	bfb8      	it	lt
 8002dda:	4613      	movlt	r3, r2
 8002ddc:	6033      	str	r3, [r6, #0]
 8002dde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002de2:	460c      	mov	r4, r1
 8002de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002de8:	b10a      	cbz	r2, 8002dee <_printf_common+0x26>
 8002dea:	3301      	adds	r3, #1
 8002dec:	6033      	str	r3, [r6, #0]
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	0699      	lsls	r1, r3, #26
 8002df2:	bf42      	ittt	mi
 8002df4:	6833      	ldrmi	r3, [r6, #0]
 8002df6:	3302      	addmi	r3, #2
 8002df8:	6033      	strmi	r3, [r6, #0]
 8002dfa:	6825      	ldr	r5, [r4, #0]
 8002dfc:	f015 0506 	ands.w	r5, r5, #6
 8002e00:	d106      	bne.n	8002e10 <_printf_common+0x48>
 8002e02:	f104 0a19 	add.w	sl, r4, #25
 8002e06:	68e3      	ldr	r3, [r4, #12]
 8002e08:	6832      	ldr	r2, [r6, #0]
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	42ab      	cmp	r3, r5
 8002e0e:	dc2b      	bgt.n	8002e68 <_printf_common+0xa0>
 8002e10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e14:	1e13      	subs	r3, r2, #0
 8002e16:	6822      	ldr	r2, [r4, #0]
 8002e18:	bf18      	it	ne
 8002e1a:	2301      	movne	r3, #1
 8002e1c:	0692      	lsls	r2, r2, #26
 8002e1e:	d430      	bmi.n	8002e82 <_printf_common+0xba>
 8002e20:	4649      	mov	r1, r9
 8002e22:	4638      	mov	r0, r7
 8002e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e28:	47c0      	blx	r8
 8002e2a:	3001      	adds	r0, #1
 8002e2c:	d023      	beq.n	8002e76 <_printf_common+0xae>
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	6922      	ldr	r2, [r4, #16]
 8002e32:	f003 0306 	and.w	r3, r3, #6
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	bf14      	ite	ne
 8002e3a:	2500      	movne	r5, #0
 8002e3c:	6833      	ldreq	r3, [r6, #0]
 8002e3e:	f04f 0600 	mov.w	r6, #0
 8002e42:	bf08      	it	eq
 8002e44:	68e5      	ldreq	r5, [r4, #12]
 8002e46:	f104 041a 	add.w	r4, r4, #26
 8002e4a:	bf08      	it	eq
 8002e4c:	1aed      	subeq	r5, r5, r3
 8002e4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002e52:	bf08      	it	eq
 8002e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	bfc4      	itt	gt
 8002e5c:	1a9b      	subgt	r3, r3, r2
 8002e5e:	18ed      	addgt	r5, r5, r3
 8002e60:	42b5      	cmp	r5, r6
 8002e62:	d11a      	bne.n	8002e9a <_printf_common+0xd2>
 8002e64:	2000      	movs	r0, #0
 8002e66:	e008      	b.n	8002e7a <_printf_common+0xb2>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	4652      	mov	r2, sl
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	4638      	mov	r0, r7
 8002e70:	47c0      	blx	r8
 8002e72:	3001      	adds	r0, #1
 8002e74:	d103      	bne.n	8002e7e <_printf_common+0xb6>
 8002e76:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e7e:	3501      	adds	r5, #1
 8002e80:	e7c1      	b.n	8002e06 <_printf_common+0x3e>
 8002e82:	2030      	movs	r0, #48	; 0x30
 8002e84:	18e1      	adds	r1, r4, r3
 8002e86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e90:	4422      	add	r2, r4
 8002e92:	3302      	adds	r3, #2
 8002e94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e98:	e7c2      	b.n	8002e20 <_printf_common+0x58>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	4622      	mov	r2, r4
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	4638      	mov	r0, r7
 8002ea2:	47c0      	blx	r8
 8002ea4:	3001      	adds	r0, #1
 8002ea6:	d0e6      	beq.n	8002e76 <_printf_common+0xae>
 8002ea8:	3601      	adds	r6, #1
 8002eaa:	e7d9      	b.n	8002e60 <_printf_common+0x98>

08002eac <_printf_i>:
 8002eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002eb0:	7e0f      	ldrb	r7, [r1, #24]
 8002eb2:	4691      	mov	r9, r2
 8002eb4:	2f78      	cmp	r7, #120	; 0x78
 8002eb6:	4680      	mov	r8, r0
 8002eb8:	460c      	mov	r4, r1
 8002eba:	469a      	mov	sl, r3
 8002ebc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ebe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ec2:	d807      	bhi.n	8002ed4 <_printf_i+0x28>
 8002ec4:	2f62      	cmp	r7, #98	; 0x62
 8002ec6:	d80a      	bhi.n	8002ede <_printf_i+0x32>
 8002ec8:	2f00      	cmp	r7, #0
 8002eca:	f000 80d5 	beq.w	8003078 <_printf_i+0x1cc>
 8002ece:	2f58      	cmp	r7, #88	; 0x58
 8002ed0:	f000 80c1 	beq.w	8003056 <_printf_i+0x1aa>
 8002ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ed8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002edc:	e03a      	b.n	8002f54 <_printf_i+0xa8>
 8002ede:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ee2:	2b15      	cmp	r3, #21
 8002ee4:	d8f6      	bhi.n	8002ed4 <_printf_i+0x28>
 8002ee6:	a101      	add	r1, pc, #4	; (adr r1, 8002eec <_printf_i+0x40>)
 8002ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002eec:	08002f45 	.word	0x08002f45
 8002ef0:	08002f59 	.word	0x08002f59
 8002ef4:	08002ed5 	.word	0x08002ed5
 8002ef8:	08002ed5 	.word	0x08002ed5
 8002efc:	08002ed5 	.word	0x08002ed5
 8002f00:	08002ed5 	.word	0x08002ed5
 8002f04:	08002f59 	.word	0x08002f59
 8002f08:	08002ed5 	.word	0x08002ed5
 8002f0c:	08002ed5 	.word	0x08002ed5
 8002f10:	08002ed5 	.word	0x08002ed5
 8002f14:	08002ed5 	.word	0x08002ed5
 8002f18:	0800305f 	.word	0x0800305f
 8002f1c:	08002f85 	.word	0x08002f85
 8002f20:	08003019 	.word	0x08003019
 8002f24:	08002ed5 	.word	0x08002ed5
 8002f28:	08002ed5 	.word	0x08002ed5
 8002f2c:	08003081 	.word	0x08003081
 8002f30:	08002ed5 	.word	0x08002ed5
 8002f34:	08002f85 	.word	0x08002f85
 8002f38:	08002ed5 	.word	0x08002ed5
 8002f3c:	08002ed5 	.word	0x08002ed5
 8002f40:	08003021 	.word	0x08003021
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	1d1a      	adds	r2, r3, #4
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	602a      	str	r2, [r5, #0]
 8002f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0a0      	b.n	800309a <_printf_i+0x1ee>
 8002f58:	6820      	ldr	r0, [r4, #0]
 8002f5a:	682b      	ldr	r3, [r5, #0]
 8002f5c:	0607      	lsls	r7, r0, #24
 8002f5e:	f103 0104 	add.w	r1, r3, #4
 8002f62:	6029      	str	r1, [r5, #0]
 8002f64:	d501      	bpl.n	8002f6a <_printf_i+0xbe>
 8002f66:	681e      	ldr	r6, [r3, #0]
 8002f68:	e003      	b.n	8002f72 <_printf_i+0xc6>
 8002f6a:	0646      	lsls	r6, r0, #25
 8002f6c:	d5fb      	bpl.n	8002f66 <_printf_i+0xba>
 8002f6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002f72:	2e00      	cmp	r6, #0
 8002f74:	da03      	bge.n	8002f7e <_printf_i+0xd2>
 8002f76:	232d      	movs	r3, #45	; 0x2d
 8002f78:	4276      	negs	r6, r6
 8002f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f7e:	230a      	movs	r3, #10
 8002f80:	4859      	ldr	r0, [pc, #356]	; (80030e8 <_printf_i+0x23c>)
 8002f82:	e012      	b.n	8002faa <_printf_i+0xfe>
 8002f84:	682b      	ldr	r3, [r5, #0]
 8002f86:	6820      	ldr	r0, [r4, #0]
 8002f88:	1d19      	adds	r1, r3, #4
 8002f8a:	6029      	str	r1, [r5, #0]
 8002f8c:	0605      	lsls	r5, r0, #24
 8002f8e:	d501      	bpl.n	8002f94 <_printf_i+0xe8>
 8002f90:	681e      	ldr	r6, [r3, #0]
 8002f92:	e002      	b.n	8002f9a <_printf_i+0xee>
 8002f94:	0641      	lsls	r1, r0, #25
 8002f96:	d5fb      	bpl.n	8002f90 <_printf_i+0xe4>
 8002f98:	881e      	ldrh	r6, [r3, #0]
 8002f9a:	2f6f      	cmp	r7, #111	; 0x6f
 8002f9c:	bf0c      	ite	eq
 8002f9e:	2308      	moveq	r3, #8
 8002fa0:	230a      	movne	r3, #10
 8002fa2:	4851      	ldr	r0, [pc, #324]	; (80030e8 <_printf_i+0x23c>)
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002faa:	6865      	ldr	r5, [r4, #4]
 8002fac:	2d00      	cmp	r5, #0
 8002fae:	bfa8      	it	ge
 8002fb0:	6821      	ldrge	r1, [r4, #0]
 8002fb2:	60a5      	str	r5, [r4, #8]
 8002fb4:	bfa4      	itt	ge
 8002fb6:	f021 0104 	bicge.w	r1, r1, #4
 8002fba:	6021      	strge	r1, [r4, #0]
 8002fbc:	b90e      	cbnz	r6, 8002fc2 <_printf_i+0x116>
 8002fbe:	2d00      	cmp	r5, #0
 8002fc0:	d04b      	beq.n	800305a <_printf_i+0x1ae>
 8002fc2:	4615      	mov	r5, r2
 8002fc4:	fbb6 f1f3 	udiv	r1, r6, r3
 8002fc8:	fb03 6711 	mls	r7, r3, r1, r6
 8002fcc:	5dc7      	ldrb	r7, [r0, r7]
 8002fce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002fd2:	4637      	mov	r7, r6
 8002fd4:	42bb      	cmp	r3, r7
 8002fd6:	460e      	mov	r6, r1
 8002fd8:	d9f4      	bls.n	8002fc4 <_printf_i+0x118>
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d10b      	bne.n	8002ff6 <_printf_i+0x14a>
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	07de      	lsls	r6, r3, #31
 8002fe2:	d508      	bpl.n	8002ff6 <_printf_i+0x14a>
 8002fe4:	6923      	ldr	r3, [r4, #16]
 8002fe6:	6861      	ldr	r1, [r4, #4]
 8002fe8:	4299      	cmp	r1, r3
 8002fea:	bfde      	ittt	le
 8002fec:	2330      	movle	r3, #48	; 0x30
 8002fee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ff2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ff6:	1b52      	subs	r2, r2, r5
 8002ff8:	6122      	str	r2, [r4, #16]
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	4640      	mov	r0, r8
 8003000:	f8cd a000 	str.w	sl, [sp]
 8003004:	aa03      	add	r2, sp, #12
 8003006:	f7ff fedf 	bl	8002dc8 <_printf_common>
 800300a:	3001      	adds	r0, #1
 800300c:	d14a      	bne.n	80030a4 <_printf_i+0x1f8>
 800300e:	f04f 30ff 	mov.w	r0, #4294967295
 8003012:	b004      	add	sp, #16
 8003014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	f043 0320 	orr.w	r3, r3, #32
 800301e:	6023      	str	r3, [r4, #0]
 8003020:	2778      	movs	r7, #120	; 0x78
 8003022:	4832      	ldr	r0, [pc, #200]	; (80030ec <_printf_i+0x240>)
 8003024:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	6829      	ldr	r1, [r5, #0]
 800302c:	061f      	lsls	r7, r3, #24
 800302e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003032:	d402      	bmi.n	800303a <_printf_i+0x18e>
 8003034:	065f      	lsls	r7, r3, #25
 8003036:	bf48      	it	mi
 8003038:	b2b6      	uxthmi	r6, r6
 800303a:	07df      	lsls	r7, r3, #31
 800303c:	bf48      	it	mi
 800303e:	f043 0320 	orrmi.w	r3, r3, #32
 8003042:	6029      	str	r1, [r5, #0]
 8003044:	bf48      	it	mi
 8003046:	6023      	strmi	r3, [r4, #0]
 8003048:	b91e      	cbnz	r6, 8003052 <_printf_i+0x1a6>
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	f023 0320 	bic.w	r3, r3, #32
 8003050:	6023      	str	r3, [r4, #0]
 8003052:	2310      	movs	r3, #16
 8003054:	e7a6      	b.n	8002fa4 <_printf_i+0xf8>
 8003056:	4824      	ldr	r0, [pc, #144]	; (80030e8 <_printf_i+0x23c>)
 8003058:	e7e4      	b.n	8003024 <_printf_i+0x178>
 800305a:	4615      	mov	r5, r2
 800305c:	e7bd      	b.n	8002fda <_printf_i+0x12e>
 800305e:	682b      	ldr	r3, [r5, #0]
 8003060:	6826      	ldr	r6, [r4, #0]
 8003062:	1d18      	adds	r0, r3, #4
 8003064:	6961      	ldr	r1, [r4, #20]
 8003066:	6028      	str	r0, [r5, #0]
 8003068:	0635      	lsls	r5, r6, #24
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	d501      	bpl.n	8003072 <_printf_i+0x1c6>
 800306e:	6019      	str	r1, [r3, #0]
 8003070:	e002      	b.n	8003078 <_printf_i+0x1cc>
 8003072:	0670      	lsls	r0, r6, #25
 8003074:	d5fb      	bpl.n	800306e <_printf_i+0x1c2>
 8003076:	8019      	strh	r1, [r3, #0]
 8003078:	2300      	movs	r3, #0
 800307a:	4615      	mov	r5, r2
 800307c:	6123      	str	r3, [r4, #16]
 800307e:	e7bc      	b.n	8002ffa <_printf_i+0x14e>
 8003080:	682b      	ldr	r3, [r5, #0]
 8003082:	2100      	movs	r1, #0
 8003084:	1d1a      	adds	r2, r3, #4
 8003086:	602a      	str	r2, [r5, #0]
 8003088:	681d      	ldr	r5, [r3, #0]
 800308a:	6862      	ldr	r2, [r4, #4]
 800308c:	4628      	mov	r0, r5
 800308e:	f000 f859 	bl	8003144 <memchr>
 8003092:	b108      	cbz	r0, 8003098 <_printf_i+0x1ec>
 8003094:	1b40      	subs	r0, r0, r5
 8003096:	6060      	str	r0, [r4, #4]
 8003098:	6863      	ldr	r3, [r4, #4]
 800309a:	6123      	str	r3, [r4, #16]
 800309c:	2300      	movs	r3, #0
 800309e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030a2:	e7aa      	b.n	8002ffa <_printf_i+0x14e>
 80030a4:	462a      	mov	r2, r5
 80030a6:	4649      	mov	r1, r9
 80030a8:	4640      	mov	r0, r8
 80030aa:	6923      	ldr	r3, [r4, #16]
 80030ac:	47d0      	blx	sl
 80030ae:	3001      	adds	r0, #1
 80030b0:	d0ad      	beq.n	800300e <_printf_i+0x162>
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	079b      	lsls	r3, r3, #30
 80030b6:	d413      	bmi.n	80030e0 <_printf_i+0x234>
 80030b8:	68e0      	ldr	r0, [r4, #12]
 80030ba:	9b03      	ldr	r3, [sp, #12]
 80030bc:	4298      	cmp	r0, r3
 80030be:	bfb8      	it	lt
 80030c0:	4618      	movlt	r0, r3
 80030c2:	e7a6      	b.n	8003012 <_printf_i+0x166>
 80030c4:	2301      	movs	r3, #1
 80030c6:	4632      	mov	r2, r6
 80030c8:	4649      	mov	r1, r9
 80030ca:	4640      	mov	r0, r8
 80030cc:	47d0      	blx	sl
 80030ce:	3001      	adds	r0, #1
 80030d0:	d09d      	beq.n	800300e <_printf_i+0x162>
 80030d2:	3501      	adds	r5, #1
 80030d4:	68e3      	ldr	r3, [r4, #12]
 80030d6:	9903      	ldr	r1, [sp, #12]
 80030d8:	1a5b      	subs	r3, r3, r1
 80030da:	42ab      	cmp	r3, r5
 80030dc:	dcf2      	bgt.n	80030c4 <_printf_i+0x218>
 80030de:	e7eb      	b.n	80030b8 <_printf_i+0x20c>
 80030e0:	2500      	movs	r5, #0
 80030e2:	f104 0619 	add.w	r6, r4, #25
 80030e6:	e7f5      	b.n	80030d4 <_printf_i+0x228>
 80030e8:	0800336b 	.word	0x0800336b
 80030ec:	0800337c 	.word	0x0800337c

080030f0 <memmove>:
 80030f0:	4288      	cmp	r0, r1
 80030f2:	b510      	push	{r4, lr}
 80030f4:	eb01 0402 	add.w	r4, r1, r2
 80030f8:	d902      	bls.n	8003100 <memmove+0x10>
 80030fa:	4284      	cmp	r4, r0
 80030fc:	4623      	mov	r3, r4
 80030fe:	d807      	bhi.n	8003110 <memmove+0x20>
 8003100:	1e43      	subs	r3, r0, #1
 8003102:	42a1      	cmp	r1, r4
 8003104:	d008      	beq.n	8003118 <memmove+0x28>
 8003106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800310a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800310e:	e7f8      	b.n	8003102 <memmove+0x12>
 8003110:	4601      	mov	r1, r0
 8003112:	4402      	add	r2, r0
 8003114:	428a      	cmp	r2, r1
 8003116:	d100      	bne.n	800311a <memmove+0x2a>
 8003118:	bd10      	pop	{r4, pc}
 800311a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800311e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003122:	e7f7      	b.n	8003114 <memmove+0x24>

08003124 <_sbrk_r>:
 8003124:	b538      	push	{r3, r4, r5, lr}
 8003126:	2300      	movs	r3, #0
 8003128:	4d05      	ldr	r5, [pc, #20]	; (8003140 <_sbrk_r+0x1c>)
 800312a:	4604      	mov	r4, r0
 800312c:	4608      	mov	r0, r1
 800312e:	602b      	str	r3, [r5, #0]
 8003130:	f7fd fbf4 	bl	800091c <_sbrk>
 8003134:	1c43      	adds	r3, r0, #1
 8003136:	d102      	bne.n	800313e <_sbrk_r+0x1a>
 8003138:	682b      	ldr	r3, [r5, #0]
 800313a:	b103      	cbz	r3, 800313e <_sbrk_r+0x1a>
 800313c:	6023      	str	r3, [r4, #0]
 800313e:	bd38      	pop	{r3, r4, r5, pc}
 8003140:	20000310 	.word	0x20000310

08003144 <memchr>:
 8003144:	4603      	mov	r3, r0
 8003146:	b510      	push	{r4, lr}
 8003148:	b2c9      	uxtb	r1, r1
 800314a:	4402      	add	r2, r0
 800314c:	4293      	cmp	r3, r2
 800314e:	4618      	mov	r0, r3
 8003150:	d101      	bne.n	8003156 <memchr+0x12>
 8003152:	2000      	movs	r0, #0
 8003154:	e003      	b.n	800315e <memchr+0x1a>
 8003156:	7804      	ldrb	r4, [r0, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	428c      	cmp	r4, r1
 800315c:	d1f6      	bne.n	800314c <memchr+0x8>
 800315e:	bd10      	pop	{r4, pc}

08003160 <_realloc_r>:
 8003160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003164:	4680      	mov	r8, r0
 8003166:	4614      	mov	r4, r2
 8003168:	460e      	mov	r6, r1
 800316a:	b921      	cbnz	r1, 8003176 <_realloc_r+0x16>
 800316c:	4611      	mov	r1, r2
 800316e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003172:	f7ff bc45 	b.w	8002a00 <_malloc_r>
 8003176:	b92a      	cbnz	r2, 8003184 <_realloc_r+0x24>
 8003178:	f7ff fbda 	bl	8002930 <_free_r>
 800317c:	4625      	mov	r5, r4
 800317e:	4628      	mov	r0, r5
 8003180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003184:	f000 f81b 	bl	80031be <_malloc_usable_size_r>
 8003188:	4284      	cmp	r4, r0
 800318a:	4607      	mov	r7, r0
 800318c:	d802      	bhi.n	8003194 <_realloc_r+0x34>
 800318e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003192:	d812      	bhi.n	80031ba <_realloc_r+0x5a>
 8003194:	4621      	mov	r1, r4
 8003196:	4640      	mov	r0, r8
 8003198:	f7ff fc32 	bl	8002a00 <_malloc_r>
 800319c:	4605      	mov	r5, r0
 800319e:	2800      	cmp	r0, #0
 80031a0:	d0ed      	beq.n	800317e <_realloc_r+0x1e>
 80031a2:	42bc      	cmp	r4, r7
 80031a4:	4622      	mov	r2, r4
 80031a6:	4631      	mov	r1, r6
 80031a8:	bf28      	it	cs
 80031aa:	463a      	movcs	r2, r7
 80031ac:	f7ff fbb2 	bl	8002914 <memcpy>
 80031b0:	4631      	mov	r1, r6
 80031b2:	4640      	mov	r0, r8
 80031b4:	f7ff fbbc 	bl	8002930 <_free_r>
 80031b8:	e7e1      	b.n	800317e <_realloc_r+0x1e>
 80031ba:	4635      	mov	r5, r6
 80031bc:	e7df      	b.n	800317e <_realloc_r+0x1e>

080031be <_malloc_usable_size_r>:
 80031be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031c2:	1f18      	subs	r0, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bfbc      	itt	lt
 80031c8:	580b      	ldrlt	r3, [r1, r0]
 80031ca:	18c0      	addlt	r0, r0, r3
 80031cc:	4770      	bx	lr
	...

080031d0 <_init>:
 80031d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d2:	bf00      	nop
 80031d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031d6:	bc08      	pop	{r3}
 80031d8:	469e      	mov	lr, r3
 80031da:	4770      	bx	lr

080031dc <_fini>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	bf00      	nop
 80031e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e2:	bc08      	pop	{r3}
 80031e4:	469e      	mov	lr, r3
 80031e6:	4770      	bx	lr
