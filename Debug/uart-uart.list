
uart-uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080032e0  080032e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003488  08003488  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003488  08003488  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003488  08003488  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003488  08003488  00013488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800348c  0800348c  0001348c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000060  080034ec  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  080034ec  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000749c  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016e8  00000000  00000000  00027564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b0  00000000  00000000  00028c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000518  00000000  00000000  00029300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015e6b  00000000  00000000  00029818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000088cd  00000000  00000000  0003f683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e0fb  00000000  00000000  00047f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f08  00000000  00000000  000c604c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000c7f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	080032c8 	.word	0x080032c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	080032c8 	.word	0x080032c8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CalcCRC>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t CalcCRC(uint64_t ddd)
{
 800015c:	b4f0      	push	{r4, r5, r6, r7}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t crc = 0;
 8000166:	2100      	movs	r1, #0
 8000168:	73f9      	strb	r1, [r7, #15]
    uint8_t byte;
    for (uint8_t i = 0; i < 3; ++i) {
 800016a:	2100      	movs	r1, #0
 800016c:	7379      	strb	r1, [r7, #13]
 800016e:	e036      	b.n	80001de <CalcCRC+0x82>
        byte = (ddd >> (i * 8)) & 255;
 8000170:	7b79      	ldrb	r1, [r7, #13]
 8000172:	00cc      	lsls	r4, r1, #3
 8000174:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000178:	f1c4 0620 	rsb	r6, r4, #32
 800017c:	f1a4 0520 	sub.w	r5, r4, #32
 8000180:	fa20 f204 	lsr.w	r2, r0, r4
 8000184:	fa01 f606 	lsl.w	r6, r1, r6
 8000188:	4332      	orrs	r2, r6
 800018a:	fa21 f505 	lsr.w	r5, r1, r5
 800018e:	432a      	orrs	r2, r5
 8000190:	fa21 f304 	lsr.w	r3, r1, r4
 8000194:	4611      	mov	r1, r2
 8000196:	73b9      	strb	r1, [r7, #14]
        for (uint8_t j = 0; j < 8; ++j) {
 8000198:	2100      	movs	r1, #0
 800019a:	7339      	strb	r1, [r7, #12]
 800019c:	e019      	b.n	80001d2 <CalcCRC+0x76>
            if ((crc >> 7) ^ (byte & 0x01)) {
 800019e:	7bf9      	ldrb	r1, [r7, #15]
 80001a0:	09c9      	lsrs	r1, r1, #7
 80001a2:	b2c9      	uxtb	r1, r1
 80001a4:	4608      	mov	r0, r1
 80001a6:	7bb9      	ldrb	r1, [r7, #14]
 80001a8:	f001 0101 	and.w	r1, r1, #1
 80001ac:	4288      	cmp	r0, r1
 80001ae:	d007      	beq.n	80001c0 <CalcCRC+0x64>
                crc = (crc << 1) ^ 0x07;
 80001b0:	7bf9      	ldrb	r1, [r7, #15]
 80001b2:	0049      	lsls	r1, r1, #1
 80001b4:	b249      	sxtb	r1, r1
 80001b6:	f081 0107 	eor.w	r1, r1, #7
 80001ba:	b249      	sxtb	r1, r1
 80001bc:	73f9      	strb	r1, [r7, #15]
 80001be:	e002      	b.n	80001c6 <CalcCRC+0x6a>
            } else {
                crc = crc << 1;
 80001c0:	7bf9      	ldrb	r1, [r7, #15]
 80001c2:	0049      	lsls	r1, r1, #1
 80001c4:	73f9      	strb	r1, [r7, #15]
            }
            byte = byte >> 1;
 80001c6:	7bb9      	ldrb	r1, [r7, #14]
 80001c8:	0849      	lsrs	r1, r1, #1
 80001ca:	73b9      	strb	r1, [r7, #14]
        for (uint8_t j = 0; j < 8; ++j) {
 80001cc:	7b39      	ldrb	r1, [r7, #12]
 80001ce:	3101      	adds	r1, #1
 80001d0:	7339      	strb	r1, [r7, #12]
 80001d2:	7b39      	ldrb	r1, [r7, #12]
 80001d4:	2907      	cmp	r1, #7
 80001d6:	d9e2      	bls.n	800019e <CalcCRC+0x42>
    for (uint8_t i = 0; i < 3; ++i) {
 80001d8:	7b79      	ldrb	r1, [r7, #13]
 80001da:	3101      	adds	r1, #1
 80001dc:	7379      	strb	r1, [r7, #13]
 80001de:	7b79      	ldrb	r1, [r7, #13]
 80001e0:	2902      	cmp	r1, #2
 80001e2:	d9c5      	bls.n	8000170 <CalcCRC+0x14>
        }
    }
    return crc;
 80001e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bcf0      	pop	{r4, r5, r6, r7}
 80001ee:	4770      	bx	lr

080001f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80001f4:	f5ad 7d7b 	sub.w	sp, sp, #1004	; 0x3ec
 80001f8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fa:	f000 fc25 	bl	8000a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fe:	f000 fa17 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000202:	f000 faab 	bl	800075c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000206:	f000 fa55 	bl	80006b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800020a:	f000 fa7d 	bl	8000708 <MX_USART2_UART_Init>
//	  HAL_UART_Transmit(&huart1, str, strlen(str), 30);
	  HAL_Delay(0);
  }
*/

  req.bytes            = 0;
 800020e:	4bd6      	ldr	r3, [pc, #856]	; (8000568 <main+0x378>)
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
  req.sync             = 5;
 8000214:	4ad4      	ldr	r2, [pc, #848]	; (8000568 <main+0x378>)
 8000216:	7813      	ldrb	r3, [r2, #0]
 8000218:	2105      	movs	r1, #5
 800021a:	f361 0303 	bfi	r3, r1, #0, #4
 800021e:	7013      	strb	r3, [r2, #0]
  req.reserved         = 0;
 8000220:	4ad1      	ldr	r2, [pc, #836]	; (8000568 <main+0x378>)
 8000222:	7813      	ldrb	r3, [r2, #0]
 8000224:	f36f 1307 	bfc	r3, #4, #4
 8000228:	7013      	strb	r3, [r2, #0]
  req.serial_address   = 0;
 800022a:	4bcf      	ldr	r3, [pc, #828]	; (8000568 <main+0x378>)
 800022c:	2200      	movs	r2, #0
 800022e:	705a      	strb	r2, [r3, #1]
  req.register_address = 0x6c;
 8000230:	4acd      	ldr	r2, [pc, #820]	; (8000568 <main+0x378>)
 8000232:	7893      	ldrb	r3, [r2, #2]
 8000234:	216c      	movs	r1, #108	; 0x6c
 8000236:	f361 0306 	bfi	r3, r1, #0, #7
 800023a:	7093      	strb	r3, [r2, #2]
  req.rw               = 0;
 800023c:	4aca      	ldr	r2, [pc, #808]	; (8000568 <main+0x378>)
 800023e:	7893      	ldrb	r3, [r2, #2]
 8000240:	f36f 13c7 	bfc	r3, #7, #1
 8000244:	7093      	strb	r3, [r2, #2]
  req.crc              = CalcCRC(req.bytes);
 8000246:	4bc8      	ldr	r3, [pc, #800]	; (8000568 <main+0x378>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	2200      	movs	r2, #0
 800024c:	4698      	mov	r8, r3
 800024e:	4691      	mov	r9, r2
 8000250:	4640      	mov	r0, r8
 8000252:	4649      	mov	r1, r9
 8000254:	f7ff ff82 	bl	800015c <CalcCRC>
 8000258:	4603      	mov	r3, r0
 800025a:	461a      	mov	r2, r3
 800025c:	4bc2      	ldr	r3, [pc, #776]	; (8000568 <main+0x378>)
 800025e:	70da      	strb	r2, [r3, #3]

  uint32_t regs[] = { 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
 8000260:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000264:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000268:	4ac0      	ldr	r2, [pc, #768]	; (800056c <main+0x37c>)
 800026a:	4618      	mov	r0, r3
 800026c:	4611      	mov	r1, r2
 800026e:	2360      	movs	r3, #96	; 0x60
 8000270:	461a      	mov	r2, r3
 8000272:	f002 fbcb 	bl	8002a0c <memcpy>
		              0x10,0x11,0x12,0x13,0x14,0x22,0x40,0x41,
					  0x42,0x68,0x6a,0x6c,0x6f,0x70,0x71,0x72};
  uint32_t sr[24][5],dr[5];

  sprintf(str, "\x1b[2H\x1b[2J\0");
 8000276:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800027a:	49bd      	ldr	r1, [pc, #756]	; (8000570 <main+0x380>)
 800027c:	4618      	mov	r0, r3
 800027e:	f002 fb71 	bl	8002964 <siprintf>
  HAL_UART_Transmit(&huart1, str, strlen(str), 30);
 8000282:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8000286:	4618      	mov	r0, r3
 8000288:	f7ff ff60 	bl	800014c <strlen>
 800028c:	4603      	mov	r3, r0
 800028e:	b29a      	uxth	r2, r3
 8000290:	f507 7129 	add.w	r1, r7, #676	; 0x2a4
 8000294:	231e      	movs	r3, #30
 8000296:	48b7      	ldr	r0, [pc, #732]	; (8000574 <main+0x384>)
 8000298:	f001 fc5c 	bl	8001b54 <HAL_UART_Transmit>

  for (int i=0; i<sizeof(regs)/4; i++) {
 800029c:	2300      	movs	r3, #0
 800029e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80002a2:	e0cc      	b.n	800043e <main+0x24e>
	  req.register_address = regs[i];
 80002a4:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80002a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80002ac:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80002b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002b8:	b2d9      	uxtb	r1, r3
 80002ba:	4aab      	ldr	r2, [pc, #684]	; (8000568 <main+0x378>)
 80002bc:	7893      	ldrb	r3, [r2, #2]
 80002be:	f361 0306 	bfi	r3, r1, #0, #7
 80002c2:	7093      	strb	r3, [r2, #2]
	  req.crc              = CalcCRC(req.bytes);
 80002c4:	4ba8      	ldr	r3, [pc, #672]	; (8000568 <main+0x378>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2200      	movs	r2, #0
 80002ca:	461c      	mov	r4, r3
 80002cc:	4615      	mov	r5, r2
 80002ce:	4620      	mov	r0, r4
 80002d0:	4629      	mov	r1, r5
 80002d2:	f7ff ff43 	bl	800015c <CalcCRC>
 80002d6:	4603      	mov	r3, r0
 80002d8:	461a      	mov	r2, r3
 80002da:	4ba3      	ldr	r3, [pc, #652]	; (8000568 <main+0x378>)
 80002dc:	70da      	strb	r2, [r3, #3]

	  status[i] = HAL_UART_Receive(&huart2, (uint8_t *)(& ans[i].bytes), 8, 2);
 80002de:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80002e2:	00db      	lsls	r3, r3, #3
 80002e4:	4aa4      	ldr	r2, [pc, #656]	; (8000578 <main+0x388>)
 80002e6:	1899      	adds	r1, r3, r2
 80002e8:	2302      	movs	r3, #2
 80002ea:	2208      	movs	r2, #8
 80002ec:	48a3      	ldr	r0, [pc, #652]	; (800057c <main+0x38c>)
 80002ee:	f001 fcb4 	bl	8001c5a <HAL_UART_Receive>
 80002f2:	4603      	mov	r3, r0
 80002f4:	4619      	mov	r1, r3
 80002f6:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80002fa:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 80002fe:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8000302:	4413      	add	r3, r2
 8000304:	460a      	mov	r2, r1
 8000306:	701a      	strb	r2, [r3, #0]

	  sr[i][0] = huart2.Instance->SR;
 8000308:	4b9c      	ldr	r3, [pc, #624]	; (800057c <main+0x38c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	6819      	ldr	r1, [r3, #0]
 800030e:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000312:	f5a3 706d 	sub.w	r0, r3, #948	; 0x3b4
 8000316:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 800031a:	4613      	mov	r3, r2
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	4413      	add	r3, r2
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	4403      	add	r3, r0
 8000324:	6019      	str	r1, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)(& req), 4, 1);
 8000326:	2301      	movs	r3, #1
 8000328:	2204      	movs	r2, #4
 800032a:	498f      	ldr	r1, [pc, #572]	; (8000568 <main+0x378>)
 800032c:	4893      	ldr	r0, [pc, #588]	; (800057c <main+0x38c>)
 800032e:	f001 fc11 	bl	8001b54 <HAL_UART_Transmit>
	  sr[i][1] = huart2.Instance->SR;
 8000332:	4b92      	ldr	r3, [pc, #584]	; (800057c <main+0x38c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	6819      	ldr	r1, [r3, #0]
 8000338:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800033c:	f5a3 706d 	sub.w	r0, r3, #948	; 0x3b4
 8000340:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8000344:	4613      	mov	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	4413      	add	r3, r2
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	4403      	add	r3, r0
 800034e:	3304      	adds	r3, #4
 8000350:	6019      	str	r1, [r3, #0]

	  status1[i] = HAL_UART_AbortReceive(&huart2); // Прерываем прием данных
 8000352:	488a      	ldr	r0, [pc, #552]	; (800057c <main+0x38c>)
 8000354:	f001 fd13 	bl	8001d7e <HAL_UART_AbortReceive>
 8000358:	4603      	mov	r3, r0
 800035a:	4619      	mov	r1, r3
 800035c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000360:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 8000364:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8000368:	4413      	add	r3, r2
 800036a:	460a      	mov	r2, r1
 800036c:	701a      	strb	r2, [r3, #0]
	  sr[i][2] = huart2.Instance->SR;
 800036e:	4b83      	ldr	r3, [pc, #524]	; (800057c <main+0x38c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	6819      	ldr	r1, [r3, #0]
 8000374:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000378:	f5a3 706d 	sub.w	r0, r3, #948	; 0x3b4
 800037c:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8000380:	4613      	mov	r3, r2
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	4413      	add	r3, r2
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	4403      	add	r3, r0
 800038a:	3308      	adds	r3, #8
 800038c:	6019      	str	r1, [r3, #0]

	  cc[i]=0;
 800038e:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000392:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 8000396:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800039a:	4413      	add	r3, r2
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]
	  status1[i] = HAL_UART_Receive(&huart2, cc+i, 1, 1); // == HAL_OK;
 80003a0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80003a4:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 80003a8:	18d1      	adds	r1, r2, r3
 80003aa:	2301      	movs	r3, #1
 80003ac:	2201      	movs	r2, #1
 80003ae:	4873      	ldr	r0, [pc, #460]	; (800057c <main+0x38c>)
 80003b0:	f001 fc53 	bl	8001c5a <HAL_UART_Receive>
 80003b4:	4603      	mov	r3, r0
 80003b6:	4619      	mov	r1, r3
 80003b8:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80003bc:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 80003c0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80003c4:	4413      	add	r3, r2
 80003c6:	460a      	mov	r2, r1
 80003c8:	701a      	strb	r2, [r3, #0]
	  sr[i][3] = huart2.Instance->SR;
 80003ca:	4b6c      	ldr	r3, [pc, #432]	; (800057c <main+0x38c>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	6819      	ldr	r1, [r3, #0]
 80003d0:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80003d4:	f5a3 706d 	sub.w	r0, r3, #948	; 0x3b4
 80003d8:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80003dc:	4613      	mov	r3, r2
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	4413      	add	r3, r2
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	4403      	add	r3, r0
 80003e6:	330c      	adds	r3, #12
 80003e8:	6019      	str	r1, [r3, #0]

	  status[i] = HAL_UART_Receive(&huart2, (uint8_t *)(& ans[i].bytes), 8, 12);
 80003ea:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80003ee:	00db      	lsls	r3, r3, #3
 80003f0:	4a61      	ldr	r2, [pc, #388]	; (8000578 <main+0x388>)
 80003f2:	1899      	adds	r1, r3, r2
 80003f4:	230c      	movs	r3, #12
 80003f6:	2208      	movs	r2, #8
 80003f8:	4860      	ldr	r0, [pc, #384]	; (800057c <main+0x38c>)
 80003fa:	f001 fc2e 	bl	8001c5a <HAL_UART_Receive>
 80003fe:	4603      	mov	r3, r0
 8000400:	4619      	mov	r1, r3
 8000402:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000406:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800040a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800040e:	4413      	add	r3, r2
 8000410:	460a      	mov	r2, r1
 8000412:	701a      	strb	r2, [r3, #0]
	  sr[i][4] = huart2.Instance->SR;
 8000414:	4b59      	ldr	r3, [pc, #356]	; (800057c <main+0x38c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	6819      	ldr	r1, [r3, #0]
 800041a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800041e:	f5a3 706d 	sub.w	r0, r3, #948	; 0x3b4
 8000422:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8000426:	4613      	mov	r3, r2
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	4413      	add	r3, r2
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	4403      	add	r3, r0
 8000430:	3310      	adds	r3, #16
 8000432:	6019      	str	r1, [r3, #0]
  for (int i=0; i<sizeof(regs)/4; i++) {
 8000434:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8000438:	3301      	adds	r3, #1
 800043a:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800043e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8000442:	2b17      	cmp	r3, #23
 8000444:	f67f af2e 	bls.w	80002a4 <main+0xb4>
  }

  for (int i=0; i<sizeof(regs)/4; i++) {
 8000448:	2300      	movs	r3, #0
 800044a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800044e:	e0d8      	b.n	8000602 <main+0x412>
      sprintf(str, "Статусы: %02x %02x %02x %02x %02x  CC:[%d] %02x  \0",sr[i][0],sr[i][1],sr[i][2],sr[i][3],sr[i][4],status1[i],cc[i]);
 8000450:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000454:	f5a3 716d 	sub.w	r1, r3, #948	; 0x3b4
 8000458:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800045c:	4613      	mov	r3, r2
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	4413      	add	r3, r2
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	440b      	add	r3, r1
 8000466:	681d      	ldr	r5, [r3, #0]
 8000468:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800046c:	f5a3 716d 	sub.w	r1, r3, #948	; 0x3b4
 8000470:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8000474:	4613      	mov	r3, r2
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	4413      	add	r3, r2
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	440b      	add	r3, r1
 800047e:	3304      	adds	r3, #4
 8000480:	681e      	ldr	r6, [r3, #0]
 8000482:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000486:	f5a3 716d 	sub.w	r1, r3, #948	; 0x3b4
 800048a:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800048e:	4613      	mov	r3, r2
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	4413      	add	r3, r2
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	440b      	add	r3, r1
 8000498:	3308      	adds	r3, #8
 800049a:	6819      	ldr	r1, [r3, #0]
 800049c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80004a0:	f5a3 706d 	sub.w	r0, r3, #948	; 0x3b4
 80004a4:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80004a8:	4613      	mov	r3, r2
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	4413      	add	r3, r2
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	4403      	add	r3, r0
 80004b2:	330c      	adds	r3, #12
 80004b4:	6818      	ldr	r0, [r3, #0]
 80004b6:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80004ba:	f5a3 746d 	sub.w	r4, r3, #948	; 0x3b4
 80004be:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80004c2:	4613      	mov	r3, r2
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	4413      	add	r3, r2
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	4423      	add	r3, r4
 80004cc:	3310      	adds	r3, #16
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80004d4:	f5a2 74ba 	sub.w	r4, r2, #372	; 0x174
 80004d8:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80004dc:	4422      	add	r2, r4
 80004de:	7812      	ldrb	r2, [r2, #0]
 80004e0:	607a      	str	r2, [r7, #4]
 80004e2:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80004e6:	f5a2 74a2 	sub.w	r4, r2, #324	; 0x144
 80004ea:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80004ee:	4422      	add	r2, r4
 80004f0:	7812      	ldrb	r2, [r2, #0]
 80004f2:	f507 7429 	add.w	r4, r7, #676	; 0x2a4
 80004f6:	9204      	str	r2, [sp, #16]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	9203      	str	r2, [sp, #12]
 80004fc:	9302      	str	r3, [sp, #8]
 80004fe:	9001      	str	r0, [sp, #4]
 8000500:	9100      	str	r1, [sp, #0]
 8000502:	4633      	mov	r3, r6
 8000504:	462a      	mov	r2, r5
 8000506:	491e      	ldr	r1, [pc, #120]	; (8000580 <main+0x390>)
 8000508:	4620      	mov	r0, r4
 800050a:	f002 fa2b 	bl	8002964 <siprintf>
      HAL_UART_Transmit(&huart1, str, strlen(str), 30);
 800050e:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff fe1a 	bl	800014c <strlen>
 8000518:	4603      	mov	r3, r0
 800051a:	b29a      	uxth	r2, r3
 800051c:	f507 7129 	add.w	r1, r7, #676	; 0x2a4
 8000520:	231e      	movs	r3, #30
 8000522:	4814      	ldr	r0, [pc, #80]	; (8000574 <main+0x384>)
 8000524:	f001 fb16 	bl	8001b54 <HAL_UART_Transmit>
      if (status[i]==0) {
 8000528:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800052c:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8000530:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8000534:	4413      	add	r3, r2
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d125      	bne.n	8000588 <main+0x398>
	      sprintf(str, "Чтение регистра %02x: %08x\r\n\0",regs[i],ans[i].data);
 800053c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8000540:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000544:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8000548:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800054c:	490a      	ldr	r1, [pc, #40]	; (8000578 <main+0x388>)
 800054e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8000552:	00db      	lsls	r3, r3, #3
 8000554:	440b      	add	r3, r1
 8000556:	f8d3 3003 	ldr.w	r3, [r3, #3]
 800055a:	f507 7029 	add.w	r0, r7, #676	; 0x2a4
 800055e:	4909      	ldr	r1, [pc, #36]	; (8000584 <main+0x394>)
 8000560:	f002 fa00 	bl	8002964 <siprintf>
 8000564:	e03b      	b.n	80005de <main+0x3ee>
 8000566:	bf00      	nop
 8000568:	2000010c 	.word	0x2000010c
 800056c:	080033c8 	.word	0x080033c8
 8000570:	080032e0 	.word	0x080032e0
 8000574:	2000007c 	.word	0x2000007c
 8000578:	20000110 	.word	0x20000110
 800057c:	200000c4 	.word	0x200000c4
 8000580:	080032ec 	.word	0x080032ec
 8000584:	08003328 	.word	0x08003328
      } else if (status[i]==3) {
 8000588:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800058c:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8000590:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b03      	cmp	r3, #3
 800059a:	d10c      	bne.n	80005b6 <main+0x3c6>
	      sprintf(str, "Ошибка чтения регистра %02x: timeout\r\n\0",req.register_address);
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <main+0x42c>)
 800059e:	789b      	ldrb	r3, [r3, #2]
 80005a0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80005ac:	491c      	ldr	r1, [pc, #112]	; (8000620 <main+0x430>)
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 f9d8 	bl	8002964 <siprintf>
 80005b4:	e013      	b.n	80005de <main+0x3ee>
      } else {
	      sprintf(str, "Ошибка чтения регистра %02x: %d\r\n\0",req.register_address,status[i]);
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <main+0x42c>)
 80005b8:	789b      	ldrb	r3, [r3, #2]
 80005ba:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	4619      	mov	r1, r3
 80005c2:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80005c6:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 80005ca:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	f507 7029 	add.w	r0, r7, #676	; 0x2a4
 80005d6:	460a      	mov	r2, r1
 80005d8:	4912      	ldr	r1, [pc, #72]	; (8000624 <main+0x434>)
 80005da:	f002 f9c3 	bl	8002964 <siprintf>
      }
	  HAL_UART_Transmit(&huart1, str, strlen(str), 30);
 80005de:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fdb2 	bl	800014c <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f507 7129 	add.w	r1, r7, #676	; 0x2a4
 80005f0:	231e      	movs	r3, #30
 80005f2:	480d      	ldr	r0, [pc, #52]	; (8000628 <main+0x438>)
 80005f4:	f001 faae 	bl	8001b54 <HAL_UART_Transmit>
  for (int i=0; i<sizeof(regs)/4; i++) {
 80005f8:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80005fc:	3301      	adds	r3, #1
 80005fe:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8000602:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8000606:	2b17      	cmp	r3, #23
 8000608:	f67f af22 	bls.w	8000450 <main+0x260>
	  //	  HAL_Delay(1000);
  }

  HAL_Delay(100000);
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <main+0x43c>)
 800060e:	f000 fa7d 	bl	8000b0c <HAL_Delay>
    // прием о�?тавших�?�? 2х байтов команды
//    if(
//    status = HAL_UART_Receive(&huart2, (uint8_t *)(& ans.bytes), 8, 1);
//    != HAL_OK ) continue;

    HAL_Delay(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f000 fa7a 	bl	8000b0c <HAL_Delay>
 8000618:	e7fb      	b.n	8000612 <main+0x422>
 800061a:	bf00      	nop
 800061c:	2000010c 	.word	0x2000010c
 8000620:	08003354 	.word	0x08003354
 8000624:	08003390 	.word	0x08003390
 8000628:	2000007c 	.word	0x2000007c
 800062c:	000186a0 	.word	0x000186a0

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0318 	add.w	r3, r7, #24
 800063a:	2228      	movs	r2, #40	; 0x28
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f002 f9b0 	bl	80029a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000656:	2301      	movs	r3, #1
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065a:	2310      	movs	r3, #16
 800065c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000662:	2300      	movs	r3, #0
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000666:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0318 	add.w	r3, r7, #24
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fdb7 	bl	80011e4 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800067c:	f000 f884 	bl	8000788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f824 	bl	80016e8 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006a6:	f000 f86f 	bl	8000788 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3740      	adds	r7, #64	; 0x40
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_USART1_UART_Init+0x50>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006ec:	f001 f98a 	bl	8001a04 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006f6:	f000 f847 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000007c 	.word	0x2000007c
 8000704:	40013800 	.word	0x40013800

08000708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_USART2_UART_Init+0x50>)
 8000710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000714:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000740:	f001 f9b0 	bl	8001aa4 <HAL_HalfDuplex_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074a:	f000 f81d 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200000c4 	.word	0x200000c4
 8000758:	40004400 	.word	0x40004400

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_GPIO_Init+0x28>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <MX_GPIO_Init+0x28>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6193      	str	r3, [r2, #24]
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <MX_GPIO_Init+0x28>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40021000 	.word	0x40021000

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	e7fe      	b.n	8000790 <Error_Handler+0x8>
	...

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_MspInit+0x5c>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <HAL_MspInit+0x5c>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6193      	str	r3, [r2, #24]
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_MspInit+0x5c>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_MspInit+0x5c>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <HAL_MspInit+0x5c>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	61d3      	str	r3, [r2, #28]
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_MspInit+0x5c>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <HAL_MspInit+0x60>)
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_MspInit+0x60>)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40010000 	.word	0x40010000

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 0318 	add.w	r3, r7, #24
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a3a      	ldr	r2, [pc, #232]	; (80008fc <HAL_UART_MspInit+0x104>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d13a      	bne.n	800088e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000818:	4b39      	ldr	r3, [pc, #228]	; (8000900 <HAL_UART_MspInit+0x108>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a38      	ldr	r2, [pc, #224]	; (8000900 <HAL_UART_MspInit+0x108>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b36      	ldr	r3, [pc, #216]	; (8000900 <HAL_UART_MspInit+0x108>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	4b33      	ldr	r3, [pc, #204]	; (8000900 <HAL_UART_MspInit+0x108>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a32      	ldr	r2, [pc, #200]	; (8000900 <HAL_UART_MspInit+0x108>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b30      	ldr	r3, [pc, #192]	; (8000900 <HAL_UART_MspInit+0x108>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800084c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 0318 	add.w	r3, r7, #24
 800085a:	4619      	mov	r1, r3
 800085c:	4829      	ldr	r0, [pc, #164]	; (8000904 <HAL_UART_MspInit+0x10c>)
 800085e:	f000 fb45 	bl	8000eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 0318 	add.w	r3, r7, #24
 8000874:	4619      	mov	r1, r3
 8000876:	4823      	ldr	r0, [pc, #140]	; (8000904 <HAL_UART_MspInit+0x10c>)
 8000878:	f000 fb38 	bl	8000eec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	2025      	movs	r0, #37	; 0x25
 8000882:	f000 fa3e 	bl	8000d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000886:	2025      	movs	r0, #37	; 0x25
 8000888:	f000 fa57 	bl	8000d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800088c:	e032      	b.n	80008f4 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <HAL_UART_MspInit+0x110>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d12d      	bne.n	80008f4 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <HAL_UART_MspInit+0x108>)
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	4a18      	ldr	r2, [pc, #96]	; (8000900 <HAL_UART_MspInit+0x108>)
 800089e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a2:	61d3      	str	r3, [r2, #28]
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <HAL_UART_MspInit+0x108>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <HAL_UART_MspInit+0x108>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a12      	ldr	r2, [pc, #72]	; (8000900 <HAL_UART_MspInit+0x108>)
 80008b6:	f043 0304 	orr.w	r3, r3, #4
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <HAL_UART_MspInit+0x108>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008c8:	2304      	movs	r3, #4
 80008ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008cc:	2312      	movs	r3, #18
 80008ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	4619      	mov	r1, r3
 80008de:	4809      	ldr	r0, [pc, #36]	; (8000904 <HAL_UART_MspInit+0x10c>)
 80008e0:	f000 fb04 	bl	8000eec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2026      	movs	r0, #38	; 0x26
 80008ea:	f000 fa0a 	bl	8000d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ee:	2026      	movs	r0, #38	; 0x26
 80008f0:	f000 fa23 	bl	8000d3a <HAL_NVIC_EnableIRQ>
}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40013800 	.word	0x40013800
 8000900:	40021000 	.word	0x40021000
 8000904:	40010800 	.word	0x40010800
 8000908:	40004400 	.word	0x40004400

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <MemManage_Handler+0x4>

0800091e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler+0x4>

0800092a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000952:	f000 f8bf 	bl	8000ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <USART1_IRQHandler+0x10>)
 8000962:	f001 faaf 	bl	8001ec4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000007c 	.word	0x2000007c

08000970 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <USART2_IRQHandler+0x10>)
 8000976:	f001 faa5 	bl	8001ec4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000c4 	.word	0x200000c4

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f001 fffe 	bl	80029b4 <__errno>
 80009b8:	4603      	mov	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <_sbrk+0x64>)
 80009d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20002800 	.word	0x20002800
 80009e4:	00000400 	.word	0x00000400
 80009e8:	200001d0 	.word	0x200001d0
 80009ec:	20000320 	.word	0x20000320

080009f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009fc:	f7ff fff8 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a02:	490c      	ldr	r1, [pc, #48]	; (8000a34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a04:	4a0c      	ldr	r2, [pc, #48]	; (8000a38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a18:	4c09      	ldr	r4, [pc, #36]	; (8000a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a26:	f001 ffcb 	bl	80029c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2a:	f7ff fbe1 	bl	80001f0 <main>
  bx lr
 8000a2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a38:	08003490 	.word	0x08003490
  ldr r2, =_sbss
 8000a3c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a40:	20000320 	.word	0x20000320

08000a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_2_IRQHandler>
	...

08000a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_Init+0x28>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <HAL_Init+0x28>)
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 f947 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	200f      	movs	r0, #15
 8000a60:	f000 f808 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a64:	f7ff fe96 	bl	8000794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40022000 	.word	0x40022000

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x54>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x58>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f95f 	bl	8000d56 <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00e      	b.n	8000ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d80a      	bhi.n	8000abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f000 f927 	bl	8000d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <HAL_InitTick+0x5c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_IncTick+0x1c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_IncTick+0x20>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a03      	ldr	r2, [pc, #12]	; (8000af4 <HAL_IncTick+0x20>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	20000008 	.word	0x20000008
 8000af4:	200001d4 	.word	0x200001d4

08000af8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b02      	ldr	r3, [pc, #8]	; (8000b08 <HAL_GetTick+0x10>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	200001d4 	.word	0x200001d4

08000b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b14:	f7ff fff0 	bl	8000af8 <HAL_GetTick>
 8000b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b24:	d005      	beq.n	8000b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_Delay+0x44>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4413      	add	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b32:	bf00      	nop
 8000b34:	f7ff ffe0 	bl	8000af8 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d8f7      	bhi.n	8000b34 <HAL_Delay+0x28>
  {
  }
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4906      	ldr	r1, [pc, #24]	; (8000bec <__NVIC_EnableIRQ+0x34>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	; (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf28      	it	cs
 8000c62:	2304      	movcs	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b03      	subs	r3, #3
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
         );
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb8:	d301      	bcc.n	8000cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00f      	b.n	8000cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <SysTick_Config+0x40>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f7ff ff90 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff2d 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d14:	f7ff ff42 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	68b9      	ldr	r1, [r7, #8]
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f7ff ff90 	bl	8000c44 <NVIC_EncodePriority>
 8000d24:	4602      	mov	r2, r0
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff5f 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff35 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffa2 	bl	8000ca8 <SysTick_Config>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b085      	sub	sp, #20
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d008      	beq.n	8000d98 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2204      	movs	r2, #4
 8000d8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e020      	b.n	8000dda <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 020e 	bic.w	r2, r2, #14
 8000da6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 0201 	bic.w	r2, r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d005      	beq.n	8000e08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2204      	movs	r2, #4
 8000e00:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e051      	b.n	8000eac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 020e 	bic.w	r2, r2, #14
 8000e16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 0201 	bic.w	r2, r2, #1
 8000e26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <HAL_DMA_Abort_IT+0xd4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d029      	beq.n	8000e86 <HAL_DMA_Abort_IT+0xa2>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <HAL_DMA_Abort_IT+0xd8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d022      	beq.n	8000e82 <HAL_DMA_Abort_IT+0x9e>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <HAL_DMA_Abort_IT+0xdc>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01a      	beq.n	8000e7c <HAL_DMA_Abort_IT+0x98>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <HAL_DMA_Abort_IT+0xe0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d012      	beq.n	8000e76 <HAL_DMA_Abort_IT+0x92>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <HAL_DMA_Abort_IT+0xe4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d00a      	beq.n	8000e70 <HAL_DMA_Abort_IT+0x8c>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <HAL_DMA_Abort_IT+0xe8>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d102      	bne.n	8000e6a <HAL_DMA_Abort_IT+0x86>
 8000e64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e68:	e00e      	b.n	8000e88 <HAL_DMA_Abort_IT+0xa4>
 8000e6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e6e:	e00b      	b.n	8000e88 <HAL_DMA_Abort_IT+0xa4>
 8000e70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e74:	e008      	b.n	8000e88 <HAL_DMA_Abort_IT+0xa4>
 8000e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7a:	e005      	b.n	8000e88 <HAL_DMA_Abort_IT+0xa4>
 8000e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e80:	e002      	b.n	8000e88 <HAL_DMA_Abort_IT+0xa4>
 8000e82:	2310      	movs	r3, #16
 8000e84:	e000      	b.n	8000e88 <HAL_DMA_Abort_IT+0xa4>
 8000e86:	2301      	movs	r3, #1
 8000e88:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <HAL_DMA_Abort_IT+0xec>)
 8000e8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	4798      	blx	r3
    } 
  }
  return status;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40020008 	.word	0x40020008
 8000ebc:	4002001c 	.word	0x4002001c
 8000ec0:	40020030 	.word	0x40020030
 8000ec4:	40020044 	.word	0x40020044
 8000ec8:	40020058 	.word	0x40020058
 8000ecc:	4002006c 	.word	0x4002006c
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
	...

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b08b      	sub	sp, #44	; 0x2c
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efe:	e161      	b.n	80011c4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f00:	2201      	movs	r2, #1
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	69fa      	ldr	r2, [r7, #28]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 8150 	bne.w	80011be <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	4a97      	ldr	r2, [pc, #604]	; (8001180 <HAL_GPIO_Init+0x294>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d05e      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f28:	4a95      	ldr	r2, [pc, #596]	; (8001180 <HAL_GPIO_Init+0x294>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d875      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f2e:	4a95      	ldr	r2, [pc, #596]	; (8001184 <HAL_GPIO_Init+0x298>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d058      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f34:	4a93      	ldr	r2, [pc, #588]	; (8001184 <HAL_GPIO_Init+0x298>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d86f      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f3a:	4a93      	ldr	r2, [pc, #588]	; (8001188 <HAL_GPIO_Init+0x29c>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d052      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f40:	4a91      	ldr	r2, [pc, #580]	; (8001188 <HAL_GPIO_Init+0x29c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d869      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f46:	4a91      	ldr	r2, [pc, #580]	; (800118c <HAL_GPIO_Init+0x2a0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d04c      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f4c:	4a8f      	ldr	r2, [pc, #572]	; (800118c <HAL_GPIO_Init+0x2a0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d863      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f52:	4a8f      	ldr	r2, [pc, #572]	; (8001190 <HAL_GPIO_Init+0x2a4>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d046      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f58:	4a8d      	ldr	r2, [pc, #564]	; (8001190 <HAL_GPIO_Init+0x2a4>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d85d      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f5e:	2b12      	cmp	r3, #18
 8000f60:	d82a      	bhi.n	8000fb8 <HAL_GPIO_Init+0xcc>
 8000f62:	2b12      	cmp	r3, #18
 8000f64:	d859      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f66:	a201      	add	r2, pc, #4	; (adr r2, 8000f6c <HAL_GPIO_Init+0x80>)
 8000f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6c:	08000fe7 	.word	0x08000fe7
 8000f70:	08000fc1 	.word	0x08000fc1
 8000f74:	08000fd3 	.word	0x08000fd3
 8000f78:	08001015 	.word	0x08001015
 8000f7c:	0800101b 	.word	0x0800101b
 8000f80:	0800101b 	.word	0x0800101b
 8000f84:	0800101b 	.word	0x0800101b
 8000f88:	0800101b 	.word	0x0800101b
 8000f8c:	0800101b 	.word	0x0800101b
 8000f90:	0800101b 	.word	0x0800101b
 8000f94:	0800101b 	.word	0x0800101b
 8000f98:	0800101b 	.word	0x0800101b
 8000f9c:	0800101b 	.word	0x0800101b
 8000fa0:	0800101b 	.word	0x0800101b
 8000fa4:	0800101b 	.word	0x0800101b
 8000fa8:	0800101b 	.word	0x0800101b
 8000fac:	0800101b 	.word	0x0800101b
 8000fb0:	08000fc9 	.word	0x08000fc9
 8000fb4:	08000fdd 	.word	0x08000fdd
 8000fb8:	4a76      	ldr	r2, [pc, #472]	; (8001194 <HAL_GPIO_Init+0x2a8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fbe:	e02c      	b.n	800101a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	623b      	str	r3, [r7, #32]
          break;
 8000fc6:	e029      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	623b      	str	r3, [r7, #32]
          break;
 8000fd0:	e024      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	623b      	str	r3, [r7, #32]
          break;
 8000fda:	e01f      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	330c      	adds	r3, #12
 8000fe2:	623b      	str	r3, [r7, #32]
          break;
 8000fe4:	e01a      	b.n	800101c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	623b      	str	r3, [r7, #32]
          break;
 8000ff2:	e013      	b.n	800101c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d105      	bne.n	8001008 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	611a      	str	r2, [r3, #16]
          break;
 8001006:	e009      	b.n	800101c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001008:	2308      	movs	r3, #8
 800100a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	615a      	str	r2, [r3, #20]
          break;
 8001012:	e003      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
          break;
 8001018:	e000      	b.n	800101c <HAL_GPIO_Init+0x130>
          break;
 800101a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	2bff      	cmp	r3, #255	; 0xff
 8001020:	d801      	bhi.n	8001026 <HAL_GPIO_Init+0x13a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	e001      	b.n	800102a <HAL_GPIO_Init+0x13e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3304      	adds	r3, #4
 800102a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	2bff      	cmp	r3, #255	; 0xff
 8001030:	d802      	bhi.n	8001038 <HAL_GPIO_Init+0x14c>
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	e002      	b.n	800103e <HAL_GPIO_Init+0x152>
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	3b08      	subs	r3, #8
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	210f      	movs	r1, #15
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	401a      	ands	r2, r3
 8001050:	6a39      	ldr	r1, [r7, #32]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	431a      	orrs	r2, r3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 80a9 	beq.w	80011be <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800106c:	4b4a      	ldr	r3, [pc, #296]	; (8001198 <HAL_GPIO_Init+0x2ac>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a49      	ldr	r2, [pc, #292]	; (8001198 <HAL_GPIO_Init+0x2ac>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b47      	ldr	r3, [pc, #284]	; (8001198 <HAL_GPIO_Init+0x2ac>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001084:	4a45      	ldr	r2, [pc, #276]	; (800119c <HAL_GPIO_Init+0x2b0>)
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a3d      	ldr	r2, [pc, #244]	; (80011a0 <HAL_GPIO_Init+0x2b4>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d00d      	beq.n	80010cc <HAL_GPIO_Init+0x1e0>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a3c      	ldr	r2, [pc, #240]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d007      	beq.n	80010c8 <HAL_GPIO_Init+0x1dc>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a3b      	ldr	r2, [pc, #236]	; (80011a8 <HAL_GPIO_Init+0x2bc>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d101      	bne.n	80010c4 <HAL_GPIO_Init+0x1d8>
 80010c0:	2302      	movs	r3, #2
 80010c2:	e004      	b.n	80010ce <HAL_GPIO_Init+0x1e2>
 80010c4:	2303      	movs	r3, #3
 80010c6:	e002      	b.n	80010ce <HAL_GPIO_Init+0x1e2>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <HAL_GPIO_Init+0x1e2>
 80010cc:	2300      	movs	r3, #0
 80010ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d0:	f002 0203 	and.w	r2, r2, #3
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	4093      	lsls	r3, r2
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010de:	492f      	ldr	r1, [pc, #188]	; (800119c <HAL_GPIO_Init+0x2b0>)
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010f8:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	492b      	ldr	r1, [pc, #172]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	608b      	str	r3, [r1, #8]
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001106:	4b29      	ldr	r3, [pc, #164]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	43db      	mvns	r3, r3
 800110e:	4927      	ldr	r1, [pc, #156]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 8001110:	4013      	ands	r3, r2
 8001112:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	4921      	ldr	r1, [pc, #132]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	60cb      	str	r3, [r1, #12]
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 8001130:	68da      	ldr	r2, [r3, #12]
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	43db      	mvns	r3, r3
 8001136:	491d      	ldr	r1, [pc, #116]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 8001138:	4013      	ands	r3, r2
 800113a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4917      	ldr	r1, [pc, #92]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	43db      	mvns	r3, r3
 800115e:	4913      	ldr	r1, [pc, #76]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 8001160:	4013      	ands	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d01f      	beq.n	80011b0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	490d      	ldr	r1, [pc, #52]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	600b      	str	r3, [r1, #0]
 800117c:	e01f      	b.n	80011be <HAL_GPIO_Init+0x2d2>
 800117e:	bf00      	nop
 8001180:	10320000 	.word	0x10320000
 8001184:	10310000 	.word	0x10310000
 8001188:	10220000 	.word	0x10220000
 800118c:	10210000 	.word	0x10210000
 8001190:	10120000 	.word	0x10120000
 8001194:	10110000 	.word	0x10110000
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	40010800 	.word	0x40010800
 80011a4:	40010c00 	.word	0x40010c00
 80011a8:	40011000 	.word	0x40011000
 80011ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_GPIO_Init+0x2f4>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	4909      	ldr	r1, [pc, #36]	; (80011e0 <HAL_GPIO_Init+0x2f4>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	3301      	adds	r3, #1
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	fa22 f303 	lsr.w	r3, r2, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f47f ae96 	bne.w	8000f00 <HAL_GPIO_Init+0x14>
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	372c      	adds	r7, #44	; 0x2c
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	40010400 	.word	0x40010400

080011e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e272      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 8087 	beq.w	8001312 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001204:	4b92      	ldr	r3, [pc, #584]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 030c 	and.w	r3, r3, #12
 800120c:	2b04      	cmp	r3, #4
 800120e:	d00c      	beq.n	800122a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001210:	4b8f      	ldr	r3, [pc, #572]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b08      	cmp	r3, #8
 800121a:	d112      	bne.n	8001242 <HAL_RCC_OscConfig+0x5e>
 800121c:	4b8c      	ldr	r3, [pc, #560]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001228:	d10b      	bne.n	8001242 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122a:	4b89      	ldr	r3, [pc, #548]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d06c      	beq.n	8001310 <HAL_RCC_OscConfig+0x12c>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d168      	bne.n	8001310 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e24c      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124a:	d106      	bne.n	800125a <HAL_RCC_OscConfig+0x76>
 800124c:	4b80      	ldr	r3, [pc, #512]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a7f      	ldr	r2, [pc, #508]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e02e      	b.n	80012b8 <HAL_RCC_OscConfig+0xd4>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x98>
 8001262:	4b7b      	ldr	r3, [pc, #492]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a7a      	ldr	r2, [pc, #488]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b78      	ldr	r3, [pc, #480]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a77      	ldr	r2, [pc, #476]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001274:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e01d      	b.n	80012b8 <HAL_RCC_OscConfig+0xd4>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0xbc>
 8001286:	4b72      	ldr	r3, [pc, #456]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a71      	ldr	r2, [pc, #452]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b6f      	ldr	r3, [pc, #444]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a6e      	ldr	r2, [pc, #440]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0xd4>
 80012a0:	4b6b      	ldr	r3, [pc, #428]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a6a      	ldr	r2, [pc, #424]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b68      	ldr	r3, [pc, #416]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a67      	ldr	r2, [pc, #412]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc1a 	bl	8000af8 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fc16 	bl	8000af8 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e200      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0xe4>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc06 	bl	8000af8 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fc02 	bl	8000af8 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e1ec      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	4b53      	ldr	r3, [pc, #332]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x10c>
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d063      	beq.n	80013e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800131e:	4b4c      	ldr	r3, [pc, #304]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800132a:	4b49      	ldr	r3, [pc, #292]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b08      	cmp	r3, #8
 8001334:	d11c      	bne.n	8001370 <HAL_RCC_OscConfig+0x18c>
 8001336:	4b46      	ldr	r3, [pc, #280]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d116      	bne.n	8001370 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	4b43      	ldr	r3, [pc, #268]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <HAL_RCC_OscConfig+0x176>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d001      	beq.n	800135a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e1c0      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4939      	ldr	r1, [pc, #228]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	e03a      	b.n	80013e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001378:	4b36      	ldr	r3, [pc, #216]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fbbb 	bl	8000af8 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fbb7 	bl	8000af8 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1a1      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4927      	ldr	r1, [pc, #156]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e015      	b.n	80013e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fb9a 	bl	8000af8 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff fb96 	bl	8000af8 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e180      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d03a      	beq.n	8001468 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d019      	beq.n	800142e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_RCC_OscConfig+0x274>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001400:	f7ff fb7a 	bl	8000af8 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fb76 	bl	8000af8 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e160      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001426:	2001      	movs	r0, #1
 8001428:	f000 face 	bl	80019c8 <RCC_Delay>
 800142c:	e01c      	b.n	8001468 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_RCC_OscConfig+0x274>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001434:	f7ff fb60 	bl	8000af8 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143a:	e00f      	b.n	800145c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff fb5c 	bl	8000af8 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d908      	bls.n	800145c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e146      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	42420000 	.word	0x42420000
 8001458:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145c:	4b92      	ldr	r3, [pc, #584]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1e9      	bne.n	800143c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80a6 	beq.w	80015c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147a:	4b8b      	ldr	r3, [pc, #556]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10d      	bne.n	80014a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4a87      	ldr	r2, [pc, #540]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	61d3      	str	r3, [r2, #28]
 8001492:	4b85      	ldr	r3, [pc, #532]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a2:	4b82      	ldr	r3, [pc, #520]	; (80016ac <HAL_RCC_OscConfig+0x4c8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d118      	bne.n	80014e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ae:	4b7f      	ldr	r3, [pc, #508]	; (80016ac <HAL_RCC_OscConfig+0x4c8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a7e      	ldr	r2, [pc, #504]	; (80016ac <HAL_RCC_OscConfig+0x4c8>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fb1d 	bl	8000af8 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c2:	f7ff fb19 	bl	8000af8 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b64      	cmp	r3, #100	; 0x64
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e103      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	4b75      	ldr	r3, [pc, #468]	; (80016ac <HAL_RCC_OscConfig+0x4c8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d106      	bne.n	80014f6 <HAL_RCC_OscConfig+0x312>
 80014e8:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4a6e      	ldr	r2, [pc, #440]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6213      	str	r3, [r2, #32]
 80014f4:	e02d      	b.n	8001552 <HAL_RCC_OscConfig+0x36e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x334>
 80014fe:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	4a69      	ldr	r2, [pc, #420]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	6213      	str	r3, [r2, #32]
 800150a:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4a66      	ldr	r2, [pc, #408]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001510:	f023 0304 	bic.w	r3, r3, #4
 8001514:	6213      	str	r3, [r2, #32]
 8001516:	e01c      	b.n	8001552 <HAL_RCC_OscConfig+0x36e>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d10c      	bne.n	800153a <HAL_RCC_OscConfig+0x356>
 8001520:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4a60      	ldr	r2, [pc, #384]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6213      	str	r3, [r2, #32]
 800152c:	4b5e      	ldr	r3, [pc, #376]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a5d      	ldr	r2, [pc, #372]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6213      	str	r3, [r2, #32]
 8001538:	e00b      	b.n	8001552 <HAL_RCC_OscConfig+0x36e>
 800153a:	4b5b      	ldr	r3, [pc, #364]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4a5a      	ldr	r2, [pc, #360]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	6213      	str	r3, [r2, #32]
 8001546:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4a57      	ldr	r2, [pc, #348]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	f023 0304 	bic.w	r3, r3, #4
 8001550:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d015      	beq.n	8001586 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff facd 	bl	8000af8 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	e00a      	b.n	8001578 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001562:	f7ff fac9 	bl	8000af8 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001570:	4293      	cmp	r3, r2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e0b1      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001578:	4b4b      	ldr	r3, [pc, #300]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0ee      	beq.n	8001562 <HAL_RCC_OscConfig+0x37e>
 8001584:	e014      	b.n	80015b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001586:	f7ff fab7 	bl	8000af8 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f7ff fab3 	bl	8000af8 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f241 3288 	movw	r2, #5000	; 0x1388
 800159c:	4293      	cmp	r3, r2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e09b      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a4:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ee      	bne.n	800158e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d105      	bne.n	80015c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b6:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	4a3b      	ldr	r2, [pc, #236]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8087 	beq.w	80016da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015cc:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d061      	beq.n	800169c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d146      	bne.n	800166e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e0:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fa87 	bl	8000af8 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff fa83 	bl	8000af8 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e06d      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001600:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f0      	bne.n	80015ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001614:	d108      	bne.n	8001628 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	4921      	ldr	r1, [pc, #132]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a19      	ldr	r1, [r3, #32]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	430b      	orrs	r3, r1
 800163a:	491b      	ldr	r1, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fa57 	bl	8000af8 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fa53 	bl	8000af8 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e03d      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x46a>
 800166c:	e035      	b.n	80016da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fa40 	bl	8000af8 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fa3c 	bl	8000af8 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e026      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x498>
 800169a:	e01e      	b.n	80016da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e019      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40007000 	.word	0x40007000
 80016b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_OscConfig+0x500>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d001      	beq.n	80016da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000

080016e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0d0      	b.n	800189e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b6a      	ldr	r3, [pc, #424]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d910      	bls.n	800172c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b67      	ldr	r3, [pc, #412]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 0207 	bic.w	r2, r3, #7
 8001712:	4965      	ldr	r1, [pc, #404]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0b8      	b.n	800189e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800174e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001766:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001768:	4b50      	ldr	r3, [pc, #320]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	494d      	ldr	r1, [pc, #308]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	4313      	orrs	r3, r2
 8001778:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d040      	beq.n	8001808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d115      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e07f      	b.n	800189e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e073      	b.n	800189e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e06b      	b.n	800189e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c6:	4b39      	ldr	r3, [pc, #228]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f023 0203 	bic.w	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4936      	ldr	r1, [pc, #216]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d8:	f7ff f98e 	bl	8000af8 <HAL_GetTick>
 80017dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e0:	f7ff f98a 	bl	8000af8 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e053      	b.n	800189e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 020c 	and.w	r2, r3, #12
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	429a      	cmp	r2, r3
 8001806:	d1eb      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d210      	bcs.n	8001838 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 0207 	bic.w	r2, r3, #7
 800181e:	4922      	ldr	r1, [pc, #136]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e032      	b.n	800189e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4916      	ldr	r1, [pc, #88]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	4313      	orrs	r3, r2
 8001854:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	4313      	orrs	r3, r2
 8001874:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001876:	f000 f821 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 800187a:	4602      	mov	r2, r0
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	490a      	ldr	r1, [pc, #40]	; (80018b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001888:	5ccb      	ldrb	r3, [r1, r3]
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f8ec 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40022000 	.word	0x40022000
 80018ac:	40021000 	.word	0x40021000
 80018b0:	08003428 	.word	0x08003428
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <HAL_RCC_GetSysClockFreq+0x94>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d002      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x30>
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d003      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x36>
 80018ea:	e027      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ee:	613b      	str	r3, [r7, #16]
      break;
 80018f0:	e027      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	0c9b      	lsrs	r3, r3, #18
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	4a17      	ldr	r2, [pc, #92]	; (8001958 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d010      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_RCC_GetSysClockFreq+0x94>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	0c5b      	lsrs	r3, r3, #17
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	4a11      	ldr	r2, [pc, #68]	; (800195c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001916:	5cd3      	ldrb	r3, [r2, r3]
 8001918:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <HAL_RCC_GetSysClockFreq+0x98>)
 800191e:	fb03 f202 	mul.w	r2, r3, r2
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	fbb2 f3f3 	udiv	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e004      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	613b      	str	r3, [r7, #16]
      break;
 800193a:	e002      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_RCC_GetSysClockFreq+0x98>)
 800193e:	613b      	str	r3, [r7, #16]
      break;
 8001940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001942:	693b      	ldr	r3, [r7, #16]
}
 8001944:	4618      	mov	r0, r3
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	007a1200 	.word	0x007a1200
 8001958:	08003440 	.word	0x08003440
 800195c:	08003450 	.word	0x08003450
 8001960:	003d0900 	.word	0x003d0900

08001964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001968:	4b02      	ldr	r3, [pc, #8]	; (8001974 <HAL_RCC_GetHCLKFreq+0x10>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	20000000 	.word	0x20000000

08001978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800197c:	f7ff fff2 	bl	8001964 <HAL_RCC_GetHCLKFreq>
 8001980:	4602      	mov	r2, r0
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	4903      	ldr	r1, [pc, #12]	; (800199c <HAL_RCC_GetPCLK1Freq+0x24>)
 800198e:	5ccb      	ldrb	r3, [r1, r3]
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021000 	.word	0x40021000
 800199c:	08003438 	.word	0x08003438

080019a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019a4:	f7ff ffde 	bl	8001964 <HAL_RCC_GetHCLKFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	0adb      	lsrs	r3, r3, #11
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	4903      	ldr	r1, [pc, #12]	; (80019c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	08003438 	.word	0x08003438

080019c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <RCC_Delay+0x34>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <RCC_Delay+0x38>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	0a5b      	lsrs	r3, r3, #9
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019e4:	bf00      	nop
  }
  while (Delay --);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1e5a      	subs	r2, r3, #1
 80019ea:	60fa      	str	r2, [r7, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f9      	bne.n	80019e4 <RCC_Delay+0x1c>
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	20000000 	.word	0x20000000
 8001a00:	10624dd3 	.word	0x10624dd3

08001a04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e042      	b.n	8001a9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe fee4 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2224      	movs	r2, #36	; 0x24
 8001a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fefd 	bl	8002848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e04a      	b.n	8001b4c <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7fe fe94 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2224      	movs	r2, #36	; 0x24
 8001ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fead 	bl	8002848 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001b0c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0208 	orr.w	r2, r2, #8
 8001b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	4613      	mov	r3, r2
 8001b62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	d16d      	bne.n	8001c50 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <HAL_UART_Transmit+0x2c>
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e066      	b.n	8001c52 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2221      	movs	r2, #33	; 0x21
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b92:	f7fe ffb1 	bl	8000af8 <HAL_GetTick>
 8001b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	88fa      	ldrh	r2, [r7, #6]
 8001b9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	88fa      	ldrh	r2, [r7, #6]
 8001ba2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bac:	d108      	bne.n	8001bc0 <HAL_UART_Transmit+0x6c>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d104      	bne.n	8001bc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	61bb      	str	r3, [r7, #24]
 8001bbe:	e003      	b.n	8001bc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001bc8:	e02a      	b.n	8001c20 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2180      	movs	r1, #128	; 0x80
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fc2d 	bl	8002434 <UART_WaitOnFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e036      	b.n	8001c52 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10b      	bne.n	8001c02 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	e007      	b.n	8001c12 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	781a      	ldrb	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1cf      	bne.n	8001bca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2200      	movs	r2, #0
 8001c32:	2140      	movs	r1, #64	; 0x40
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 fbfd 	bl	8002434 <UART_WaitOnFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e006      	b.n	8001c52 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e000      	b.n	8001c52 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001c50:	2302      	movs	r3, #2
  }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3720      	adds	r7, #32
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b08a      	sub	sp, #40	; 0x28
 8001c5e:	af02      	add	r7, sp, #8
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4613      	mov	r3, r2
 8001c68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d17c      	bne.n	8001d74 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_UART_Receive+0x2c>
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e075      	b.n	8001d76 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2222      	movs	r2, #34	; 0x22
 8001c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c9e:	f7fe ff2b 	bl	8000af8 <HAL_GetTick>
 8001ca2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	88fa      	ldrh	r2, [r7, #6]
 8001ca8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	88fa      	ldrh	r2, [r7, #6]
 8001cae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb8:	d108      	bne.n	8001ccc <HAL_UART_Receive+0x72>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d104      	bne.n	8001ccc <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	e003      	b.n	8001cd4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001cd4:	e043      	b.n	8001d5e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2120      	movs	r1, #32
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 fba7 	bl	8002434 <UART_WaitOnFlagUntilTimeout>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e042      	b.n	8001d76 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10c      	bne.n	8001d10 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	e01f      	b.n	8001d50 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d18:	d007      	beq.n	8001d2a <HAL_UART_Receive+0xd0>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10a      	bne.n	8001d38 <HAL_UART_Receive+0xde>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	701a      	strb	r2, [r3, #0]
 8001d36:	e008      	b.n	8001d4a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1b6      	bne.n	8001cd6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e000      	b.n	8001d76 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d74:	2302      	movs	r3, #2
  }
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3720      	adds	r7, #32
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b09a      	sub	sp, #104	; 0x68
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	330c      	adds	r3, #12
 8001d8c:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d90:	e853 3f00 	ldrex	r3, [r3]
 8001d94:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8001d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	330c      	adds	r3, #12
 8001da4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001da6:	657a      	str	r2, [r7, #84]	; 0x54
 8001da8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001daa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001dac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dae:	e841 2300 	strex	r3, r2, [r1]
 8001db2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8001db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1e5      	bne.n	8001d86 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3314      	adds	r3, #20
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc4:	e853 3f00 	ldrex	r3, [r3]
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	663b      	str	r3, [r7, #96]	; 0x60
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	3314      	adds	r3, #20
 8001dd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dda:	643a      	str	r2, [r7, #64]	; 0x40
 8001ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001de0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001de2:	e841 2300 	strex	r3, r2, [r1]
 8001de6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1e5      	bne.n	8001dba <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d119      	bne.n	8001e2a <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	330c      	adds	r3, #12
 8001dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	e853 3f00 	ldrex	r3, [r3]
 8001e04:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f023 0310 	bic.w	r3, r3, #16
 8001e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	330c      	adds	r3, #12
 8001e14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e1e:	e841 2300 	strex	r3, r2, [r1]
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1e5      	bne.n	8001df6 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d036      	beq.n	8001ea6 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	3314      	adds	r3, #20
 8001e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	e853 3f00 	ldrex	r3, [r3]
 8001e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3314      	adds	r3, #20
 8001e56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e58:	61ba      	str	r2, [r7, #24]
 8001e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e5c:	6979      	ldr	r1, [r7, #20]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	e841 2300 	strex	r3, r2, [r1]
 8001e64:	613b      	str	r3, [r7, #16]
   return(result);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1e5      	bne.n	8001e38 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d018      	beq.n	8001ea6 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e78:	2200      	movs	r2, #0
 8001e7a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe ff74 	bl	8000d6e <HAL_DMA_Abort>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00c      	beq.n	8001ea6 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff f81f 	bl	8000ed4 <HAL_DMA_GetError>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	d104      	bne.n	8001ea6 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2210      	movs	r2, #16
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e00a      	b.n	8001ebc <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3768      	adds	r7, #104	; 0x68
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b0ba      	sub	sp, #232	; 0xe8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001f02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10f      	bne.n	8001f2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f0e:	f003 0320 	and.w	r3, r3, #32
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <HAL_UART_IRQHandler+0x66>
 8001f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fbd1 	bl	80026ca <UART_Receive_IT>
      return;
 8001f28:	e25b      	b.n	80023e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80de 	beq.w	80020f0 <HAL_UART_IRQHandler+0x22c>
 8001f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d106      	bne.n	8001f4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80d1 	beq.w	80020f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00b      	beq.n	8001f72 <HAL_UART_IRQHandler+0xae>
 8001f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f043 0201 	orr.w	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_UART_IRQHandler+0xd2>
 8001f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f043 0202 	orr.w	r2, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_UART_IRQHandler+0xf6>
 8001fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f043 0204 	orr.w	r2, r3, #4
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d011      	beq.n	8001fea <HAL_UART_IRQHandler+0x126>
 8001fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d105      	bne.n	8001fde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f043 0208 	orr.w	r2, r3, #8
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 81f2 	beq.w	80023d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_UART_IRQHandler+0x14e>
 8002000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 fb5c 	bl	80026ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf14      	ite	ne
 8002020:	2301      	movne	r3, #1
 8002022:	2300      	moveq	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <HAL_UART_IRQHandler+0x17a>
 8002036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800203a:	2b00      	cmp	r3, #0
 800203c:	d04f      	beq.n	80020de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fa66 	bl	8002510 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d041      	beq.n	80020d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3314      	adds	r3, #20
 8002058:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800205c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002060:	e853 3f00 	ldrex	r3, [r3]
 8002064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002068:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800206c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3314      	adds	r3, #20
 800207a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800207e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002082:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002086:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800208a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800208e:	e841 2300 	strex	r3, r2, [r1]
 8002092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1d9      	bne.n	8002052 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d013      	beq.n	80020ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020aa:	4a7e      	ldr	r2, [pc, #504]	; (80022a4 <HAL_UART_IRQHandler+0x3e0>)
 80020ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fe96 	bl	8000de4 <HAL_DMA_Abort_IT>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d016      	beq.n	80020ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020c8:	4610      	mov	r0, r2
 80020ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020cc:	e00e      	b.n	80020ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f99c 	bl	800240c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020d4:	e00a      	b.n	80020ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f998 	bl	800240c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020dc:	e006      	b.n	80020ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f994 	bl	800240c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80020ea:	e175      	b.n	80023d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ec:	bf00      	nop
    return;
 80020ee:	e173      	b.n	80023d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	f040 814f 	bne.w	8002398 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80020fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8148 	beq.w	8002398 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8141 	beq.w	8002398 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80b6 	beq.w	80022a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002148:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 8145 	beq.w	80023dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002156:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800215a:	429a      	cmp	r2, r3
 800215c:	f080 813e 	bcs.w	80023dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002166:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b20      	cmp	r3, #32
 8002170:	f000 8088 	beq.w	8002284 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	330c      	adds	r3, #12
 800217a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800217e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002182:	e853 3f00 	ldrex	r3, [r3]
 8002186:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800218a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800218e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002192:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	330c      	adds	r3, #12
 800219c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80021a0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80021ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021b0:	e841 2300 	strex	r3, r2, [r1]
 80021b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80021b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1d9      	bne.n	8002174 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3314      	adds	r3, #20
 80021c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ca:	e853 3f00 	ldrex	r3, [r3]
 80021ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80021d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3314      	adds	r3, #20
 80021e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80021e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80021ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80021f0:	e841 2300 	strex	r3, r2, [r1]
 80021f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80021f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1e1      	bne.n	80021c0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3314      	adds	r3, #20
 8002202:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002206:	e853 3f00 	ldrex	r3, [r3]
 800220a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800220c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800220e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002212:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3314      	adds	r3, #20
 800221c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002220:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002222:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002224:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002226:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002228:	e841 2300 	strex	r3, r2, [r1]
 800222c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800222e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1e3      	bne.n	80021fc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	330c      	adds	r3, #12
 8002248:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800224a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800224c:	e853 3f00 	ldrex	r3, [r3]
 8002250:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002254:	f023 0310 	bic.w	r3, r3, #16
 8002258:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	330c      	adds	r3, #12
 8002262:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002266:	65ba      	str	r2, [r7, #88]	; 0x58
 8002268:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800226a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800226c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800226e:	e841 2300 	strex	r3, r2, [r1]
 8002272:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1e3      	bne.n	8002242 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fd75 	bl	8000d6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002292:	b29b      	uxth	r3, r3
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	b29b      	uxth	r3, r3
 8002298:	4619      	mov	r1, r3
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f8bf 	bl	800241e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022a0:	e09c      	b.n	80023dc <HAL_UART_IRQHandler+0x518>
 80022a2:	bf00      	nop
 80022a4:	080025d5 	.word	0x080025d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 808e 	beq.w	80023e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80022c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8089 	beq.w	80023e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	330c      	adds	r3, #12
 80022d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d8:	e853 3f00 	ldrex	r3, [r3]
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80022de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80022e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	330c      	adds	r3, #12
 80022ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80022f2:	647a      	str	r2, [r7, #68]	; 0x44
 80022f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80022f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022fa:	e841 2300 	strex	r3, r2, [r1]
 80022fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1e3      	bne.n	80022ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	3314      	adds	r3, #20
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	e853 3f00 	ldrex	r3, [r3]
 8002314:	623b      	str	r3, [r7, #32]
   return(result);
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3314      	adds	r3, #20
 8002326:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800232a:	633a      	str	r2, [r7, #48]	; 0x30
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002332:	e841 2300 	strex	r3, r2, [r1]
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1e3      	bne.n	8002306 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	330c      	adds	r3, #12
 8002352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	e853 3f00 	ldrex	r3, [r3]
 800235a:	60fb      	str	r3, [r7, #12]
   return(result);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0310 	bic.w	r3, r3, #16
 8002362:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	330c      	adds	r3, #12
 800236c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002370:	61fa      	str	r2, [r7, #28]
 8002372:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002374:	69b9      	ldr	r1, [r7, #24]
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	e841 2300 	strex	r3, r2, [r1]
 800237c:	617b      	str	r3, [r7, #20]
   return(result);
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1e3      	bne.n	800234c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800238a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800238e:	4619      	mov	r1, r3
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f844 	bl	800241e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002396:	e023      	b.n	80023e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800239c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d009      	beq.n	80023b8 <HAL_UART_IRQHandler+0x4f4>
 80023a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f923 	bl	80025fc <UART_Transmit_IT>
    return;
 80023b6:	e014      	b.n	80023e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00e      	beq.n	80023e2 <HAL_UART_IRQHandler+0x51e>
 80023c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f962 	bl	800269a <UART_EndTransmit_IT>
    return;
 80023d6:	e004      	b.n	80023e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80023d8:	bf00      	nop
 80023da:	e002      	b.n	80023e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80023dc:	bf00      	nop
 80023de:	e000      	b.n	80023e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80023e0:	bf00      	nop
  }
}
 80023e2:	37e8      	adds	r7, #232	; 0xe8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr

0800241e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	460b      	mov	r3, r1
 8002428:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b090      	sub	sp, #64	; 0x40
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	4613      	mov	r3, r2
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002444:	e050      	b.n	80024e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d04c      	beq.n	80024e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800244e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <UART_WaitOnFlagUntilTimeout+0x30>
 8002454:	f7fe fb50 	bl	8000af8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002460:	429a      	cmp	r2, r3
 8002462:	d241      	bcs.n	80024e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	330c      	adds	r3, #12
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246e:	e853 3f00 	ldrex	r3, [r3]
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800247a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	330c      	adds	r3, #12
 8002482:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002484:	637a      	str	r2, [r7, #52]	; 0x34
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800248a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800248c:	e841 2300 	strex	r3, r2, [r1]
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e5      	bne.n	8002464 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3314      	adds	r3, #20
 800249e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	e853 3f00 	ldrex	r3, [r3]
 80024a6:	613b      	str	r3, [r7, #16]
   return(result);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f023 0301 	bic.w	r3, r3, #1
 80024ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3314      	adds	r3, #20
 80024b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024b8:	623a      	str	r2, [r7, #32]
 80024ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024bc:	69f9      	ldr	r1, [r7, #28]
 80024be:	6a3a      	ldr	r2, [r7, #32]
 80024c0:	e841 2300 	strex	r3, r2, [r1]
 80024c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e5      	bne.n	8002498 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e00f      	b.n	8002508 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4013      	ands	r3, r2
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	bf0c      	ite	eq
 80024f8:	2301      	moveq	r3, #1
 80024fa:	2300      	movne	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	429a      	cmp	r2, r3
 8002504:	d09f      	beq.n	8002446 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3740      	adds	r7, #64	; 0x40
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002510:	b480      	push	{r7}
 8002512:	b095      	sub	sp, #84	; 0x54
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	330c      	adds	r3, #12
 800251e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002522:	e853 3f00 	ldrex	r3, [r3]
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800252e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	330c      	adds	r3, #12
 8002536:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002538:	643a      	str	r2, [r7, #64]	; 0x40
 800253a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800253e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002540:	e841 2300 	strex	r3, r2, [r1]
 8002544:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1e5      	bne.n	8002518 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3314      	adds	r3, #20
 8002552:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	e853 3f00 	ldrex	r3, [r3]
 800255a:	61fb      	str	r3, [r7, #28]
   return(result);
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	64bb      	str	r3, [r7, #72]	; 0x48
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3314      	adds	r3, #20
 800256a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800256c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002574:	e841 2300 	strex	r3, r2, [r1]
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1e5      	bne.n	800254c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	2b01      	cmp	r3, #1
 8002586:	d119      	bne.n	80025bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	330c      	adds	r3, #12
 800258e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	e853 3f00 	ldrex	r3, [r3]
 8002596:	60bb      	str	r3, [r7, #8]
   return(result);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f023 0310 	bic.w	r3, r3, #16
 800259e:	647b      	str	r3, [r7, #68]	; 0x44
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	330c      	adds	r3, #12
 80025a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025a8:	61ba      	str	r2, [r7, #24]
 80025aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ac:	6979      	ldr	r1, [r7, #20]
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	e841 2300 	strex	r3, r2, [r1]
 80025b4:	613b      	str	r3, [r7, #16]
   return(result);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1e5      	bne.n	8002588 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025ca:	bf00      	nop
 80025cc:	3754      	adds	r7, #84	; 0x54
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f7ff ff0c 	bl	800240c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b21      	cmp	r3, #33	; 0x21
 800260e:	d13e      	bne.n	800268e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002618:	d114      	bne.n	8002644 <UART_Transmit_IT+0x48>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d110      	bne.n	8002644 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002636:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	1c9a      	adds	r2, r3, #2
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	621a      	str	r2, [r3, #32]
 8002642:	e008      	b.n	8002656 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	1c59      	adds	r1, r3, #1
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6211      	str	r1, [r2, #32]
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29b      	uxth	r3, r3
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	4619      	mov	r1, r3
 8002664:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10f      	bne.n	800268a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002678:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002688:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800268e:	2302      	movs	r3, #2
  }
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fe94 	bl	80023e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b08c      	sub	sp, #48	; 0x30
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b22      	cmp	r3, #34	; 0x22
 80026dc:	f040 80ae 	bne.w	800283c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e8:	d117      	bne.n	800271a <UART_Receive_IT+0x50>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d113      	bne.n	800271a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	b29b      	uxth	r3, r3
 8002704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002708:	b29a      	uxth	r2, r3
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	1c9a      	adds	r2, r3, #2
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	629a      	str	r2, [r3, #40]	; 0x28
 8002718:	e026      	b.n	8002768 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002720:	2300      	movs	r3, #0
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272c:	d007      	beq.n	800273e <UART_Receive_IT+0x74>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10a      	bne.n	800274c <UART_Receive_IT+0x82>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	701a      	strb	r2, [r3, #0]
 800274a:	e008      	b.n	800275e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002758:	b2da      	uxtb	r2, r3
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800276c:	b29b      	uxth	r3, r3
 800276e:	3b01      	subs	r3, #1
 8002770:	b29b      	uxth	r3, r3
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4619      	mov	r1, r3
 8002776:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002778:	2b00      	cmp	r3, #0
 800277a:	d15d      	bne.n	8002838 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0220 	bic.w	r2, r2, #32
 800278a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800279a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d135      	bne.n	800282e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	330c      	adds	r3, #12
 80027ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	e853 3f00 	ldrex	r3, [r3]
 80027d6:	613b      	str	r3, [r7, #16]
   return(result);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f023 0310 	bic.w	r3, r3, #16
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	330c      	adds	r3, #12
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	623a      	str	r2, [r7, #32]
 80027ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ec:	69f9      	ldr	r1, [r7, #28]
 80027ee:	6a3a      	ldr	r2, [r7, #32]
 80027f0:	e841 2300 	strex	r3, r2, [r1]
 80027f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e5      	bne.n	80027c8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	2b10      	cmp	r3, #16
 8002808:	d10a      	bne.n	8002820 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002824:	4619      	mov	r1, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff fdf9 	bl	800241e <HAL_UARTEx_RxEventCallback>
 800282c:	e002      	b.n	8002834 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff fde3 	bl	80023fa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e002      	b.n	800283e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	e000      	b.n	800283e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800283c:	2302      	movs	r3, #2
  }
}
 800283e:	4618      	mov	r0, r3
 8002840:	3730      	adds	r7, #48	; 0x30
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002882:	f023 030c 	bic.w	r3, r3, #12
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	430b      	orrs	r3, r1
 800288e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a2c      	ldr	r2, [pc, #176]	; (800295c <UART_SetConfig+0x114>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d103      	bne.n	80028b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028b0:	f7ff f876 	bl	80019a0 <HAL_RCC_GetPCLK2Freq>
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	e002      	b.n	80028be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028b8:	f7ff f85e 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 80028bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	009a      	lsls	r2, r3, #2
 80028c8:	441a      	add	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	4a22      	ldr	r2, [pc, #136]	; (8002960 <UART_SetConfig+0x118>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	0119      	lsls	r1, r3, #4
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	009a      	lsls	r2, r3, #2
 80028e8:	441a      	add	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028f4:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <UART_SetConfig+0x118>)
 80028f6:	fba3 0302 	umull	r0, r3, r3, r2
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2064      	movs	r0, #100	; 0x64
 80028fe:	fb00 f303 	mul.w	r3, r0, r3
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	3332      	adds	r3, #50	; 0x32
 8002908:	4a15      	ldr	r2, [pc, #84]	; (8002960 <UART_SetConfig+0x118>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002914:	4419      	add	r1, r3
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	009a      	lsls	r2, r3, #2
 8002920:	441a      	add	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	fbb2 f2f3 	udiv	r2, r2, r3
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <UART_SetConfig+0x118>)
 800292e:	fba3 0302 	umull	r0, r3, r3, r2
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2064      	movs	r0, #100	; 0x64
 8002936:	fb00 f303 	mul.w	r3, r0, r3
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	3332      	adds	r3, #50	; 0x32
 8002940:	4a07      	ldr	r2, [pc, #28]	; (8002960 <UART_SetConfig+0x118>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	f003 020f 	and.w	r2, r3, #15
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	440a      	add	r2, r1
 8002952:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40013800 	.word	0x40013800
 8002960:	51eb851f 	.word	0x51eb851f

08002964 <siprintf>:
 8002964:	b40e      	push	{r1, r2, r3}
 8002966:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800296a:	b500      	push	{lr}
 800296c:	b09c      	sub	sp, #112	; 0x70
 800296e:	ab1d      	add	r3, sp, #116	; 0x74
 8002970:	9002      	str	r0, [sp, #8]
 8002972:	9006      	str	r0, [sp, #24]
 8002974:	9107      	str	r1, [sp, #28]
 8002976:	9104      	str	r1, [sp, #16]
 8002978:	4808      	ldr	r0, [pc, #32]	; (800299c <siprintf+0x38>)
 800297a:	4909      	ldr	r1, [pc, #36]	; (80029a0 <siprintf+0x3c>)
 800297c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002980:	9105      	str	r1, [sp, #20]
 8002982:	6800      	ldr	r0, [r0, #0]
 8002984:	a902      	add	r1, sp, #8
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	f000 f99c 	bl	8002cc4 <_svfiprintf_r>
 800298c:	2200      	movs	r2, #0
 800298e:	9b02      	ldr	r3, [sp, #8]
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	b01c      	add	sp, #112	; 0x70
 8002994:	f85d eb04 	ldr.w	lr, [sp], #4
 8002998:	b003      	add	sp, #12
 800299a:	4770      	bx	lr
 800299c:	20000058 	.word	0x20000058
 80029a0:	ffff0208 	.word	0xffff0208

080029a4 <memset>:
 80029a4:	4603      	mov	r3, r0
 80029a6:	4402      	add	r2, r0
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d100      	bne.n	80029ae <memset+0xa>
 80029ac:	4770      	bx	lr
 80029ae:	f803 1b01 	strb.w	r1, [r3], #1
 80029b2:	e7f9      	b.n	80029a8 <memset+0x4>

080029b4 <__errno>:
 80029b4:	4b01      	ldr	r3, [pc, #4]	; (80029bc <__errno+0x8>)
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20000058 	.word	0x20000058

080029c0 <__libc_init_array>:
 80029c0:	b570      	push	{r4, r5, r6, lr}
 80029c2:	2600      	movs	r6, #0
 80029c4:	4d0c      	ldr	r5, [pc, #48]	; (80029f8 <__libc_init_array+0x38>)
 80029c6:	4c0d      	ldr	r4, [pc, #52]	; (80029fc <__libc_init_array+0x3c>)
 80029c8:	1b64      	subs	r4, r4, r5
 80029ca:	10a4      	asrs	r4, r4, #2
 80029cc:	42a6      	cmp	r6, r4
 80029ce:	d109      	bne.n	80029e4 <__libc_init_array+0x24>
 80029d0:	f000 fc7a 	bl	80032c8 <_init>
 80029d4:	2600      	movs	r6, #0
 80029d6:	4d0a      	ldr	r5, [pc, #40]	; (8002a00 <__libc_init_array+0x40>)
 80029d8:	4c0a      	ldr	r4, [pc, #40]	; (8002a04 <__libc_init_array+0x44>)
 80029da:	1b64      	subs	r4, r4, r5
 80029dc:	10a4      	asrs	r4, r4, #2
 80029de:	42a6      	cmp	r6, r4
 80029e0:	d105      	bne.n	80029ee <__libc_init_array+0x2e>
 80029e2:	bd70      	pop	{r4, r5, r6, pc}
 80029e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e8:	4798      	blx	r3
 80029ea:	3601      	adds	r6, #1
 80029ec:	e7ee      	b.n	80029cc <__libc_init_array+0xc>
 80029ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f2:	4798      	blx	r3
 80029f4:	3601      	adds	r6, #1
 80029f6:	e7f2      	b.n	80029de <__libc_init_array+0x1e>
 80029f8:	08003488 	.word	0x08003488
 80029fc:	08003488 	.word	0x08003488
 8002a00:	08003488 	.word	0x08003488
 8002a04:	0800348c 	.word	0x0800348c

08002a08 <__retarget_lock_acquire_recursive>:
 8002a08:	4770      	bx	lr

08002a0a <__retarget_lock_release_recursive>:
 8002a0a:	4770      	bx	lr

08002a0c <memcpy>:
 8002a0c:	440a      	add	r2, r1
 8002a0e:	4291      	cmp	r1, r2
 8002a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a14:	d100      	bne.n	8002a18 <memcpy+0xc>
 8002a16:	4770      	bx	lr
 8002a18:	b510      	push	{r4, lr}
 8002a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a1e:	4291      	cmp	r1, r2
 8002a20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a24:	d1f9      	bne.n	8002a1a <memcpy+0xe>
 8002a26:	bd10      	pop	{r4, pc}

08002a28 <_free_r>:
 8002a28:	b538      	push	{r3, r4, r5, lr}
 8002a2a:	4605      	mov	r5, r0
 8002a2c:	2900      	cmp	r1, #0
 8002a2e:	d040      	beq.n	8002ab2 <_free_r+0x8a>
 8002a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a34:	1f0c      	subs	r4, r1, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bfb8      	it	lt
 8002a3a:	18e4      	addlt	r4, r4, r3
 8002a3c:	f000 f8dc 	bl	8002bf8 <__malloc_lock>
 8002a40:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <_free_r+0x8c>)
 8002a42:	6813      	ldr	r3, [r2, #0]
 8002a44:	b933      	cbnz	r3, 8002a54 <_free_r+0x2c>
 8002a46:	6063      	str	r3, [r4, #4]
 8002a48:	6014      	str	r4, [r2, #0]
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a50:	f000 b8d8 	b.w	8002c04 <__malloc_unlock>
 8002a54:	42a3      	cmp	r3, r4
 8002a56:	d908      	bls.n	8002a6a <_free_r+0x42>
 8002a58:	6820      	ldr	r0, [r4, #0]
 8002a5a:	1821      	adds	r1, r4, r0
 8002a5c:	428b      	cmp	r3, r1
 8002a5e:	bf01      	itttt	eq
 8002a60:	6819      	ldreq	r1, [r3, #0]
 8002a62:	685b      	ldreq	r3, [r3, #4]
 8002a64:	1809      	addeq	r1, r1, r0
 8002a66:	6021      	streq	r1, [r4, #0]
 8002a68:	e7ed      	b.n	8002a46 <_free_r+0x1e>
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	b10b      	cbz	r3, 8002a74 <_free_r+0x4c>
 8002a70:	42a3      	cmp	r3, r4
 8002a72:	d9fa      	bls.n	8002a6a <_free_r+0x42>
 8002a74:	6811      	ldr	r1, [r2, #0]
 8002a76:	1850      	adds	r0, r2, r1
 8002a78:	42a0      	cmp	r0, r4
 8002a7a:	d10b      	bne.n	8002a94 <_free_r+0x6c>
 8002a7c:	6820      	ldr	r0, [r4, #0]
 8002a7e:	4401      	add	r1, r0
 8002a80:	1850      	adds	r0, r2, r1
 8002a82:	4283      	cmp	r3, r0
 8002a84:	6011      	str	r1, [r2, #0]
 8002a86:	d1e0      	bne.n	8002a4a <_free_r+0x22>
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4408      	add	r0, r1
 8002a8e:	6010      	str	r0, [r2, #0]
 8002a90:	6053      	str	r3, [r2, #4]
 8002a92:	e7da      	b.n	8002a4a <_free_r+0x22>
 8002a94:	d902      	bls.n	8002a9c <_free_r+0x74>
 8002a96:	230c      	movs	r3, #12
 8002a98:	602b      	str	r3, [r5, #0]
 8002a9a:	e7d6      	b.n	8002a4a <_free_r+0x22>
 8002a9c:	6820      	ldr	r0, [r4, #0]
 8002a9e:	1821      	adds	r1, r4, r0
 8002aa0:	428b      	cmp	r3, r1
 8002aa2:	bf01      	itttt	eq
 8002aa4:	6819      	ldreq	r1, [r3, #0]
 8002aa6:	685b      	ldreq	r3, [r3, #4]
 8002aa8:	1809      	addeq	r1, r1, r0
 8002aaa:	6021      	streq	r1, [r4, #0]
 8002aac:	6063      	str	r3, [r4, #4]
 8002aae:	6054      	str	r4, [r2, #4]
 8002ab0:	e7cb      	b.n	8002a4a <_free_r+0x22>
 8002ab2:	bd38      	pop	{r3, r4, r5, pc}
 8002ab4:	20000318 	.word	0x20000318

08002ab8 <sbrk_aligned>:
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	4e0e      	ldr	r6, [pc, #56]	; (8002af4 <sbrk_aligned+0x3c>)
 8002abc:	460c      	mov	r4, r1
 8002abe:	6831      	ldr	r1, [r6, #0]
 8002ac0:	4605      	mov	r5, r0
 8002ac2:	b911      	cbnz	r1, 8002aca <sbrk_aligned+0x12>
 8002ac4:	f000 fbaa 	bl	800321c <_sbrk_r>
 8002ac8:	6030      	str	r0, [r6, #0]
 8002aca:	4621      	mov	r1, r4
 8002acc:	4628      	mov	r0, r5
 8002ace:	f000 fba5 	bl	800321c <_sbrk_r>
 8002ad2:	1c43      	adds	r3, r0, #1
 8002ad4:	d00a      	beq.n	8002aec <sbrk_aligned+0x34>
 8002ad6:	1cc4      	adds	r4, r0, #3
 8002ad8:	f024 0403 	bic.w	r4, r4, #3
 8002adc:	42a0      	cmp	r0, r4
 8002ade:	d007      	beq.n	8002af0 <sbrk_aligned+0x38>
 8002ae0:	1a21      	subs	r1, r4, r0
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f000 fb9a 	bl	800321c <_sbrk_r>
 8002ae8:	3001      	adds	r0, #1
 8002aea:	d101      	bne.n	8002af0 <sbrk_aligned+0x38>
 8002aec:	f04f 34ff 	mov.w	r4, #4294967295
 8002af0:	4620      	mov	r0, r4
 8002af2:	bd70      	pop	{r4, r5, r6, pc}
 8002af4:	2000031c 	.word	0x2000031c

08002af8 <_malloc_r>:
 8002af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002afc:	1ccd      	adds	r5, r1, #3
 8002afe:	f025 0503 	bic.w	r5, r5, #3
 8002b02:	3508      	adds	r5, #8
 8002b04:	2d0c      	cmp	r5, #12
 8002b06:	bf38      	it	cc
 8002b08:	250c      	movcc	r5, #12
 8002b0a:	2d00      	cmp	r5, #0
 8002b0c:	4607      	mov	r7, r0
 8002b0e:	db01      	blt.n	8002b14 <_malloc_r+0x1c>
 8002b10:	42a9      	cmp	r1, r5
 8002b12:	d905      	bls.n	8002b20 <_malloc_r+0x28>
 8002b14:	230c      	movs	r3, #12
 8002b16:	2600      	movs	r6, #0
 8002b18:	603b      	str	r3, [r7, #0]
 8002b1a:	4630      	mov	r0, r6
 8002b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002bf4 <_malloc_r+0xfc>
 8002b24:	f000 f868 	bl	8002bf8 <__malloc_lock>
 8002b28:	f8d8 3000 	ldr.w	r3, [r8]
 8002b2c:	461c      	mov	r4, r3
 8002b2e:	bb5c      	cbnz	r4, 8002b88 <_malloc_r+0x90>
 8002b30:	4629      	mov	r1, r5
 8002b32:	4638      	mov	r0, r7
 8002b34:	f7ff ffc0 	bl	8002ab8 <sbrk_aligned>
 8002b38:	1c43      	adds	r3, r0, #1
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	d155      	bne.n	8002bea <_malloc_r+0xf2>
 8002b3e:	f8d8 4000 	ldr.w	r4, [r8]
 8002b42:	4626      	mov	r6, r4
 8002b44:	2e00      	cmp	r6, #0
 8002b46:	d145      	bne.n	8002bd4 <_malloc_r+0xdc>
 8002b48:	2c00      	cmp	r4, #0
 8002b4a:	d048      	beq.n	8002bde <_malloc_r+0xe6>
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	4631      	mov	r1, r6
 8002b50:	4638      	mov	r0, r7
 8002b52:	eb04 0903 	add.w	r9, r4, r3
 8002b56:	f000 fb61 	bl	800321c <_sbrk_r>
 8002b5a:	4581      	cmp	r9, r0
 8002b5c:	d13f      	bne.n	8002bde <_malloc_r+0xe6>
 8002b5e:	6821      	ldr	r1, [r4, #0]
 8002b60:	4638      	mov	r0, r7
 8002b62:	1a6d      	subs	r5, r5, r1
 8002b64:	4629      	mov	r1, r5
 8002b66:	f7ff ffa7 	bl	8002ab8 <sbrk_aligned>
 8002b6a:	3001      	adds	r0, #1
 8002b6c:	d037      	beq.n	8002bde <_malloc_r+0xe6>
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	442b      	add	r3, r5
 8002b72:	6023      	str	r3, [r4, #0]
 8002b74:	f8d8 3000 	ldr.w	r3, [r8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d038      	beq.n	8002bee <_malloc_r+0xf6>
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	42a2      	cmp	r2, r4
 8002b80:	d12b      	bne.n	8002bda <_malloc_r+0xe2>
 8002b82:	2200      	movs	r2, #0
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	e00f      	b.n	8002ba8 <_malloc_r+0xb0>
 8002b88:	6822      	ldr	r2, [r4, #0]
 8002b8a:	1b52      	subs	r2, r2, r5
 8002b8c:	d41f      	bmi.n	8002bce <_malloc_r+0xd6>
 8002b8e:	2a0b      	cmp	r2, #11
 8002b90:	d917      	bls.n	8002bc2 <_malloc_r+0xca>
 8002b92:	1961      	adds	r1, r4, r5
 8002b94:	42a3      	cmp	r3, r4
 8002b96:	6025      	str	r5, [r4, #0]
 8002b98:	bf18      	it	ne
 8002b9a:	6059      	strne	r1, [r3, #4]
 8002b9c:	6863      	ldr	r3, [r4, #4]
 8002b9e:	bf08      	it	eq
 8002ba0:	f8c8 1000 	streq.w	r1, [r8]
 8002ba4:	5162      	str	r2, [r4, r5]
 8002ba6:	604b      	str	r3, [r1, #4]
 8002ba8:	4638      	mov	r0, r7
 8002baa:	f104 060b 	add.w	r6, r4, #11
 8002bae:	f000 f829 	bl	8002c04 <__malloc_unlock>
 8002bb2:	f026 0607 	bic.w	r6, r6, #7
 8002bb6:	1d23      	adds	r3, r4, #4
 8002bb8:	1af2      	subs	r2, r6, r3
 8002bba:	d0ae      	beq.n	8002b1a <_malloc_r+0x22>
 8002bbc:	1b9b      	subs	r3, r3, r6
 8002bbe:	50a3      	str	r3, [r4, r2]
 8002bc0:	e7ab      	b.n	8002b1a <_malloc_r+0x22>
 8002bc2:	42a3      	cmp	r3, r4
 8002bc4:	6862      	ldr	r2, [r4, #4]
 8002bc6:	d1dd      	bne.n	8002b84 <_malloc_r+0x8c>
 8002bc8:	f8c8 2000 	str.w	r2, [r8]
 8002bcc:	e7ec      	b.n	8002ba8 <_malloc_r+0xb0>
 8002bce:	4623      	mov	r3, r4
 8002bd0:	6864      	ldr	r4, [r4, #4]
 8002bd2:	e7ac      	b.n	8002b2e <_malloc_r+0x36>
 8002bd4:	4634      	mov	r4, r6
 8002bd6:	6876      	ldr	r6, [r6, #4]
 8002bd8:	e7b4      	b.n	8002b44 <_malloc_r+0x4c>
 8002bda:	4613      	mov	r3, r2
 8002bdc:	e7cc      	b.n	8002b78 <_malloc_r+0x80>
 8002bde:	230c      	movs	r3, #12
 8002be0:	4638      	mov	r0, r7
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	f000 f80e 	bl	8002c04 <__malloc_unlock>
 8002be8:	e797      	b.n	8002b1a <_malloc_r+0x22>
 8002bea:	6025      	str	r5, [r4, #0]
 8002bec:	e7dc      	b.n	8002ba8 <_malloc_r+0xb0>
 8002bee:	605b      	str	r3, [r3, #4]
 8002bf0:	deff      	udf	#255	; 0xff
 8002bf2:	bf00      	nop
 8002bf4:	20000318 	.word	0x20000318

08002bf8 <__malloc_lock>:
 8002bf8:	4801      	ldr	r0, [pc, #4]	; (8002c00 <__malloc_lock+0x8>)
 8002bfa:	f7ff bf05 	b.w	8002a08 <__retarget_lock_acquire_recursive>
 8002bfe:	bf00      	nop
 8002c00:	20000314 	.word	0x20000314

08002c04 <__malloc_unlock>:
 8002c04:	4801      	ldr	r0, [pc, #4]	; (8002c0c <__malloc_unlock+0x8>)
 8002c06:	f7ff bf00 	b.w	8002a0a <__retarget_lock_release_recursive>
 8002c0a:	bf00      	nop
 8002c0c:	20000314 	.word	0x20000314

08002c10 <__ssputs_r>:
 8002c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c14:	461f      	mov	r7, r3
 8002c16:	688e      	ldr	r6, [r1, #8]
 8002c18:	4682      	mov	sl, r0
 8002c1a:	42be      	cmp	r6, r7
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	4690      	mov	r8, r2
 8002c20:	680b      	ldr	r3, [r1, #0]
 8002c22:	d82c      	bhi.n	8002c7e <__ssputs_r+0x6e>
 8002c24:	898a      	ldrh	r2, [r1, #12]
 8002c26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c2a:	d026      	beq.n	8002c7a <__ssputs_r+0x6a>
 8002c2c:	6965      	ldr	r5, [r4, #20]
 8002c2e:	6909      	ldr	r1, [r1, #16]
 8002c30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c34:	eba3 0901 	sub.w	r9, r3, r1
 8002c38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c3c:	1c7b      	adds	r3, r7, #1
 8002c3e:	444b      	add	r3, r9
 8002c40:	106d      	asrs	r5, r5, #1
 8002c42:	429d      	cmp	r5, r3
 8002c44:	bf38      	it	cc
 8002c46:	461d      	movcc	r5, r3
 8002c48:	0553      	lsls	r3, r2, #21
 8002c4a:	d527      	bpl.n	8002c9c <__ssputs_r+0x8c>
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	f7ff ff53 	bl	8002af8 <_malloc_r>
 8002c52:	4606      	mov	r6, r0
 8002c54:	b360      	cbz	r0, 8002cb0 <__ssputs_r+0xa0>
 8002c56:	464a      	mov	r2, r9
 8002c58:	6921      	ldr	r1, [r4, #16]
 8002c5a:	f7ff fed7 	bl	8002a0c <memcpy>
 8002c5e:	89a3      	ldrh	r3, [r4, #12]
 8002c60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c68:	81a3      	strh	r3, [r4, #12]
 8002c6a:	6126      	str	r6, [r4, #16]
 8002c6c:	444e      	add	r6, r9
 8002c6e:	6026      	str	r6, [r4, #0]
 8002c70:	463e      	mov	r6, r7
 8002c72:	6165      	str	r5, [r4, #20]
 8002c74:	eba5 0509 	sub.w	r5, r5, r9
 8002c78:	60a5      	str	r5, [r4, #8]
 8002c7a:	42be      	cmp	r6, r7
 8002c7c:	d900      	bls.n	8002c80 <__ssputs_r+0x70>
 8002c7e:	463e      	mov	r6, r7
 8002c80:	4632      	mov	r2, r6
 8002c82:	4641      	mov	r1, r8
 8002c84:	6820      	ldr	r0, [r4, #0]
 8002c86:	f000 faaf 	bl	80031e8 <memmove>
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	68a3      	ldr	r3, [r4, #8]
 8002c8e:	1b9b      	subs	r3, r3, r6
 8002c90:	60a3      	str	r3, [r4, #8]
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	4433      	add	r3, r6
 8002c96:	6023      	str	r3, [r4, #0]
 8002c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c9c:	462a      	mov	r2, r5
 8002c9e:	f000 fadb 	bl	8003258 <_realloc_r>
 8002ca2:	4606      	mov	r6, r0
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	d1e0      	bne.n	8002c6a <__ssputs_r+0x5a>
 8002ca8:	4650      	mov	r0, sl
 8002caa:	6921      	ldr	r1, [r4, #16]
 8002cac:	f7ff febc 	bl	8002a28 <_free_r>
 8002cb0:	230c      	movs	r3, #12
 8002cb2:	f8ca 3000 	str.w	r3, [sl]
 8002cb6:	89a3      	ldrh	r3, [r4, #12]
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc0:	81a3      	strh	r3, [r4, #12]
 8002cc2:	e7e9      	b.n	8002c98 <__ssputs_r+0x88>

08002cc4 <_svfiprintf_r>:
 8002cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc8:	4698      	mov	r8, r3
 8002cca:	898b      	ldrh	r3, [r1, #12]
 8002ccc:	4607      	mov	r7, r0
 8002cce:	061b      	lsls	r3, r3, #24
 8002cd0:	460d      	mov	r5, r1
 8002cd2:	4614      	mov	r4, r2
 8002cd4:	b09d      	sub	sp, #116	; 0x74
 8002cd6:	d50e      	bpl.n	8002cf6 <_svfiprintf_r+0x32>
 8002cd8:	690b      	ldr	r3, [r1, #16]
 8002cda:	b963      	cbnz	r3, 8002cf6 <_svfiprintf_r+0x32>
 8002cdc:	2140      	movs	r1, #64	; 0x40
 8002cde:	f7ff ff0b 	bl	8002af8 <_malloc_r>
 8002ce2:	6028      	str	r0, [r5, #0]
 8002ce4:	6128      	str	r0, [r5, #16]
 8002ce6:	b920      	cbnz	r0, 8002cf2 <_svfiprintf_r+0x2e>
 8002ce8:	230c      	movs	r3, #12
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf0:	e0d0      	b.n	8002e94 <_svfiprintf_r+0x1d0>
 8002cf2:	2340      	movs	r3, #64	; 0x40
 8002cf4:	616b      	str	r3, [r5, #20]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d00:	2330      	movs	r3, #48	; 0x30
 8002d02:	f04f 0901 	mov.w	r9, #1
 8002d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d0a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002eac <_svfiprintf_r+0x1e8>
 8002d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d12:	4623      	mov	r3, r4
 8002d14:	469a      	mov	sl, r3
 8002d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d1a:	b10a      	cbz	r2, 8002d20 <_svfiprintf_r+0x5c>
 8002d1c:	2a25      	cmp	r2, #37	; 0x25
 8002d1e:	d1f9      	bne.n	8002d14 <_svfiprintf_r+0x50>
 8002d20:	ebba 0b04 	subs.w	fp, sl, r4
 8002d24:	d00b      	beq.n	8002d3e <_svfiprintf_r+0x7a>
 8002d26:	465b      	mov	r3, fp
 8002d28:	4622      	mov	r2, r4
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	4638      	mov	r0, r7
 8002d2e:	f7ff ff6f 	bl	8002c10 <__ssputs_r>
 8002d32:	3001      	adds	r0, #1
 8002d34:	f000 80a9 	beq.w	8002e8a <_svfiprintf_r+0x1c6>
 8002d38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d3a:	445a      	add	r2, fp
 8002d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8002d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80a1 	beq.w	8002e8a <_svfiprintf_r+0x1c6>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d52:	f10a 0a01 	add.w	sl, sl, #1
 8002d56:	9304      	str	r3, [sp, #16]
 8002d58:	9307      	str	r3, [sp, #28]
 8002d5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d5e:	931a      	str	r3, [sp, #104]	; 0x68
 8002d60:	4654      	mov	r4, sl
 8002d62:	2205      	movs	r2, #5
 8002d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d68:	4850      	ldr	r0, [pc, #320]	; (8002eac <_svfiprintf_r+0x1e8>)
 8002d6a:	f000 fa67 	bl	800323c <memchr>
 8002d6e:	9a04      	ldr	r2, [sp, #16]
 8002d70:	b9d8      	cbnz	r0, 8002daa <_svfiprintf_r+0xe6>
 8002d72:	06d0      	lsls	r0, r2, #27
 8002d74:	bf44      	itt	mi
 8002d76:	2320      	movmi	r3, #32
 8002d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d7c:	0711      	lsls	r1, r2, #28
 8002d7e:	bf44      	itt	mi
 8002d80:	232b      	movmi	r3, #43	; 0x2b
 8002d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d86:	f89a 3000 	ldrb.w	r3, [sl]
 8002d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8002d8c:	d015      	beq.n	8002dba <_svfiprintf_r+0xf6>
 8002d8e:	4654      	mov	r4, sl
 8002d90:	2000      	movs	r0, #0
 8002d92:	f04f 0c0a 	mov.w	ip, #10
 8002d96:	9a07      	ldr	r2, [sp, #28]
 8002d98:	4621      	mov	r1, r4
 8002d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d9e:	3b30      	subs	r3, #48	; 0x30
 8002da0:	2b09      	cmp	r3, #9
 8002da2:	d94d      	bls.n	8002e40 <_svfiprintf_r+0x17c>
 8002da4:	b1b0      	cbz	r0, 8002dd4 <_svfiprintf_r+0x110>
 8002da6:	9207      	str	r2, [sp, #28]
 8002da8:	e014      	b.n	8002dd4 <_svfiprintf_r+0x110>
 8002daa:	eba0 0308 	sub.w	r3, r0, r8
 8002dae:	fa09 f303 	lsl.w	r3, r9, r3
 8002db2:	4313      	orrs	r3, r2
 8002db4:	46a2      	mov	sl, r4
 8002db6:	9304      	str	r3, [sp, #16]
 8002db8:	e7d2      	b.n	8002d60 <_svfiprintf_r+0x9c>
 8002dba:	9b03      	ldr	r3, [sp, #12]
 8002dbc:	1d19      	adds	r1, r3, #4
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	9103      	str	r1, [sp, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bfbb      	ittet	lt
 8002dc6:	425b      	neglt	r3, r3
 8002dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8002dcc:	9307      	strge	r3, [sp, #28]
 8002dce:	9307      	strlt	r3, [sp, #28]
 8002dd0:	bfb8      	it	lt
 8002dd2:	9204      	strlt	r2, [sp, #16]
 8002dd4:	7823      	ldrb	r3, [r4, #0]
 8002dd6:	2b2e      	cmp	r3, #46	; 0x2e
 8002dd8:	d10c      	bne.n	8002df4 <_svfiprintf_r+0x130>
 8002dda:	7863      	ldrb	r3, [r4, #1]
 8002ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8002dde:	d134      	bne.n	8002e4a <_svfiprintf_r+0x186>
 8002de0:	9b03      	ldr	r3, [sp, #12]
 8002de2:	3402      	adds	r4, #2
 8002de4:	1d1a      	adds	r2, r3, #4
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	9203      	str	r2, [sp, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	bfb8      	it	lt
 8002dee:	f04f 33ff 	movlt.w	r3, #4294967295
 8002df2:	9305      	str	r3, [sp, #20]
 8002df4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002eb0 <_svfiprintf_r+0x1ec>
 8002df8:	2203      	movs	r2, #3
 8002dfa:	4650      	mov	r0, sl
 8002dfc:	7821      	ldrb	r1, [r4, #0]
 8002dfe:	f000 fa1d 	bl	800323c <memchr>
 8002e02:	b138      	cbz	r0, 8002e14 <_svfiprintf_r+0x150>
 8002e04:	2240      	movs	r2, #64	; 0x40
 8002e06:	9b04      	ldr	r3, [sp, #16]
 8002e08:	eba0 000a 	sub.w	r0, r0, sl
 8002e0c:	4082      	lsls	r2, r0
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	3401      	adds	r4, #1
 8002e12:	9304      	str	r3, [sp, #16]
 8002e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e18:	2206      	movs	r2, #6
 8002e1a:	4826      	ldr	r0, [pc, #152]	; (8002eb4 <_svfiprintf_r+0x1f0>)
 8002e1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e20:	f000 fa0c 	bl	800323c <memchr>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	d038      	beq.n	8002e9a <_svfiprintf_r+0x1d6>
 8002e28:	4b23      	ldr	r3, [pc, #140]	; (8002eb8 <_svfiprintf_r+0x1f4>)
 8002e2a:	bb1b      	cbnz	r3, 8002e74 <_svfiprintf_r+0x1b0>
 8002e2c:	9b03      	ldr	r3, [sp, #12]
 8002e2e:	3307      	adds	r3, #7
 8002e30:	f023 0307 	bic.w	r3, r3, #7
 8002e34:	3308      	adds	r3, #8
 8002e36:	9303      	str	r3, [sp, #12]
 8002e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e3a:	4433      	add	r3, r6
 8002e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e3e:	e768      	b.n	8002d12 <_svfiprintf_r+0x4e>
 8002e40:	460c      	mov	r4, r1
 8002e42:	2001      	movs	r0, #1
 8002e44:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e48:	e7a6      	b.n	8002d98 <_svfiprintf_r+0xd4>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f04f 0c0a 	mov.w	ip, #10
 8002e50:	4619      	mov	r1, r3
 8002e52:	3401      	adds	r4, #1
 8002e54:	9305      	str	r3, [sp, #20]
 8002e56:	4620      	mov	r0, r4
 8002e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e5c:	3a30      	subs	r2, #48	; 0x30
 8002e5e:	2a09      	cmp	r2, #9
 8002e60:	d903      	bls.n	8002e6a <_svfiprintf_r+0x1a6>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0c6      	beq.n	8002df4 <_svfiprintf_r+0x130>
 8002e66:	9105      	str	r1, [sp, #20]
 8002e68:	e7c4      	b.n	8002df4 <_svfiprintf_r+0x130>
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e72:	e7f0      	b.n	8002e56 <_svfiprintf_r+0x192>
 8002e74:	ab03      	add	r3, sp, #12
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	462a      	mov	r2, r5
 8002e7a:	4638      	mov	r0, r7
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <_svfiprintf_r+0x1f8>)
 8002e7e:	a904      	add	r1, sp, #16
 8002e80:	f3af 8000 	nop.w
 8002e84:	1c42      	adds	r2, r0, #1
 8002e86:	4606      	mov	r6, r0
 8002e88:	d1d6      	bne.n	8002e38 <_svfiprintf_r+0x174>
 8002e8a:	89ab      	ldrh	r3, [r5, #12]
 8002e8c:	065b      	lsls	r3, r3, #25
 8002e8e:	f53f af2d 	bmi.w	8002cec <_svfiprintf_r+0x28>
 8002e92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e94:	b01d      	add	sp, #116	; 0x74
 8002e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e9a:	ab03      	add	r3, sp, #12
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	462a      	mov	r2, r5
 8002ea0:	4638      	mov	r0, r7
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <_svfiprintf_r+0x1f8>)
 8002ea4:	a904      	add	r1, sp, #16
 8002ea6:	f000 f87d 	bl	8002fa4 <_printf_i>
 8002eaa:	e7eb      	b.n	8002e84 <_svfiprintf_r+0x1c0>
 8002eac:	08003452 	.word	0x08003452
 8002eb0:	08003458 	.word	0x08003458
 8002eb4:	0800345c 	.word	0x0800345c
 8002eb8:	00000000 	.word	0x00000000
 8002ebc:	08002c11 	.word	0x08002c11

08002ec0 <_printf_common>:
 8002ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ec4:	4616      	mov	r6, r2
 8002ec6:	4699      	mov	r9, r3
 8002ec8:	688a      	ldr	r2, [r1, #8]
 8002eca:	690b      	ldr	r3, [r1, #16]
 8002ecc:	4607      	mov	r7, r0
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	bfb8      	it	lt
 8002ed2:	4613      	movlt	r3, r2
 8002ed4:	6033      	str	r3, [r6, #0]
 8002ed6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002eda:	460c      	mov	r4, r1
 8002edc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ee0:	b10a      	cbz	r2, 8002ee6 <_printf_common+0x26>
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	6033      	str	r3, [r6, #0]
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	0699      	lsls	r1, r3, #26
 8002eea:	bf42      	ittt	mi
 8002eec:	6833      	ldrmi	r3, [r6, #0]
 8002eee:	3302      	addmi	r3, #2
 8002ef0:	6033      	strmi	r3, [r6, #0]
 8002ef2:	6825      	ldr	r5, [r4, #0]
 8002ef4:	f015 0506 	ands.w	r5, r5, #6
 8002ef8:	d106      	bne.n	8002f08 <_printf_common+0x48>
 8002efa:	f104 0a19 	add.w	sl, r4, #25
 8002efe:	68e3      	ldr	r3, [r4, #12]
 8002f00:	6832      	ldr	r2, [r6, #0]
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	42ab      	cmp	r3, r5
 8002f06:	dc2b      	bgt.n	8002f60 <_printf_common+0xa0>
 8002f08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f0c:	1e13      	subs	r3, r2, #0
 8002f0e:	6822      	ldr	r2, [r4, #0]
 8002f10:	bf18      	it	ne
 8002f12:	2301      	movne	r3, #1
 8002f14:	0692      	lsls	r2, r2, #26
 8002f16:	d430      	bmi.n	8002f7a <_printf_common+0xba>
 8002f18:	4649      	mov	r1, r9
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f20:	47c0      	blx	r8
 8002f22:	3001      	adds	r0, #1
 8002f24:	d023      	beq.n	8002f6e <_printf_common+0xae>
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	6922      	ldr	r2, [r4, #16]
 8002f2a:	f003 0306 	and.w	r3, r3, #6
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	bf14      	ite	ne
 8002f32:	2500      	movne	r5, #0
 8002f34:	6833      	ldreq	r3, [r6, #0]
 8002f36:	f04f 0600 	mov.w	r6, #0
 8002f3a:	bf08      	it	eq
 8002f3c:	68e5      	ldreq	r5, [r4, #12]
 8002f3e:	f104 041a 	add.w	r4, r4, #26
 8002f42:	bf08      	it	eq
 8002f44:	1aed      	subeq	r5, r5, r3
 8002f46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002f4a:	bf08      	it	eq
 8002f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bfc4      	itt	gt
 8002f54:	1a9b      	subgt	r3, r3, r2
 8002f56:	18ed      	addgt	r5, r5, r3
 8002f58:	42b5      	cmp	r5, r6
 8002f5a:	d11a      	bne.n	8002f92 <_printf_common+0xd2>
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	e008      	b.n	8002f72 <_printf_common+0xb2>
 8002f60:	2301      	movs	r3, #1
 8002f62:	4652      	mov	r2, sl
 8002f64:	4649      	mov	r1, r9
 8002f66:	4638      	mov	r0, r7
 8002f68:	47c0      	blx	r8
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	d103      	bne.n	8002f76 <_printf_common+0xb6>
 8002f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f76:	3501      	adds	r5, #1
 8002f78:	e7c1      	b.n	8002efe <_printf_common+0x3e>
 8002f7a:	2030      	movs	r0, #48	; 0x30
 8002f7c:	18e1      	adds	r1, r4, r3
 8002f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f88:	4422      	add	r2, r4
 8002f8a:	3302      	adds	r3, #2
 8002f8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f90:	e7c2      	b.n	8002f18 <_printf_common+0x58>
 8002f92:	2301      	movs	r3, #1
 8002f94:	4622      	mov	r2, r4
 8002f96:	4649      	mov	r1, r9
 8002f98:	4638      	mov	r0, r7
 8002f9a:	47c0      	blx	r8
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	d0e6      	beq.n	8002f6e <_printf_common+0xae>
 8002fa0:	3601      	adds	r6, #1
 8002fa2:	e7d9      	b.n	8002f58 <_printf_common+0x98>

08002fa4 <_printf_i>:
 8002fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa8:	7e0f      	ldrb	r7, [r1, #24]
 8002faa:	4691      	mov	r9, r2
 8002fac:	2f78      	cmp	r7, #120	; 0x78
 8002fae:	4680      	mov	r8, r0
 8002fb0:	460c      	mov	r4, r1
 8002fb2:	469a      	mov	sl, r3
 8002fb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002fb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002fba:	d807      	bhi.n	8002fcc <_printf_i+0x28>
 8002fbc:	2f62      	cmp	r7, #98	; 0x62
 8002fbe:	d80a      	bhi.n	8002fd6 <_printf_i+0x32>
 8002fc0:	2f00      	cmp	r7, #0
 8002fc2:	f000 80d5 	beq.w	8003170 <_printf_i+0x1cc>
 8002fc6:	2f58      	cmp	r7, #88	; 0x58
 8002fc8:	f000 80c1 	beq.w	800314e <_printf_i+0x1aa>
 8002fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fd4:	e03a      	b.n	800304c <_printf_i+0xa8>
 8002fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fda:	2b15      	cmp	r3, #21
 8002fdc:	d8f6      	bhi.n	8002fcc <_printf_i+0x28>
 8002fde:	a101      	add	r1, pc, #4	; (adr r1, 8002fe4 <_printf_i+0x40>)
 8002fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fe4:	0800303d 	.word	0x0800303d
 8002fe8:	08003051 	.word	0x08003051
 8002fec:	08002fcd 	.word	0x08002fcd
 8002ff0:	08002fcd 	.word	0x08002fcd
 8002ff4:	08002fcd 	.word	0x08002fcd
 8002ff8:	08002fcd 	.word	0x08002fcd
 8002ffc:	08003051 	.word	0x08003051
 8003000:	08002fcd 	.word	0x08002fcd
 8003004:	08002fcd 	.word	0x08002fcd
 8003008:	08002fcd 	.word	0x08002fcd
 800300c:	08002fcd 	.word	0x08002fcd
 8003010:	08003157 	.word	0x08003157
 8003014:	0800307d 	.word	0x0800307d
 8003018:	08003111 	.word	0x08003111
 800301c:	08002fcd 	.word	0x08002fcd
 8003020:	08002fcd 	.word	0x08002fcd
 8003024:	08003179 	.word	0x08003179
 8003028:	08002fcd 	.word	0x08002fcd
 800302c:	0800307d 	.word	0x0800307d
 8003030:	08002fcd 	.word	0x08002fcd
 8003034:	08002fcd 	.word	0x08002fcd
 8003038:	08003119 	.word	0x08003119
 800303c:	682b      	ldr	r3, [r5, #0]
 800303e:	1d1a      	adds	r2, r3, #4
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	602a      	str	r2, [r5, #0]
 8003044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800304c:	2301      	movs	r3, #1
 800304e:	e0a0      	b.n	8003192 <_printf_i+0x1ee>
 8003050:	6820      	ldr	r0, [r4, #0]
 8003052:	682b      	ldr	r3, [r5, #0]
 8003054:	0607      	lsls	r7, r0, #24
 8003056:	f103 0104 	add.w	r1, r3, #4
 800305a:	6029      	str	r1, [r5, #0]
 800305c:	d501      	bpl.n	8003062 <_printf_i+0xbe>
 800305e:	681e      	ldr	r6, [r3, #0]
 8003060:	e003      	b.n	800306a <_printf_i+0xc6>
 8003062:	0646      	lsls	r6, r0, #25
 8003064:	d5fb      	bpl.n	800305e <_printf_i+0xba>
 8003066:	f9b3 6000 	ldrsh.w	r6, [r3]
 800306a:	2e00      	cmp	r6, #0
 800306c:	da03      	bge.n	8003076 <_printf_i+0xd2>
 800306e:	232d      	movs	r3, #45	; 0x2d
 8003070:	4276      	negs	r6, r6
 8003072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003076:	230a      	movs	r3, #10
 8003078:	4859      	ldr	r0, [pc, #356]	; (80031e0 <_printf_i+0x23c>)
 800307a:	e012      	b.n	80030a2 <_printf_i+0xfe>
 800307c:	682b      	ldr	r3, [r5, #0]
 800307e:	6820      	ldr	r0, [r4, #0]
 8003080:	1d19      	adds	r1, r3, #4
 8003082:	6029      	str	r1, [r5, #0]
 8003084:	0605      	lsls	r5, r0, #24
 8003086:	d501      	bpl.n	800308c <_printf_i+0xe8>
 8003088:	681e      	ldr	r6, [r3, #0]
 800308a:	e002      	b.n	8003092 <_printf_i+0xee>
 800308c:	0641      	lsls	r1, r0, #25
 800308e:	d5fb      	bpl.n	8003088 <_printf_i+0xe4>
 8003090:	881e      	ldrh	r6, [r3, #0]
 8003092:	2f6f      	cmp	r7, #111	; 0x6f
 8003094:	bf0c      	ite	eq
 8003096:	2308      	moveq	r3, #8
 8003098:	230a      	movne	r3, #10
 800309a:	4851      	ldr	r0, [pc, #324]	; (80031e0 <_printf_i+0x23c>)
 800309c:	2100      	movs	r1, #0
 800309e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030a2:	6865      	ldr	r5, [r4, #4]
 80030a4:	2d00      	cmp	r5, #0
 80030a6:	bfa8      	it	ge
 80030a8:	6821      	ldrge	r1, [r4, #0]
 80030aa:	60a5      	str	r5, [r4, #8]
 80030ac:	bfa4      	itt	ge
 80030ae:	f021 0104 	bicge.w	r1, r1, #4
 80030b2:	6021      	strge	r1, [r4, #0]
 80030b4:	b90e      	cbnz	r6, 80030ba <_printf_i+0x116>
 80030b6:	2d00      	cmp	r5, #0
 80030b8:	d04b      	beq.n	8003152 <_printf_i+0x1ae>
 80030ba:	4615      	mov	r5, r2
 80030bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80030c0:	fb03 6711 	mls	r7, r3, r1, r6
 80030c4:	5dc7      	ldrb	r7, [r0, r7]
 80030c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80030ca:	4637      	mov	r7, r6
 80030cc:	42bb      	cmp	r3, r7
 80030ce:	460e      	mov	r6, r1
 80030d0:	d9f4      	bls.n	80030bc <_printf_i+0x118>
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d10b      	bne.n	80030ee <_printf_i+0x14a>
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	07de      	lsls	r6, r3, #31
 80030da:	d508      	bpl.n	80030ee <_printf_i+0x14a>
 80030dc:	6923      	ldr	r3, [r4, #16]
 80030de:	6861      	ldr	r1, [r4, #4]
 80030e0:	4299      	cmp	r1, r3
 80030e2:	bfde      	ittt	le
 80030e4:	2330      	movle	r3, #48	; 0x30
 80030e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030ee:	1b52      	subs	r2, r2, r5
 80030f0:	6122      	str	r2, [r4, #16]
 80030f2:	464b      	mov	r3, r9
 80030f4:	4621      	mov	r1, r4
 80030f6:	4640      	mov	r0, r8
 80030f8:	f8cd a000 	str.w	sl, [sp]
 80030fc:	aa03      	add	r2, sp, #12
 80030fe:	f7ff fedf 	bl	8002ec0 <_printf_common>
 8003102:	3001      	adds	r0, #1
 8003104:	d14a      	bne.n	800319c <_printf_i+0x1f8>
 8003106:	f04f 30ff 	mov.w	r0, #4294967295
 800310a:	b004      	add	sp, #16
 800310c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	f043 0320 	orr.w	r3, r3, #32
 8003116:	6023      	str	r3, [r4, #0]
 8003118:	2778      	movs	r7, #120	; 0x78
 800311a:	4832      	ldr	r0, [pc, #200]	; (80031e4 <_printf_i+0x240>)
 800311c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	6829      	ldr	r1, [r5, #0]
 8003124:	061f      	lsls	r7, r3, #24
 8003126:	f851 6b04 	ldr.w	r6, [r1], #4
 800312a:	d402      	bmi.n	8003132 <_printf_i+0x18e>
 800312c:	065f      	lsls	r7, r3, #25
 800312e:	bf48      	it	mi
 8003130:	b2b6      	uxthmi	r6, r6
 8003132:	07df      	lsls	r7, r3, #31
 8003134:	bf48      	it	mi
 8003136:	f043 0320 	orrmi.w	r3, r3, #32
 800313a:	6029      	str	r1, [r5, #0]
 800313c:	bf48      	it	mi
 800313e:	6023      	strmi	r3, [r4, #0]
 8003140:	b91e      	cbnz	r6, 800314a <_printf_i+0x1a6>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	f023 0320 	bic.w	r3, r3, #32
 8003148:	6023      	str	r3, [r4, #0]
 800314a:	2310      	movs	r3, #16
 800314c:	e7a6      	b.n	800309c <_printf_i+0xf8>
 800314e:	4824      	ldr	r0, [pc, #144]	; (80031e0 <_printf_i+0x23c>)
 8003150:	e7e4      	b.n	800311c <_printf_i+0x178>
 8003152:	4615      	mov	r5, r2
 8003154:	e7bd      	b.n	80030d2 <_printf_i+0x12e>
 8003156:	682b      	ldr	r3, [r5, #0]
 8003158:	6826      	ldr	r6, [r4, #0]
 800315a:	1d18      	adds	r0, r3, #4
 800315c:	6961      	ldr	r1, [r4, #20]
 800315e:	6028      	str	r0, [r5, #0]
 8003160:	0635      	lsls	r5, r6, #24
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	d501      	bpl.n	800316a <_printf_i+0x1c6>
 8003166:	6019      	str	r1, [r3, #0]
 8003168:	e002      	b.n	8003170 <_printf_i+0x1cc>
 800316a:	0670      	lsls	r0, r6, #25
 800316c:	d5fb      	bpl.n	8003166 <_printf_i+0x1c2>
 800316e:	8019      	strh	r1, [r3, #0]
 8003170:	2300      	movs	r3, #0
 8003172:	4615      	mov	r5, r2
 8003174:	6123      	str	r3, [r4, #16]
 8003176:	e7bc      	b.n	80030f2 <_printf_i+0x14e>
 8003178:	682b      	ldr	r3, [r5, #0]
 800317a:	2100      	movs	r1, #0
 800317c:	1d1a      	adds	r2, r3, #4
 800317e:	602a      	str	r2, [r5, #0]
 8003180:	681d      	ldr	r5, [r3, #0]
 8003182:	6862      	ldr	r2, [r4, #4]
 8003184:	4628      	mov	r0, r5
 8003186:	f000 f859 	bl	800323c <memchr>
 800318a:	b108      	cbz	r0, 8003190 <_printf_i+0x1ec>
 800318c:	1b40      	subs	r0, r0, r5
 800318e:	6060      	str	r0, [r4, #4]
 8003190:	6863      	ldr	r3, [r4, #4]
 8003192:	6123      	str	r3, [r4, #16]
 8003194:	2300      	movs	r3, #0
 8003196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800319a:	e7aa      	b.n	80030f2 <_printf_i+0x14e>
 800319c:	462a      	mov	r2, r5
 800319e:	4649      	mov	r1, r9
 80031a0:	4640      	mov	r0, r8
 80031a2:	6923      	ldr	r3, [r4, #16]
 80031a4:	47d0      	blx	sl
 80031a6:	3001      	adds	r0, #1
 80031a8:	d0ad      	beq.n	8003106 <_printf_i+0x162>
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	079b      	lsls	r3, r3, #30
 80031ae:	d413      	bmi.n	80031d8 <_printf_i+0x234>
 80031b0:	68e0      	ldr	r0, [r4, #12]
 80031b2:	9b03      	ldr	r3, [sp, #12]
 80031b4:	4298      	cmp	r0, r3
 80031b6:	bfb8      	it	lt
 80031b8:	4618      	movlt	r0, r3
 80031ba:	e7a6      	b.n	800310a <_printf_i+0x166>
 80031bc:	2301      	movs	r3, #1
 80031be:	4632      	mov	r2, r6
 80031c0:	4649      	mov	r1, r9
 80031c2:	4640      	mov	r0, r8
 80031c4:	47d0      	blx	sl
 80031c6:	3001      	adds	r0, #1
 80031c8:	d09d      	beq.n	8003106 <_printf_i+0x162>
 80031ca:	3501      	adds	r5, #1
 80031cc:	68e3      	ldr	r3, [r4, #12]
 80031ce:	9903      	ldr	r1, [sp, #12]
 80031d0:	1a5b      	subs	r3, r3, r1
 80031d2:	42ab      	cmp	r3, r5
 80031d4:	dcf2      	bgt.n	80031bc <_printf_i+0x218>
 80031d6:	e7eb      	b.n	80031b0 <_printf_i+0x20c>
 80031d8:	2500      	movs	r5, #0
 80031da:	f104 0619 	add.w	r6, r4, #25
 80031de:	e7f5      	b.n	80031cc <_printf_i+0x228>
 80031e0:	08003463 	.word	0x08003463
 80031e4:	08003474 	.word	0x08003474

080031e8 <memmove>:
 80031e8:	4288      	cmp	r0, r1
 80031ea:	b510      	push	{r4, lr}
 80031ec:	eb01 0402 	add.w	r4, r1, r2
 80031f0:	d902      	bls.n	80031f8 <memmove+0x10>
 80031f2:	4284      	cmp	r4, r0
 80031f4:	4623      	mov	r3, r4
 80031f6:	d807      	bhi.n	8003208 <memmove+0x20>
 80031f8:	1e43      	subs	r3, r0, #1
 80031fa:	42a1      	cmp	r1, r4
 80031fc:	d008      	beq.n	8003210 <memmove+0x28>
 80031fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003206:	e7f8      	b.n	80031fa <memmove+0x12>
 8003208:	4601      	mov	r1, r0
 800320a:	4402      	add	r2, r0
 800320c:	428a      	cmp	r2, r1
 800320e:	d100      	bne.n	8003212 <memmove+0x2a>
 8003210:	bd10      	pop	{r4, pc}
 8003212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800321a:	e7f7      	b.n	800320c <memmove+0x24>

0800321c <_sbrk_r>:
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	2300      	movs	r3, #0
 8003220:	4d05      	ldr	r5, [pc, #20]	; (8003238 <_sbrk_r+0x1c>)
 8003222:	4604      	mov	r4, r0
 8003224:	4608      	mov	r0, r1
 8003226:	602b      	str	r3, [r5, #0]
 8003228:	f7fd fbac 	bl	8000984 <_sbrk>
 800322c:	1c43      	adds	r3, r0, #1
 800322e:	d102      	bne.n	8003236 <_sbrk_r+0x1a>
 8003230:	682b      	ldr	r3, [r5, #0]
 8003232:	b103      	cbz	r3, 8003236 <_sbrk_r+0x1a>
 8003234:	6023      	str	r3, [r4, #0]
 8003236:	bd38      	pop	{r3, r4, r5, pc}
 8003238:	20000310 	.word	0x20000310

0800323c <memchr>:
 800323c:	4603      	mov	r3, r0
 800323e:	b510      	push	{r4, lr}
 8003240:	b2c9      	uxtb	r1, r1
 8003242:	4402      	add	r2, r0
 8003244:	4293      	cmp	r3, r2
 8003246:	4618      	mov	r0, r3
 8003248:	d101      	bne.n	800324e <memchr+0x12>
 800324a:	2000      	movs	r0, #0
 800324c:	e003      	b.n	8003256 <memchr+0x1a>
 800324e:	7804      	ldrb	r4, [r0, #0]
 8003250:	3301      	adds	r3, #1
 8003252:	428c      	cmp	r4, r1
 8003254:	d1f6      	bne.n	8003244 <memchr+0x8>
 8003256:	bd10      	pop	{r4, pc}

08003258 <_realloc_r>:
 8003258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800325c:	4680      	mov	r8, r0
 800325e:	4614      	mov	r4, r2
 8003260:	460e      	mov	r6, r1
 8003262:	b921      	cbnz	r1, 800326e <_realloc_r+0x16>
 8003264:	4611      	mov	r1, r2
 8003266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800326a:	f7ff bc45 	b.w	8002af8 <_malloc_r>
 800326e:	b92a      	cbnz	r2, 800327c <_realloc_r+0x24>
 8003270:	f7ff fbda 	bl	8002a28 <_free_r>
 8003274:	4625      	mov	r5, r4
 8003276:	4628      	mov	r0, r5
 8003278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800327c:	f000 f81b 	bl	80032b6 <_malloc_usable_size_r>
 8003280:	4284      	cmp	r4, r0
 8003282:	4607      	mov	r7, r0
 8003284:	d802      	bhi.n	800328c <_realloc_r+0x34>
 8003286:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800328a:	d812      	bhi.n	80032b2 <_realloc_r+0x5a>
 800328c:	4621      	mov	r1, r4
 800328e:	4640      	mov	r0, r8
 8003290:	f7ff fc32 	bl	8002af8 <_malloc_r>
 8003294:	4605      	mov	r5, r0
 8003296:	2800      	cmp	r0, #0
 8003298:	d0ed      	beq.n	8003276 <_realloc_r+0x1e>
 800329a:	42bc      	cmp	r4, r7
 800329c:	4622      	mov	r2, r4
 800329e:	4631      	mov	r1, r6
 80032a0:	bf28      	it	cs
 80032a2:	463a      	movcs	r2, r7
 80032a4:	f7ff fbb2 	bl	8002a0c <memcpy>
 80032a8:	4631      	mov	r1, r6
 80032aa:	4640      	mov	r0, r8
 80032ac:	f7ff fbbc 	bl	8002a28 <_free_r>
 80032b0:	e7e1      	b.n	8003276 <_realloc_r+0x1e>
 80032b2:	4635      	mov	r5, r6
 80032b4:	e7df      	b.n	8003276 <_realloc_r+0x1e>

080032b6 <_malloc_usable_size_r>:
 80032b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032ba:	1f18      	subs	r0, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bfbc      	itt	lt
 80032c0:	580b      	ldrlt	r3, [r1, r0]
 80032c2:	18c0      	addlt	r0, r0, r3
 80032c4:	4770      	bx	lr
	...

080032c8 <_init>:
 80032c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ca:	bf00      	nop
 80032cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ce:	bc08      	pop	{r3}
 80032d0:	469e      	mov	lr, r3
 80032d2:	4770      	bx	lr

080032d4 <_fini>:
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	bf00      	nop
 80032d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032da:	bc08      	pop	{r3}
 80032dc:	469e      	mov	lr, r3
 80032de:	4770      	bx	lr
